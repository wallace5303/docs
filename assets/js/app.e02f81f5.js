(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,i,s=e[0],l=e[1],c=e[2],p=0,u=[];p<s.length;p++)i=s[p],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&u.push(o[i][0]),o[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(d&&d(e);u.length;)u.shift()();return a.push.apply(a,c||[]),t()}function t(){for(var n,e=0;e<a.length;e++){for(var t=a[e],r=!0,s=1;s<t.length;s++){var l=t[s];0!==o[l]&&(r=!1)}r&&(a.splice(e--,1),n=i(i.s=t[0]))}return n}var r={},o={1:0},a=[];function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.e=function(n){var e=[],t=o[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=o[n]=[e,r]}));e.push(t[2]=r);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(n){return i.p+"assets/js/"+({}[n]||n)+"."+{2:"1326d5c5",3:"c240128c",4:"a809b5fd",5:"59c49d6d",6:"aa9df056",7:"2e2e1aaa",8:"7f948bb0",9:"ac7dd032",10:"db895a40",11:"c5ac1545",12:"a4a35127",13:"86b07bd3",14:"d72f1751",15:"c7c1c2f3",16:"1361ac25",17:"621dbcd2",18:"b4f02f45",19:"d3eb693f",20:"475cad22",21:"6cff2da1",22:"fd97ef6c",23:"9cf8b438",24:"3ccbb276",25:"c1897786",26:"52d8084b",27:"b31a1c9a",28:"d4cf8197",29:"0838fb7c",30:"5da2b2b6",31:"de74d007",32:"542f36fd",33:"d347c284",34:"9f7bb653",35:"730b2cd1",36:"5b6701ee",37:"61cb5290",38:"ed6042a3",39:"0842ada2",40:"31ade3b9",41:"c6c8bc3e",42:"a7371182",43:"75069f0d",44:"2a42932e",45:"23dae611",46:"c5f262b9",47:"c089640c",48:"9608054d",49:"924294e2",50:"7d529aa1",51:"3f50b216",52:"c479b678",53:"aa27f106",54:"068d812c",55:"8ad3e5c0",56:"33c1972e",57:"7dfc9509",58:"3039ad0b",59:"d03c5fe7",60:"94845692",61:"f7005ea4",62:"41e3f03c",63:"f50b0599",64:"2e5dc6c4",65:"46f7b0f7",66:"14032e4d",67:"abdb830f",68:"875f0253",69:"3539190b",70:"c7731e13",71:"c20ee00e",72:"9706c06b",73:"49e0d74b",74:"968ba9b3",75:"87e05558",76:"d2d9c40c",77:"cda67d95",78:"ab97a60b",79:"76f91149",80:"79a2e929",81:"3ac5c8d2",82:"e10e01d0",83:"6ca5a1ac",84:"d5c1177a",85:"c27a8813",86:"0064271d",87:"7b9c9390",88:"0b2cfc9e",89:"6f92c228",90:"a9f7724f",91:"9f98f009",92:"8c7284a9",93:"b17095a8",94:"33242843",95:"bed25e1a",96:"2b64d4e4",97:"15744937",98:"3fd49b19",99:"6be9cd67",100:"66e1cae2",101:"35847400",102:"c76dece6",103:"0c64ef2b",104:"4cd88db3",105:"e38834f1",106:"81cd61b7",107:"243c4b3d",108:"32b27cb4",109:"4d060e9b",110:"18846f3b",111:"6f0058f0",112:"cd1f706e",113:"8538b626",114:"3e447705",115:"7ce5b0ef",116:"f1452c9d",117:"7d4bc35b",118:"b4bd51ba",119:"56fe2c85",120:"c177b38d",121:"2a3e8e81",122:"6953a83c",123:"6b8d81d6",124:"23014b78",125:"1dbb483e",126:"b0062d46",127:"d8bfb723",128:"17dd3fc8",129:"69612762",130:"7018eb5f",131:"4a585dfe",132:"a5593608",133:"b60d1193",134:"556cdfb7",135:"b1b6b375",136:"038dc8f3",137:"28d5a74d",138:"b25c520a",139:"db2b2a70",140:"458621eb",141:"4759c097",142:"149debe9",143:"33c5629b",144:"5ed0a70e",145:"a7ee9f8e",146:"67665ddf",147:"5cef8698",148:"cd0e486d",149:"276608d5",150:"da0fa6f3",151:"2079d943",152:"1b27df6c",153:"77c56bb5",154:"823f85e0",155:"98af3264",156:"5904ba3a",157:"d0ae4d8f",158:"fb2b0885",159:"c4489236",160:"81e23de4",161:"b8434c16",162:"10c0d362",163:"85eac130",164:"239b1203",165:"d087df66",166:"78d90e5a",167:"b7e4977e",168:"2eb89ff9",169:"d5f484ec",170:"d2c3cc4e",171:"1b10dc93",172:"0df6a754",173:"6da0ffd3",174:"39a3c3e5",175:"41be7306",176:"9ea8e785",177:"7f14299d",178:"d7669f2f"}[n]+".js"}(n);var l=new Error;a=function(e){s.onerror=s.onload=null,clearTimeout(c);var t=o[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+a+")",l.name="ChunkLoadError",l.type=r,l.request=a,t[1](l)}o[n]=void 0}};var c=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(e)},i.m=n,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)i.d(t,r,function(e){return n[e]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/",i.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var d=l;a.push([103,0]),t()}([function(n,e,t){var r=t(55),o=r.all;n.exports=r.IS_HTMLDDA?function(n){return"function"==typeof n||n===o}:function(n){return"function"==typeof n}},function(n,e,t){var r=t(27),o=Function.prototype,a=o.call,i=r&&o.bind.bind(a,a);n.exports=r?i:function(n){return function(){return a.apply(n,arguments)}}},function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||this||Function("return this")()},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var r=t(3);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(69),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();n.exports=a},function(n,e,t){"use strict";function r(n,e,t,r,o,a,i,s){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),i?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),o&&o.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},c._ssrRegister=l):o&&(l=s?function(){o.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var d=c.render;c.render=function(n,e){return l.call(e),d(n,e)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){var r=t(1),o=t(32),a=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return a(o(n),e)}},function(n,e,t){var r=t(0),o=t(55),a=o.all;n.exports=o.IS_HTMLDDA?function(n){return"object"==typeof n?null!==n:r(n)||n===a}:function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(163),o=t(166);n.exports=function(n,e){var t=o(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return a})),t.d(e,"j",(function(){return i})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return d})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return u})),t.d(e,"l",(function(){return m})),t.d(e,"m",(function(){return h})),t.d(e,"d",(function(){return v})),t.d(e,"k",(function(){return f})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return y}));t(16);const r=/#.*$/,o=/\.(md|html)$/,a=/\/$/,i=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(o,"")}function l(n){return i.test(n)}function c(n){return/^mailto:/.test(n)}function d(n){return/^tel:/.test(n)}function p(n){if(l(n))return n;if(!n)return"404";const e=n.match(r),t=e?e[0]:"",o=s(n);return a.test(o)?n:o+".html"+t}function u(n,e){const t=n.hash,o=function(n){const e=n&&n.match(r);if(e)return e[0]}(e);if(o&&t!==o)return!1;return s(n.path)===s(e)}function m(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){const r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;const o=e.split("/");t&&o[o.length-1]||o.pop();const a=n.replace(/^\//,"").split("/");for(let n=0;n<a.length;n++){const e=a[n];".."===e?o.pop():"."!==e&&o.push(e)}""!==o[0]&&o.unshift("");return o.join("/")}(e,t));const r=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===r)return Object.assign({},n[e],{type:"page",path:p(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function h(n,e,t,r){const{pages:o,themeConfig:a}=t,i=r&&a.locales&&a.locales[r]||a;if("auto"===(n.frontmatter.sidebar||i.sidebar||a.sidebar))return g(n);const s=i.sidebar||a.sidebar;if(s){const{base:t,config:r}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var t;return{}}(e,s);return"auto"===r?g(n):r?r.map(n=>function n(e,t,r,o=1){if("string"==typeof e)return m(t,e,r);if(Array.isArray(e))return Object.assign(m(t,e[0],r),{title:e[1]});{o>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const a=e.children||[];return 0===a.length&&e.path?Object.assign(m(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:a.map(e=>n(e,t,r,o+1)),collapsable:!1!==e.collapsable}}}(n,o,t)):[]}return[]}function g(n){const e=v(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function v(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function f(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function x(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function y(n,e){return x(e)-x(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(15),o=t(148),a=t(149),i=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":i&&i in Object(n)?o(n):a(n)}},function(n,e,t){var r=t(4),o=t(17),a=t(35);n.exports=r?function(n,e,t){return o.f(n,e,a(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(6).Symbol;n.exports=r},function(n,e,t){"use strict";var r=t(26),o=t(32),a=t(33),i=t(127),s=t(129);r({target:"Array",proto:!0,arity:1,forced:t(3)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=o(this),t=a(e),r=arguments.length;s(t+r);for(var l=0;l<r;l++)e[t]=arguments[l],t++;return i(e,t),t}})},function(n,e,t){var r=t(4),o=t(64),a=t(98),i=t(25),s=t(54),l=TypeError,c=Object.defineProperty,d=Object.getOwnPropertyDescriptor;e.f=r?a?function(n,e,t){if(i(n),e=s(e),i(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=d(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(i(n),e=s(e),i(t),o)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(1),o=r({}.toString),a=r("".slice);n.exports=function(n){return a(o(n),8,-1)}},function(n,e,t){var r=t(153),o=t(154),a=t(155),i=t(156),s=t(157);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(71);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(10)(Object,"create");n.exports=r},function(n,e,t){var r=t(175);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(45);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r,o;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(o="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function o(n,e,t){return n<e?e:n>t?t:n}function a(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=o(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),d=r.speed,p=r.easing;return l.offsetWidth,i((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(c,function(n,e,t){var o;return(o="translate3d"===r.positionUsing?{transform:"translate3d("+a(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+a(n)+"%,0)"}:{"margin-left":a(n)+"%"}).transition="all "+e+"ms "+t,o}(n,d,p)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),d)}),d)):setTimeout(e,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*o(Math.random()*e,.1,.95)),e=o(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var o,i=e.querySelector(r.barSelector),l=n?"-100":a(t.status||0),d=document.querySelector(r.parent);return s(i,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(o=e.querySelector(r.spinnerSelector))&&u(o),d!=document.body&&c(d,"nprogress-custom-parent"),d.appendChild(e),e},t.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&u(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var i=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,o=n.length,a=e.charAt(0).toUpperCase()+e.slice(1);o--;)if((r=n[o]+a)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,o,a=arguments;if(2==a.length)for(t in e)void 0!==(o=e[t])&&e.hasOwnProperty(t)&&r(n,t,o);else r(n,a[1],a[2])}}();function l(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=p(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function d(n,e){var t,r=p(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function u(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=o)},function(n,e,t){var r=t(9),o=String,a=TypeError;n.exports=function(n){if(r(n))return n;throw a(o(n)+" is not an object")}},function(n,e,t){var r=t(2),o=t(51).f,a=t(14),i=t(111),s=t(37),l=t(65),c=t(123);n.exports=function(n,e){var t,d,p,u,m,h=n.target,g=n.global,v=n.stat;if(t=g?r:v?r[h]||s(h,{}):(r[h]||{}).prototype)for(d in e){if(u=e[d],p=n.dontCallGetSet?(m=o(t,d))&&m.value:t[d],!c(g?d:h+(v?".":"#")+d,n.forced)&&void 0!==p){if(typeof u==typeof p)continue;l(u,p)}(n.sham||p&&p.sham)&&a(u,"sham",!0),i(t,d,u,n)}}},function(n,e,t){var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var r=t(47),o=t(52);n.exports=function(n){return r(o(n))}},function(n,e,t){var r=t(2),o=t(0),a=function(n){return o(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?a(r[n]):r[n]&&r[n][e]}},function(n,e,t){var r=t(0),o=t(109),a=TypeError;n.exports=function(n){if(r(n))return n;throw a(o(n)+" is not a function")}},function(n,e,t){var r=t(2),o=t(61),a=t(8),i=t(63),s=t(59),l=t(58),c=r.Symbol,d=o("wks"),p=l?c.for||c:c&&c.withoutSetter||i;n.exports=function(n){return a(d,n)||(d[n]=s&&a(c,n)?c[n]:p("Symbol."+n)),d[n]}},function(n,e,t){var r=t(52),o=Object;n.exports=function(n){return o(r(n))}},function(n,e,t){var r=t(121);n.exports=function(n){return r(n.length)}},function(n,e,t){var r=t(27),o=Function.prototype.call;n.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(2),o=t(37),a=r["__core-js_shared__"]||o("__core-js_shared__",{});n.exports=a},function(n,e,t){var r=t(2),o=Object.defineProperty;n.exports=function(n,e){try{o(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(147),o=t(12),a=Object.prototype,i=a.hasOwnProperty,s=a.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return o(n)&&i.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(10)(t(6),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(167),o=t(174),a=t(176),i=t(177),s=t(178);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(5),o=t(45),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!o(n))||(i.test(n)||!a.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(13),o=t(12);n.exports=function(n){return"symbol"==typeof n||o(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){var r=t(1),o=t(3),a=t(18),i=Object,s=r("".split);n.exports=o((function(){return!i("z").propertyIsEnumerable(0)}))?function(n){return"String"==a(n)?s(n,""):i(n)}:i},function(n,e){n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,a=/^0o[0-7]+$/i,i=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),d=Object.prototype.toString,p=Math.max,u=Math.min,m=function(){return c.Date.now()};function h(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function g(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==d.call(n)}(n))return NaN;if(h(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=h(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=o.test(n);return s||a.test(n)?i(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,o,a,i,s,l,c=0,d=!1,v=!1,f=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,a=o;return r=o=void 0,c=e,i=n.apply(a,t)}function x(n){return c=n,s=setTimeout(w,e),d?b(n):i}function y(n){var t=n-l;return void 0===l||t>=e||t<0||v&&n-c>=a}function w(){var n=m();if(y(n))return j(n);s=setTimeout(w,function(n){var t=e-(n-l);return v?u(t,a-(n-c)):t}(n))}function j(n){return s=void 0,f&&r?b(n):(r=o=void 0,i)}function k(){var n=m(),t=y(n);if(r=arguments,o=this,l=n,t){if(void 0===s)return x(l);if(v)return s=setTimeout(w,e),b(l)}return void 0===s&&(s=setTimeout(w,e)),i}return e=g(e)||0,h(t)&&(d=!!t.leading,a=(v="maxWait"in t)?p(g(t.maxWait)||0,e):a,f="trailing"in t?!!t.trailing:f),k.cancel=function(){void 0!==s&&clearTimeout(s),c=0,r=l=o=s=void 0},k.flush=function(){return void 0===s?i:j(m())},k}},function(n,e,t){var r=t(4),o=t(34),a=t(105),i=t(35),s=t(28),l=t(54),c=t(8),d=t(64),p=Object.getOwnPropertyDescriptor;e.f=r?p:function(n,e){if(n=s(n),e=l(e),d)try{return p(n,e)}catch(n){}if(c(n,e))return i(!o(a.f,n,e),n[e])}},function(n,e,t){var r=t(53),o=TypeError;n.exports=function(n){if(r(n))throw o("Can't call method on "+n);return n}},function(n,e){n.exports=function(n){return null==n}},function(n,e,t){var r=t(106),o=t(56);n.exports=function(n){var e=r(n,"string");return o(e)?e:e+""}},function(n,e){var t="object"==typeof document&&document.all,r=void 0===t&&void 0!==t;n.exports={all:t,IS_HTMLDDA:r}},function(n,e,t){var r=t(29),o=t(0),a=t(57),i=t(58),s=Object;n.exports=i?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return o(e)&&a(e.prototype,s(n))}},function(n,e,t){var r=t(1);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(59);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(60),o=t(3),a=t(2).String;n.exports=!!Object.getOwnPropertySymbols&&!o((function(){var n=Symbol();return!a(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r,o,a=t(2),i=t(107),s=a.process,l=a.Deno,c=s&&s.versions||l&&l.version,d=c&&c.v8;d&&(o=(r=d.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(o=+r[1]),n.exports=o},function(n,e,t){var r=t(62),o=t(36);(n.exports=function(n,e){return o[n]||(o[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.31.0",mode:r?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.31.0/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e){n.exports=!1},function(n,e,t){var r=t(1),o=0,a=Math.random(),i=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+i(++o+a,36)}},function(n,e,t){var r=t(4),o=t(3),a=t(97);n.exports=!r&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(8),o=t(116),a=t(51),i=t(17);n.exports=function(n,e,t){for(var s=o(e),l=i.f,c=a.f,d=0;d<s.length;d++){var p=s[d];r(n,p)||t&&r(t,p)||l(n,p,c(e,p))}}},function(n,e,t){var r=t(120);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){var r=t(133),o=t(25),a=t(134);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return o(t),a(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,o=n.length;++t<r;)n[o+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(19),o=t(158),a=t(159),i=t(160),s=t(161),l=t(162);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=o,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=s,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(13),o=t(40);n.exports=function(n){if(!o(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(179),o=t(12);n.exports=function n(e,t,a,i,s){return e===t||(null==e||null==t||!o(e)&&!o(t)?e!=e&&t!=t:r(e,t,a,i,n,s))}},function(n,e,t){var r=t(76),o=t(182),a=t(77);n.exports=function(n,e,t,i,s,l){var c=1&t,d=n.length,p=e.length;if(d!=p&&!(c&&p>d))return!1;var u=l.get(n),m=l.get(e);if(u&&m)return u==e&&m==n;var h=-1,g=!0,v=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++h<d;){var f=n[h],b=e[h];if(i)var x=c?i(b,f,h,e,n,l):i(f,b,h,n,e,l);if(void 0!==x){if(x)continue;g=!1;break}if(v){if(!o(e,(function(n,e){if(!a(v,e)&&(f===n||s(f,n,t,i,l)))return v.push(e)}))){g=!1;break}}else if(f!==b&&!s(f,b,t,i,l)){g=!1;break}}return l.delete(n),l.delete(e),g}},function(n,e,t){var r=t(41),o=t(180),a=t(181);function i(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}i.prototype.add=i.prototype.push=o,i.prototype.has=a,n.exports=i},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(192),o=t(198),a=t(82);n.exports=function(n){return a(n)?r(n):o(n)}},function(n,e,t){(function(n){var r=t(6),o=t(194),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,s=i&&i.exports===a?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||o;n.exports=l}).call(this,t(49)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(195),o=t(196),a=t(197),i=a&&a.isTypedArray,s=i?o(i):r;n.exports=s},function(n,e,t){var r=t(72),o=t(43);n.exports=function(n){return null!=n&&o(n.length)&&!r(n)}},function(n,e,t){var r=t(10)(t(6),"Set");n.exports=r},function(n,e,t){var r=t(40);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(87),o=t(23);n.exports=function(n,e){for(var t=0,a=(e=r(e,n)).length;null!=n&&t<a;)n=n[o(e[t++])];return t&&t==a?n:void 0}},function(n,e,t){var r=t(5),o=t(44),a=t(209),i=t(212);n.exports=function(n,e){return r(n)?n:o(n,e)?[n]:a(i(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(145),o=t(150),a=t(221),i=t(229),s=t(238),l=t(102),c=a((function(n){var e=l(n);return s(e)&&(e=void 0),i(r(n,1,s,!0),o(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,o=r.exec(t);if(!o)return t;var a="",i=0,s=0;for(i=o.index;i<t.length;i++){switch(t.charCodeAt(i)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==i&&(a+=t.substring(s,i)),s=i+1,a+=e}return s!==i?a+t.substring(s,i):a}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},o=(t(241),t(7)),a=Object(o.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=a.exports},function(n,e,t){"use strict";t.r(e);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},o=(t(242),t(7)),a=Object(o.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,r){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=a.exports},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var r=t(2),o=t(9),a=r.document,i=o(a)&&o(a.createElement);n.exports=function(n){return i?a.createElement(n):{}}},function(n,e,t){var r=t(4),o=t(3);n.exports=r&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(1),o=t(3),a=t(0),i=t(8),s=t(4),l=t(112).CONFIGURABLE,c=t(113),d=t(114),p=d.enforce,u=d.get,m=String,h=Object.defineProperty,g=r("".slice),v=r("".replace),f=r([].join),b=s&&!o((function(){return 8!==h((function(){}),"length",{value:8}).length})),x=String(String).split("String"),y=n.exports=function(n,e,t){"Symbol("===g(m(e),0,7)&&(e="["+v(m(e),/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!i(n,"name")||l&&n.name!==e)&&(s?h(n,"name",{value:e,configurable:!0}):n.name=e),b&&t&&i(t,"arity")&&n.length!==t.arity&&h(n,"length",{value:t.arity});try{t&&i(t,"constructor")&&t.constructor?s&&h(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=p(n);return i(r,"source")||(r.source=f(x,"string"==typeof e?e:"")),n};Function.prototype.toString=y((function(){return a(this)&&u(this).source||c(this)}),"toString")},function(n,e,t){var r=t(61),o=t(63),a=r("keys");n.exports=function(n){return a[n]||(a[n]=o(n))}},function(n,e,t){var r=t(1),o=t(8),a=t(28),i=t(118).indexOf,s=t(48),l=r([].push);n.exports=function(n,e){var t,r=a(n),c=0,d=[];for(t in r)!o(s,t)&&o(r,t)&&l(d,t);for(;e.length>c;)o(r,t=e[c++])&&(~i(d,t)||l(d,t));return d}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(247)},function(n,e,t){"use strict";var r=t(26),o=t(124).left,a=t(125),i=t(60);r({target:"Array",proto:!0,forced:!t(126)&&i>79&&i<83||!a("reduce")},{reduce:function(n){var e=arguments.length;return o(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!r.call({1:2},1);e.f=a?function(n){var e=o(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(34),o=t(9),a=t(56),i=t(108),s=t(110),l=t(31),c=TypeError,d=l("toPrimitive");n.exports=function(n,e){if(!o(n)||a(n))return n;var t,l=i(n,d);if(l){if(void 0===e&&(e="default"),t=r(l,n,e),!o(t)||a(t))return t;throw c("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e){n.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(n,e,t){var r=t(30),o=t(53);n.exports=function(n,e){var t=n[e];return o(t)?void 0:r(t)}},function(n,e){var t=String;n.exports=function(n){try{return t(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(34),o=t(0),a=t(9),i=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&o(t=n.toString)&&!a(s=r(t,n)))return s;if(o(t=n.valueOf)&&!a(s=r(t,n)))return s;if("string"!==e&&o(t=n.toString)&&!a(s=r(t,n)))return s;throw i("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),o=t(17),a=t(99),i=t(37);n.exports=function(n,e,t,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:e;if(r(t)&&a(t,c,s),s.global)l?n[e]=t:i(e,t);else{try{s.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:o.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){var r=t(4),o=t(8),a=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,s=o(a,"name"),l=s&&"something"===function(){}.name,c=s&&(!r||r&&i(a,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(n,e,t){var r=t(1),o=t(0),a=t(36),i=r(Function.toString);o(a.inspectSource)||(a.inspectSource=function(n){return i(n)}),n.exports=a.inspectSource},function(n,e,t){var r,o,a,i=t(115),s=t(2),l=t(9),c=t(14),d=t(8),p=t(36),u=t(100),m=t(48),h=s.TypeError,g=s.WeakMap;if(i||p.state){var v=p.state||(p.state=new g);v.get=v.get,v.has=v.has,v.set=v.set,r=function(n,e){if(v.has(n))throw h("Object already initialized");return e.facade=n,v.set(n,e),e},o=function(n){return v.get(n)||{}},a=function(n){return v.has(n)}}else{var f=u("state");m[f]=!0,r=function(n,e){if(d(n,f))throw h("Object already initialized");return e.facade=n,c(n,f,e),e},o=function(n){return d(n,f)?n[f]:{}},a=function(n){return d(n,f)}}n.exports={set:r,get:o,has:a,enforce:function(n){return a(n)?o(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=o(e)).type!==n)throw h("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r=t(2),o=t(0),a=r.WeakMap;n.exports=o(a)&&/native code/.test(String(a))},function(n,e,t){var r=t(29),o=t(1),a=t(117),i=t(122),s=t(25),l=o([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=a.f(s(n)),t=i.f;return t?l(e,t(n)):e}},function(n,e,t){var r=t(101),o=t(96).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,o)}},function(n,e,t){var r=t(28),o=t(119),a=t(33),i=function(n){return function(e,t,i){var s,l=r(e),c=a(l),d=o(i,c);if(n&&t!=t){for(;c>d;)if((s=l[d++])!=s)return!0}else for(;c>d;d++)if((n||d in l)&&l[d]===t)return n||d||0;return!n&&-1}};n.exports={includes:i(!0),indexOf:i(!1)}},function(n,e,t){var r=t(66),o=Math.max,a=Math.min;n.exports=function(n,e){var t=r(n);return t<0?o(t+e,0):a(t,e)}},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?r:t)(e)}},function(n,e,t){var r=t(66),o=Math.min;n.exports=function(n){return n>0?o(r(n),9007199254740991):0}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(3),o=t(0),a=/#|\.prototype\./,i=function(n,e){var t=l[s(n)];return t==d||t!=c&&(o(e)?r(e):!!e)},s=i.normalize=function(n){return String(n).replace(a,".").toLowerCase()},l=i.data={},c=i.NATIVE="N",d=i.POLYFILL="P";n.exports=i},function(n,e,t){var r=t(30),o=t(32),a=t(47),i=t(33),s=TypeError,l=function(n){return function(e,t,l,c){r(t);var d=o(e),p=a(d),u=i(d),m=n?u-1:0,h=n?-1:1;if(l<2)for(;;){if(m in p){c=p[m],m+=h;break}if(m+=h,n?m<0:u<=m)throw s("Reduce of empty array with no initial value")}for(;n?m>=0:u>m;m+=h)m in p&&(c=t(c,p[m],m,d));return c}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var r=t(18);n.exports="undefined"!=typeof process&&"process"==r(process)},function(n,e,t){"use strict";var r=t(4),o=t(128),a=TypeError,i=Object.getOwnPropertyDescriptor,s=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=s?function(n,e){if(o(n)&&!i(n,"length").writable)throw a("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){var r=t(18);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e){var t=TypeError;n.exports=function(n){if(n>9007199254740991)throw t("Maximum allowed index exceeded");return n}},function(n,e,t){var r=t(26),o=t(2),a=t(131),i=t(132),s=o.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=i(n,e,l),r({global:!0,constructor:!0,arity:1,forced:l},t)},d=function(n,e){if(s&&s[n]){var t={};t[n]=i("WebAssembly."+n,e,l),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return a(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return a(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return a(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return a(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return a(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return a(n,this,arguments)}})),c("URIError",(function(n){return function(e){return a(n,this,arguments)}})),d("CompileError",(function(n){return function(e){return a(n,this,arguments)}})),d("LinkError",(function(n){return function(e){return a(n,this,arguments)}})),d("RuntimeError",(function(n){return function(e){return a(n,this,arguments)}}))},function(n,e,t){var r=t(27),o=Function.prototype,a=o.apply,i=o.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?i.bind(a):function(){return i.apply(a,arguments)})},function(n,e,t){"use strict";var r=t(29),o=t(8),a=t(14),i=t(57),s=t(67),l=t(65),c=t(135),d=t(136),p=t(137),u=t(141),m=t(142),h=t(4),g=t(62);n.exports=function(n,e,t,v){var f=v?2:1,b=n.split("."),x=b[b.length-1],y=r.apply(null,b);if(y){var w=y.prototype;if(!g&&o(w,"cause")&&delete w.cause,!t)return y;var j=r("Error"),k=e((function(n,e){var t=p(v?e:n,void 0),r=v?new y(n):new y;return void 0!==t&&a(r,"message",t),m(r,k,r.stack,2),this&&i(w,this)&&d(r,this,k),arguments.length>f&&u(r,arguments[f]),r}));if(k.prototype=w,"Error"!==x?s?s(k,j):l(k,j,{name:!0}):h&&"stackTraceLimit"in y&&(c(k,y,"stackTraceLimit"),c(k,y,"prepareStackTrace")),l(k,y),!g)try{w.name!==x&&a(w,"name",x),w.constructor=k}catch(n){}return k}}},function(n,e,t){var r=t(1),o=t(30);n.exports=function(n,e,t){try{return r(o(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){var r=t(0),o=String,a=TypeError;n.exports=function(n){if("object"==typeof n||r(n))return n;throw a("Can't set "+o(n)+" as a prototype")}},function(n,e,t){var r=t(17).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){var r=t(0),o=t(9),a=t(67);n.exports=function(n,e,t){var i,s;return a&&r(i=e.constructor)&&i!==t&&o(s=i.prototype)&&s!==t.prototype&&a(n,s),n}},function(n,e,t){var r=t(138);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){var r=t(139),o=String;n.exports=function(n){if("Symbol"===r(n))throw TypeError("Cannot convert a Symbol value to a string");return o(n)}},function(n,e,t){var r=t(140),o=t(0),a=t(18),i=t(31)("toStringTag"),s=Object,l="Arguments"==a(function(){return arguments}());n.exports=r?a:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),i))?t:l?a(e):"Object"==(r=a(e))&&o(e.callee)?"Arguments":r}},function(n,e,t){var r={};r[t(31)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(9),o=t(14);n.exports=function(n,e){r(e)&&"cause"in e&&o(n,"cause",e.cause)}},function(n,e,t){var r=t(14),o=t(143),a=t(144),i=Error.captureStackTrace;n.exports=function(n,e,t,s){a&&(i?i(n,e):r(n,"stack",o(t,s)))}},function(n,e,t){var r=t(1),o=Error,a=r("".replace),i=String(o("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(i);n.exports=function(n,e){if(l&&"string"==typeof n&&!o.prepareStackTrace)for(;e--;)n=a(n,s,"");return n}},function(n,e,t){var r=t(3),o=t(35);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",o(1,7)),7!==n.stack)}))},function(n,e,t){var r=t(68),o=t(146);n.exports=function n(e,t,a,i,s){var l=-1,c=e.length;for(a||(a=o),s||(s=[]);++l<c;){var d=e[l];t>0&&a(d)?t>1?n(d,t-1,a,i,s):r(s,d):i||(s[s.length]=d)}return s}},function(n,e,t){var r=t(15),o=t(38),a=t(5),i=r?r.isConcatSpreadable:void 0;n.exports=function(n){return a(n)||o(n)||!!(i&&n&&n[i])}},function(n,e,t){var r=t(13),o=t(12);n.exports=function(n){return o(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(15),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=a.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var o=i.call(n);return r&&(e?n[s]=t:delete n[s]),o}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(151),o=t(207),a=t(46),i=t(5),s=t(218);n.exports=function(n){return"function"==typeof n?n:null==n?a:"object"==typeof n?i(n)?o(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(152),o=t(206),a=t(85);n.exports=function(n){var e=o(n);return 1==e.length&&e[0][2]?a(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(70),o=t(74);n.exports=function(n,e,t,a){var i=t.length,s=i,l=!a;if(null==n)return!s;for(n=Object(n);i--;){var c=t[i];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++i<s;){var d=(c=t[i])[0],p=n[d],u=c[1];if(l&&c[2]){if(void 0===p&&!(d in n))return!1}else{var m=new r;if(a)var h=a(p,u,d,n,e,m);if(!(void 0===h?o(u,p,3,a,m):h))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(20),o=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():o.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(20);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(20);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(20);n.exports=function(n,e){var t=this.__data__,o=r(t,n);return o<0?(++this.size,t.push([n,e])):t[o][1]=e,this}},function(n,e,t){var r=t(19);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(19),o=t(39),a=t(41);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var i=t.__data__;if(!o||i.length<199)return i.push([n,e]),this.size=++t.size,this;t=this.__data__=new a(i)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(72),o=t(164),a=t(40),i=t(73),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,d=l.toString,p=c.hasOwnProperty,u=RegExp("^"+d.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!a(n)||o(n))&&(r(n)?u:s).test(i(n))}},function(n,e,t){var r,o=t(165),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!a&&a in n}},function(n,e,t){var r=t(6)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(168),o=t(19),a=t(39);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(n,e,t){var r=t(169),o=t(170),a=t(171),i=t(172),s=t(173);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(21);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(21),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return o.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(21),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:o.call(e,n)}},function(n,e,t){var r=t(21);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(22);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(22);n.exports=function(n,e){var t=r(this,n),o=t.size;return t.set(n,e),this.size+=t.size==o?0:1,this}},function(n,e,t){var r=t(70),o=t(75),a=t(183),i=t(186),s=t(202),l=t(5),c=t(79),d=t(81),p="[object Object]",u=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,m,h,g){var v=l(n),f=l(e),b=v?"[object Array]":s(n),x=f?"[object Array]":s(e),y=(b="[object Arguments]"==b?p:b)==p,w=(x="[object Arguments]"==x?p:x)==p,j=b==x;if(j&&c(n)){if(!c(e))return!1;v=!0,y=!1}if(j&&!y)return g||(g=new r),v||d(n)?o(n,e,t,m,h,g):a(n,e,b,t,m,h,g);if(!(1&t)){var k=y&&u.call(n,"__wrapped__"),E=w&&u.call(e,"__wrapped__");if(k||E){var T=k?n.value():n,I=E?e.value():e;return g||(g=new r),h(T,I,t,m,g)}}return!!j&&(g||(g=new r),i(n,e,t,m,h,g))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(15),o=t(184),a=t(71),i=t(75),s=t(185),l=t(42),c=r?r.prototype:void 0,d=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,p,u){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new o(n),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var m=s;case"[object Set]":var h=1&r;if(m||(m=l),n.size!=e.size&&!h)return!1;var g=u.get(n);if(g)return g==e;r|=2,u.set(n,e);var v=i(m(n),m(e),r,c,p,u);return u.delete(n),v;case"[object Symbol]":if(d)return d.call(n)==d.call(e)}return!1}},function(n,e,t){var r=t(6).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(187),o=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,a,i,s){var l=1&t,c=r(n),d=c.length;if(d!=r(e).length&&!l)return!1;for(var p=d;p--;){var u=c[p];if(!(l?u in e:o.call(e,u)))return!1}var m=s.get(n),h=s.get(e);if(m&&h)return m==e&&h==n;var g=!0;s.set(n,e),s.set(e,n);for(var v=l;++p<d;){var f=n[u=c[p]],b=e[u];if(a)var x=l?a(b,f,u,e,n,s):a(f,b,u,n,e,s);if(!(void 0===x?f===b||i(f,b,t,a,s):x)){g=!1;break}v||(v="constructor"==u)}if(g&&!v){var y=n.constructor,w=e.constructor;y==w||!("constructor"in n)||!("constructor"in e)||"function"==typeof y&&y instanceof y&&"function"==typeof w&&w instanceof w||(g=!1)}return s.delete(n),s.delete(e),g}},function(n,e,t){var r=t(188),o=t(189),a=t(78);n.exports=function(n){return r(n,a,o)}},function(n,e,t){var r=t(68),o=t(5);n.exports=function(n,e,t){var a=e(n);return o(n)?a:r(a,t(n))}},function(n,e,t){var r=t(190),o=t(191),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(n){return null==n?[]:(n=Object(n),r(i(n),(function(e){return a.call(n,e)})))}:o;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=0,a=[];++t<r;){var i=n[t];e(i,t,n)&&(a[o++]=i)}return a}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(193),o=t(38),a=t(5),i=t(79),s=t(80),l=t(81),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=a(n),d=!t&&o(n),p=!t&&!d&&i(n),u=!t&&!d&&!p&&l(n),m=t||d||p||u,h=m?r(n.length,String):[],g=h.length;for(var v in n)!e&&!c.call(n,v)||m&&("length"==v||p&&("offset"==v||"parent"==v)||u&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||s(v,g))||h.push(v);return h}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(13),o=t(43),a=t(12),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,n.exports=function(n){return a(n)&&o(n.length)&&!!i[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(69),o=e&&!e.nodeType&&e,a=o&&"object"==typeof n&&n&&!n.nodeType&&n,i=a&&a.exports===o&&r.process,s=function(){try{var n=a&&a.require&&a.require("util").types;return n||i&&i.binding&&i.binding("util")}catch(n){}}();n.exports=s}).call(this,t(49)(n))},function(n,e,t){var r=t(199),o=t(200),a=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return o(n);var e=[];for(var t in Object(n))a.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(201)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(203),o=t(39),a=t(204),i=t(83),s=t(205),l=t(13),c=t(73),d=c(r),p=c(o),u=c(a),m=c(i),h=c(s),g=l;(r&&"[object DataView]"!=g(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=g(new o)||a&&"[object Promise]"!=g(a.resolve())||i&&"[object Set]"!=g(new i)||s&&"[object WeakMap]"!=g(new s))&&(g=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case d:return"[object DataView]";case p:return"[object Map]";case u:return"[object Promise]";case m:return"[object Set]";case h:return"[object WeakMap]"}return e}),n.exports=g},function(n,e,t){var r=t(10)(t(6),"DataView");n.exports=r},function(n,e,t){var r=t(10)(t(6),"Promise");n.exports=r},function(n,e,t){var r=t(10)(t(6),"WeakMap");n.exports=r},function(n,e,t){var r=t(84),o=t(78);n.exports=function(n){for(var e=o(n),t=e.length;t--;){var a=e[t],i=n[a];e[t]=[a,i,r(i)]}return e}},function(n,e,t){var r=t(74),o=t(208),a=t(215),i=t(44),s=t(84),l=t(85),c=t(23);n.exports=function(n,e){return i(n)&&s(e)?l(c(n),e):function(t){var i=o(t,n);return void 0===i&&i===e?a(t,n):r(e,i,3)}}},function(n,e,t){var r=t(86);n.exports=function(n,e,t){var o=null==n?void 0:r(n,e);return void 0===o?t:o}},function(n,e,t){var r=t(210),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(o,(function(n,t,r,o){e.push(r?o.replace(a,"$1"):t||n)})),e}));n.exports=i},function(n,e,t){var r=t(211);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(41);function o(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,o=e?e.apply(this,r):r[0],a=t.cache;if(a.has(o))return a.get(o);var i=n.apply(this,r);return t.cache=a.set(o,i)||a,i};return t.cache=new(o.Cache||r),t}o.Cache=r,n.exports=o},function(n,e,t){var r=t(213);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(15),o=t(214),a=t(5),i=t(45),s=r?r.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(a(e))return o(e,n)+"";if(i(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=Array(r);++t<r;)o[t]=e(n[t],t,n);return o}},function(n,e,t){var r=t(216),o=t(217);n.exports=function(n,e){return null!=n&&o(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(87),o=t(38),a=t(5),i=t(80),s=t(43),l=t(23);n.exports=function(n,e,t){for(var c=-1,d=(e=r(e,n)).length,p=!1;++c<d;){var u=l(e[c]);if(!(p=null!=n&&t(n,u)))break;n=n[u]}return p||++c!=d?p:!!(d=null==n?0:n.length)&&s(d)&&i(u,d)&&(a(n)||o(n))}},function(n,e,t){var r=t(219),o=t(220),a=t(44),i=t(23);n.exports=function(n){return a(n)?r(i(n)):o(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(86);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(46),o=t(222),a=t(224);n.exports=function(n,e){return a(o(n,e,r),n+"")}},function(n,e,t){var r=t(223),o=Math.max;n.exports=function(n,e,t){return e=o(void 0===e?n.length-1:e,0),function(){for(var a=arguments,i=-1,s=o(a.length-e,0),l=Array(s);++i<s;)l[i]=a[e+i];i=-1;for(var c=Array(e+1);++i<e;)c[i]=a[i];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(225),o=t(228)(r);n.exports=o},function(n,e,t){var r=t(226),o=t(227),a=t(46),i=o?function(n,e){return o(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:a;n.exports=i},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(10),o=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=o},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var o=t(),a=16-(o-r);if(r=o,a>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(76),o=t(230),a=t(235),i=t(77),s=t(236),l=t(42);n.exports=function(n,e,t){var c=-1,d=o,p=n.length,u=!0,m=[],h=m;if(t)u=!1,d=a;else if(p>=200){var g=e?null:s(n);if(g)return l(g);u=!1,d=i,h=new r}else h=e?[]:m;n:for(;++c<p;){var v=n[c],f=e?e(v):v;if(v=t||0!==v?v:0,u&&f==f){for(var b=h.length;b--;)if(h[b]===f)continue n;e&&h.push(f),m.push(v)}else d(h,f,t)||(h!==m&&h.push(f),m.push(v))}return m}},function(n,e,t){var r=t(231);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(232),o=t(233),a=t(234);n.exports=function(n,e,t){return e==e?a(n,e,t):r(n,o,t)}},function(n,e){n.exports=function(n,e,t,r){for(var o=n.length,a=t+(r?1:-1);r?a--:++a<o;)if(e(n[a],a,n))return a;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,o=n.length;++r<o;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,o=null==n?0:n.length;++r<o;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(83),o=t(237),a=t(42),i=r&&1/a(new r([,-0]))[1]==1/0?function(n){return new r(n)}:o;n.exports=i},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(82),o=t(12);n.exports=function(n){return o(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(88)},function(n,e,t){"use strict";t(89)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(90)},function(n,e,t){"use strict";t(91)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),o=Array.isArray;function a(n){return null==n}function i(n){return null!=n}function s(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function d(n){return null!==n&&"object"==typeof n}var p=Object.prototype.toString;function u(n){return"[object Object]"===p.call(n)}function m(n){return"[object RegExp]"===p.call(n)}function h(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function g(n){return i(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function v(n){return null==n?"":Array.isArray(n)||u(n)&&n.toString===p?JSON.stringify(n,null,2):String(n)}function f(n){var e=parseFloat(n);return isNaN(e)?n:e}function b(n,e){for(var t=Object.create(null),r=n.split(","),o=0;o<r.length;o++)t[r[o]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}b("slot,component",!0);var x=b("key,ref,slot,slot-scope,is");function y(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var r=n.indexOf(e);if(r>-1)return n.splice(r,1)}}var w=Object.prototype.hasOwnProperty;function j(n,e){return w.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var E=/-(\w)/g,T=k((function(n){return n.replace(E,(function(n,e){return e?e.toUpperCase():""}))})),I=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),A=/\B([A-Z])/g,z=k((function(n){return n.replace(A,"-$1").toLowerCase()}));var P=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function S(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function _(n,e){for(var t in e)n[t]=e[t];return n}function q(n){for(var e={},t=0;t<n.length;t++)n[t]&&_(e,n[t]);return e}function C(n,e,t){}var B=function(n,e,t){return!1},O=function(n){return n};function D(n,e){if(n===e)return!0;var t=d(n),r=d(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var o=Array.isArray(n),a=Array.isArray(e);if(o&&a)return n.length===e.length&&n.every((function(n,t){return D(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(o||a)return!1;var i=Object.keys(n),s=Object.keys(e);return i.length===s.length&&i.every((function(t){return D(n[t],e[t])}))}catch(n){return!1}}function $(n,e){for(var t=0;t<n.length;t++)if(D(n[t],e))return t;return-1}function U(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function L(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var R=["component","directive","filter"],M=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:B,isReservedAttr:B,isUnknownElement:B,getTagNamespace:C,parsePlatformTagName:O,mustUseProp:B,async:!0,_lifecycleHooks:M},N=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function W(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var J=new RegExp("[^".concat(N.source,".$_\\d]"));var Z="__proto__"in{},V="undefined"!=typeof window,G=V&&window.navigator.userAgent.toLowerCase(),K=G&&/msie|trident/.test(G),X=G&&G.indexOf("msie 9.0")>0,Y=G&&G.indexOf("edge/")>0;G&&G.indexOf("android");var Q=G&&/iphone|ipad|ipod|ios/.test(G);G&&/chrome\/\d+/.test(G),G&&/phantomjs/.test(G);var nn,en=G&&G.match(/firefox\/(\d+)/),tn={}.watch,rn=!1;if(V)try{var on={};Object.defineProperty(on,"passive",{get:function(){rn=!0}}),window.addEventListener("test-passive",null,on)}catch(n){}var an=function(){return void 0===nn&&(nn=!V&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),nn},sn=V&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ln(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,dn="undefined"!=typeof Symbol&&ln(Symbol)&&"undefined"!=typeof Reflect&&ln(Reflect.ownKeys);cn="undefined"!=typeof Set&&ln(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var pn=null;function un(n){void 0===n&&(n=null),n||pn&&pn._scope.off(),pn=n,n&&n._scope.on()}var mn=function(){function n(n,e,t,r,o,a,i,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=o,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),hn=function(n){void 0===n&&(n="");var e=new mn;return e.text=n,e.isComment=!0,e};function gn(n){return new mn(void 0,void 0,void 0,String(n))}function vn(n){var e=new mn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var fn=0,bn=[],xn=function(){function n(){this._pending=!1,this.id=fn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,bn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,r=e.length;t<r;t++){0,e[t].update()}},n}();xn.target=null;var yn=[];function wn(n){yn.push(n),xn.target=n}function jn(){yn.pop(),xn.target=yn[yn.length-1]}var kn=Array.prototype,En=Object.create(kn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=kn[n];W(En,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var o,a=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":o=t;break;case"splice":o=t.slice(2)}return o&&i.observeArray(o),i.dep.notify(),a}))}));var Tn=Object.getOwnPropertyNames(En),In={},An=!0;function zn(n){An=n}var Pn={notify:C,depend:C,addSub:C,removeSub:C},Sn=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?Pn:new xn,this.vmCount=0,W(n,"__ob__",this),o(n)){if(!t)if(Z)n.__proto__=En;else for(var r=0,a=Tn.length;r<a;r++){W(n,s=Tn[r],En[s])}e||this.observeArray(n)}else{var i=Object.keys(n);for(r=0;r<i.length;r++){var s;qn(n,s=i[r],In,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)_n(n[e],!1,this.mock)},n}();function _n(n,e,t){return n&&j(n,"__ob__")&&n.__ob__ instanceof Sn?n.__ob__:!An||!t&&an()||!o(n)&&!u(n)||!Object.isExtensible(n)||n.__v_skip||Ln(n)||n instanceof mn?void 0:new Sn(n,e,t)}function qn(n,e,t,r,a,i){var s=new xn,l=Object.getOwnPropertyDescriptor(n,e);if(!l||!1!==l.configurable){var c=l&&l.get,d=l&&l.set;c&&!d||t!==In&&2!==arguments.length||(t=n[e]);var p=!a&&_n(t,!1,i);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=c?c.call(n):t;return xn.target&&(s.depend(),p&&(p.dep.depend(),o(e)&&On(e))),Ln(e)&&!a?e.value:e},set:function(e){var r=c?c.call(n):t;if(L(r,e)){if(d)d.call(n,e);else{if(c)return;if(!a&&Ln(r)&&!Ln(e))return void(r.value=e);t=e}p=!a&&_n(e,!1,i),s.notify()}}}),s}}function Cn(n,e,t){if(!Un(n)){var r=n.__ob__;return o(n)&&h(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&_n(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?(qn(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function Bn(n,e){if(o(n)&&h(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Un(n)||j(n,e)&&(delete n[e],t&&t.dep.notify())}}function On(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),o(e)&&On(e)}function Dn(n){return $n(n,!0),W(n,"__v_isShallow",!0),n}function $n(n,e){if(!Un(n)){_n(n,e,an());0}}function Un(n){return!(!n||!n.__v_isReadonly)}function Ln(n){return!(!n||!0!==n.__v_isRef)}function Rn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(Ln(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];Ln(r)&&!Ln(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Mn;var Fn=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Mn,!n&&Mn&&(this.index=(Mn.scopes||(Mn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Mn;try{return Mn=this,n()}finally{Mn=e}}else 0},n.prototype.on=function(){Mn=this},n.prototype.off=function(){Mn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Nn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Hn=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function Wn(n,e){function t(){var n=t.fns;if(!o(n))return Ae(n,null,arguments,e,"v-on handler");for(var r=n.slice(),a=0;a<r.length;a++)Ae(r[a],null,arguments,e,"v-on handler")}return t.fns=n,t}function Jn(n,e,t,r,o,i){var l,c,d,p;for(l in n)c=n[l],d=e[l],p=Hn(l),a(c)||(a(d)?(a(c.fns)&&(c=n[l]=Wn(c,i)),s(p.once)&&(c=n[l]=o(p.name,c,p.capture)),t(p.name,c,p.capture,p.passive,p.params)):c!==d&&(d.fns=c,n[l]=d));for(l in e)a(n[l])&&r((p=Hn(l)).name,e[l],p.capture)}function Zn(n,e,t){var r;n instanceof mn&&(n=n.data.hook||(n.data.hook={}));var o=n[e];function l(){t.apply(this,arguments),y(r.fns,l)}a(o)?r=Wn([l]):i(o.fns)&&s(o.merged)?(r=o).fns.push(l):r=Wn([o,l]),r.merged=!0,n[e]=r}function Vn(n,e,t,r,o){if(i(e)){if(j(e,t))return n[t]=e[t],o||delete e[t],!0;if(j(e,r))return n[t]=e[r],o||delete e[r],!0}return!1}function Gn(n){return l(n)?[gn(n)]:o(n)?function n(e,t){var r,c,d,p,u=[];for(r=0;r<e.length;r++)a(c=e[r])||"boolean"==typeof c||(d=u.length-1,p=u[d],o(c)?c.length>0&&(Kn((c=n(c,"".concat(t||"","_").concat(r)))[0])&&Kn(p)&&(u[d]=gn(p.text+c[0].text),c.shift()),u.push.apply(u,c)):l(c)?Kn(p)?u[d]=gn(p.text+c):""!==c&&u.push(gn(c)):Kn(c)&&Kn(p)?u[d]=gn(p.text+c.text):(s(e._isVList)&&i(c.tag)&&a(c.key)&&i(t)&&(c.key="__vlist".concat(t,"_").concat(r,"__")),u.push(c)));return u}(n):void 0}function Kn(n){return i(n)&&i(n.text)&&!1===n.isComment}function Xn(n,e){var t,r,a,s,l=null;if(o(n)||"string"==typeof n)for(l=new Array(n.length),t=0,r=n.length;t<r;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(d(n))if(dn&&n[Symbol.iterator]){l=[];for(var c=n[Symbol.iterator](),p=c.next();!p.done;)l.push(e(p.value,l.length)),p=c.next()}else for(a=Object.keys(n),l=new Array(a.length),t=0,r=a.length;t<r;t++)s=a[t],l[t]=e(n[s],s,t);return i(l)||(l=[]),l._isVList=!0,l}function Yn(n,e,t,r){var o,a=this.$scopedSlots[n];a?(t=t||{},r&&(t=_(_({},r),t)),o=a(t)||(c(e)?e():e)):o=this.$slots[n]||(c(e)?e():e);var i=t&&t.slot;return i?this.$createElement("template",{slot:i},o):o}function Qn(n){return St(this.$options,"filters",n,!0)||O}function ne(n,e){return o(n)?-1===n.indexOf(e):n!==e}function ee(n,e,t,r,o){var a=F.keyCodes[e]||t;return o&&r&&!F.keyCodes[e]?ne(o,r):a?ne(a,n):r?z(r)!==e:void 0===n}function te(n,e,t,r,a){if(t)if(d(t)){o(t)&&(t=q(t));var i=void 0,s=function(o){if("class"===o||"style"===o||x(o))i=n;else{var s=n.attrs&&n.attrs.type;i=r||F.mustUseProp(e,s,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=T(o),c=z(o);l in i||c in i||(i[o]=t[o],a&&((n.on||(n.on={}))["update:".concat(o)]=function(n){t[o]=n}))};for(var l in t)s(l)}else;return n}function re(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||ae(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function oe(n,e,t){return ae(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function ae(n,e,t){if(o(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&ie(n[r],"".concat(e,"_").concat(r),t);else ie(n,e,t)}function ie(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function se(n,e){if(e)if(u(e)){var t=n.on=n.on?_({},n.on):{};for(var r in e){var o=t[r],a=e[r];t[r]=o?[].concat(o,a):a}}else;return n}function le(n,e,t,r){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var i=n[a];o(i)?le(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function ce(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function de(n,e){return"string"==typeof n?e+n:n}function pe(n){n._o=oe,n._n=f,n._s=v,n._l=Xn,n._t=Yn,n._q=D,n._i=$,n._m=re,n._f=Qn,n._k=ee,n._b=te,n._v=gn,n._e=hn,n._u=le,n._g=se,n._d=ce,n._p=de}function ue(n,e){if(!n||!n.length)return{};for(var t={},r=0,o=n.length;r<o;r++){var a=n[r],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==e&&a.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(a);else{var s=i.slot,l=t[s]||(t[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in t)t[c].every(me)&&delete t[c];return t}function me(n){return n.isComment&&!n.asyncFactory||" "===n.text}function he(n){return n.isComment&&n.asyncFactory}function ge(n,e,t,o){var a,i=Object.keys(t).length>0,s=e?!!e.$stable:!i,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&o&&o!==r&&l===o.$key&&!i&&!o.$hasNormal)return o;for(var c in a={},e)e[c]&&"$"!==c[0]&&(a[c]=ve(n,t,c,e[c]))}else a={};for(var d in t)d in a||(a[d]=fe(t,d));return e&&Object.isExtensible(e)&&(e._normalized=a),W(a,"$stable",s),W(a,"$key",l),W(a,"$hasNormal",i),a}function ve(n,e,t,r){var a=function(){var e=pn;un(n);var t=arguments.length?r.apply(null,arguments):r({}),a=(t=t&&"object"==typeof t&&!o(t)?[t]:Gn(t))&&t[0];return un(e),t&&(!a||1===t.length&&a.isComment&&!he(a))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:a,enumerable:!0,configurable:!0}),a}function fe(n,e){return function(){return n[e]}}function be(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};W(e,"_v_attr_proxy",!0),xe(e,n.$attrs,r,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||xe(n._listenersProxy={},n.$listeners,r,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||we(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:P(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Rn(n,e,t)}))}}}function xe(n,e,t,r,o){var a=!1;for(var i in e)i in n?e[i]!==t[i]&&(a=!0):(a=!0,ye(n,i,r,o));for(var i in n)i in e||(a=!0,delete n[i]);return a}function ye(n,e,t,r){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[r][e]}})}function we(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var je=null;function ke(n,e){return(n.__esModule||dn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),d(n)?e.extend(n):n}function Ee(n){if(o(n))for(var e=0;e<n.length;e++){var t=n[e];if(i(t)&&(i(t.componentOptions)||he(t)))return t}}function Te(n,e,t,r,p,u){return(o(t)||l(t))&&(p=r,r=t,t=void 0),s(u)&&(p=2),function(n,e,t,r,l){if(i(t)&&i(t.__ob__))return hn();i(t)&&i(t.is)&&(e=t.is);if(!e)return hn();0;o(r)&&c(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===l?r=Gn(r):1===l&&(r=function(n){for(var e=0;e<n.length;e++)if(o(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var p,u;if("string"==typeof e){var m=void 0;u=n.$vnode&&n.$vnode.ns||F.getTagNamespace(e),p=F.isReservedTag(e)?new mn(F.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!i(m=St(n.$options,"components",e))?new mn(e,t,r,void 0,void 0,n):yt(m,t,n,r,e)}else p=yt(e,t,n,r);return o(p)?p:i(p)?(i(u)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(i(e.children))for(var o=0,l=e.children.length;o<l;o++){var c=e.children[o];i(c.tag)&&(a(c.ns)||s(r)&&"svg"!==c.tag)&&n(c,t,r)}}(p,u),i(t)&&function(n){d(n.style)&&Fe(n.style);d(n.class)&&Fe(n.class)}(t),p):hn()}(n,e,t,r,p)}function Ie(n,e,t){wn();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var a=0;a<o.length;a++)try{if(!1===o[a].call(r,n,e,t))return}catch(n){ze(n,r,"errorCaptured hook")}}ze(n,e,t)}finally{jn()}}function Ae(n,e,t,r,o){var a;try{(a=t?n.apply(e,t):n.call(e))&&!a._isVue&&g(a)&&!a._handled&&(a.catch((function(n){return Ie(n,r,o+" (Promise/async)")})),a._handled=!0)}catch(n){Ie(n,r,o)}return a}function ze(n,e,t){if(F.errorHandler)try{return F.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Pe(e,null,"config.errorHandler")}Pe(n,e,t)}function Pe(n,e,t){if(!V||"undefined"==typeof console)throw n;console.error(n)}var Se,_e=!1,qe=[],Ce=!1;function Be(){Ce=!1;var n=qe.slice(0);qe.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&ln(Promise)){var Oe=Promise.resolve();Se=function(){Oe.then(Be),Q&&setTimeout(C)},_e=!0}else if(K||"undefined"==typeof MutationObserver||!ln(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Se="undefined"!=typeof setImmediate&&ln(setImmediate)?function(){setImmediate(Be)}:function(){setTimeout(Be,0)};else{var De=1,$e=new MutationObserver(Be),Ue=document.createTextNode(String(De));$e.observe(Ue,{characterData:!0}),Se=function(){De=(De+1)%2,Ue.data=String(De)},_e=!0}function Le(n,e){var t;if(qe.push((function(){if(n)try{n.call(e)}catch(n){Ie(n,e,"nextTick")}else t&&t(e)})),Ce||(Ce=!0,Se()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function Re(n){return function(e,t){if(void 0===t&&(t=pn),t)return function(n,e,t){var r=n.$options;r[e]=It(r[e],t)}(t,n,e)}}Re("beforeMount"),Re("mounted"),Re("beforeUpdate"),Re("updated"),Re("beforeDestroy"),Re("destroyed"),Re("activated"),Re("deactivated"),Re("serverPrefetch"),Re("renderTracked"),Re("renderTriggered"),Re("errorCaptured");var Me=new cn;function Fe(n){return function n(e,t){var r,a,i=o(e);if(!i&&!d(e)||e.__v_skip||Object.isFrozen(e)||e instanceof mn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(i)for(r=e.length;r--;)n(e[r],t);else if(Ln(e))n(e.value,t);else for(a=Object.keys(e),r=a.length;r--;)n(e[a[r]],t)}(n,Me),Me.clear(),n}var Ne,He=0,We=function(){function n(n,e,t,r,o){var a,i;a=this,void 0===(i=Mn&&!Mn._vm?Mn:n?n._scope:void 0)&&(i=Mn),i&&i.active&&i.effects.push(a),(this.vm=n)&&o&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++He,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="",c(e)?this.getter=e:(this.getter=function(n){if(!J.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=C)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;wn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Ie(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Fe(n),jn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():ut(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||d(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Ae(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&y(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Je(n,e){Ne.$on(n,e)}function Ze(n,e){Ne.$off(n,e)}function Ve(n,e){var t=Ne;return function r(){var o=e.apply(null,arguments);null!==o&&t.$off(n,r)}}function Ge(n,e,t){Ne=n,Jn(e,t||{},Je,Ze,Ve,n),Ne=void 0}var Ke=null;function Xe(n){var e=Ke;return Ke=n,function(){Ke=e}}function Ye(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function Qe(n,e){if(e){if(n._directInactive=!1,Ye(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)Qe(n.$children[t]);nt(n,"activated")}}function nt(n,e,t,r){void 0===r&&(r=!0),wn();var o=pn;r&&un(n);var a=n.$options[e],i="".concat(e," hook");if(a)for(var s=0,l=a.length;s<l;s++)Ae(a[s],n,t||null,n,i);n._hasHookEvent&&n.$emit("hook:"+e),r&&un(o),jn()}var et=[],tt=[],rt={},ot=!1,at=!1,it=0;var st=0,lt=Date.now;if(V&&!K){var ct=window.performance;ct&&"function"==typeof ct.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ct.now()})}var dt=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function pt(){var n,e;for(st=lt(),at=!0,et.sort(dt),it=0;it<et.length;it++)(n=et[it]).before&&n.before(),e=n.id,rt[e]=null,n.run();var t=tt.slice(),r=et.slice();it=et.length=tt.length=0,rt={},ot=at=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,Qe(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&nt(r,"updated")}}(r),function(){for(var n=0;n<bn.length;n++){var e=bn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}bn.length=0}(),sn&&F.devtools&&sn.emit("flush")}function ut(n){var e=n.id;if(null==rt[e]&&(n!==xn.target||!n.noRecurse)){if(rt[e]=!0,at){for(var t=et.length-1;t>it&&et[t].id>n.id;)t--;et.splice(t+1,0,n)}else et.push(n);ot||(ot=!0,Le(pt))}}function mt(n,e){if(n){for(var t=Object.create(null),r=dn?Reflect.ownKeys(n):Object.keys(n),o=0;o<r.length;o++){var a=r[o];if("__ob__"!==a){var i=n[a].from;if(i in e._provided)t[a]=e._provided[i];else if("default"in n[a]){var s=n[a].default;t[a]=c(s)?s.call(e):s}else 0}}return t}}function ht(n,e,t,a,i){var l,c=this,d=i.options;j(a,"_uid")?(l=Object.create(a))._original=a:(l=a,a=a._original);var p=s(d._compiled),u=!p;this.data=n,this.props=e,this.children=t,this.parent=a,this.listeners=n.on||r,this.injections=mt(d.inject,a),this.slots=function(){return c.$slots||ge(a,n.scopedSlots,c.$slots=ue(t,a)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ge(a,n.scopedSlots,this.slots())}}),p&&(this.$options=d,this.$slots=this.slots(),this.$scopedSlots=ge(a,n.scopedSlots,this.$slots)),d._scopeId?this._c=function(n,e,t,r){var i=Te(l,n,e,t,r,u);return i&&!o(i)&&(i.fnScopeId=d._scopeId,i.fnContext=a),i}:this._c=function(n,e,t,r){return Te(l,n,e,t,r,u)}}function gt(n,e,t,r,o){var a=vn(n);return a.fnContext=t,a.fnOptions=r,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function vt(n,e){for(var t in e)n[T(t)]=e[t]}function ft(n){return n.name||n.__name||n._componentTag}pe(ht.prototype);var bt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;bt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;i(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ke)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,o,a){var i=o.data.scopedSlots,s=n.$scopedSlots,l=!!(i&&!i.$stable||s!==r&&!s.$stable||i&&n.$scopedSlots.$key!==i.$key||!i&&n.$scopedSlots.$key),c=!!(a||n.$options._renderChildren||l),d=n.$vnode;n.$options._parentVnode=o,n.$vnode=o,n._vnode&&(n._vnode.parent=o),n.$options._renderChildren=a;var p=o.data.attrs||r;n._attrsProxy&&xe(n._attrsProxy,p,d.data&&d.data.attrs||r,n,"$attrs")&&(c=!0),n.$attrs=p,t=t||r;var u=n.$options._parentListeners;if(n._listenersProxy&&xe(n._listenersProxy,t,u||r,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,Ge(n,t,u),e&&n.$options.props){zn(!1);for(var m=n._props,h=n.$options._propKeys||[],g=0;g<h.length;g++){var v=h[g],f=n.$options.props;m[v]=_t(v,f,e,n)}zn(!0),n.$options.propsData=e}c&&(n.$slots=ue(a,o.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,nt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,tt.push(e)):Qe(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ye(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);nt(e,"deactivated")}}(e,!0):e.$destroy())}},xt=Object.keys(bt);function yt(n,e,t,l,c){if(!a(n)){var p=t.$options._base;if(d(n)&&(n=p.extend(n)),"function"==typeof n){var u;if(a(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&i(n.errorComp))return n.errorComp;if(i(n.resolved))return n.resolved;var t=je;if(t&&i(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&i(n.loadingComp))return n.loadingComp;if(t&&!i(n.owners)){var r=n.owners=[t],o=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return y(r,t)}));var p=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},u=U((function(t){n.resolved=ke(t,e),o?r.length=0:p(!0)})),m=U((function(e){i(n.errorComp)&&(n.error=!0,p(!0))})),h=n(u,m);return d(h)&&(g(h)?a(n.resolved)&&h.then(u,m):g(h.component)&&(h.component.then(u,m),i(h.error)&&(n.errorComp=ke(h.error,e)),i(h.loading)&&(n.loadingComp=ke(h.loading,e),0===h.delay?n.loading=!0:l=setTimeout((function(){l=null,a(n.resolved)&&a(n.error)&&(n.loading=!0,p(!1))}),h.delay||200)),i(h.timeout)&&(c=setTimeout((function(){c=null,a(n.resolved)&&m(null)}),h.timeout)))),o=!1,n.loading?n.loadingComp:n.resolved}}(u=n,p)))return function(n,e,t,r,o){var a=hn();return a.asyncFactory=n,a.asyncMeta={data:e,context:t,children:r,tag:o},a}(u,e,t,l,c);e=e||{},Wt(n),i(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var a=e.on||(e.on={}),s=a[r],l=e.model.callback;i(s)?(o(s)?-1===s.indexOf(l):s!==l)&&(a[r]=[l].concat(s)):a[r]=l}(n.options,e);var m=function(n,e,t){var r=e.options.props;if(!a(r)){var o={},s=n.attrs,l=n.props;if(i(s)||i(l))for(var c in r){var d=z(c);Vn(o,l,c,d,!0)||Vn(o,s,c,d,!1)}return o}}(e,n);if(s(n.options.functional))return function(n,e,t,a,s){var l=n.options,c={},d=l.props;if(i(d))for(var p in d)c[p]=_t(p,d,e||r);else i(t.attrs)&&vt(c,t.attrs),i(t.props)&&vt(c,t.props);var u=new ht(t,c,s,a,n),m=l.render.call(null,u._c,u);if(m instanceof mn)return gt(m,t,u.parent,l,u);if(o(m)){for(var h=Gn(m)||[],g=new Array(h.length),v=0;v<h.length;v++)g[v]=gt(h[v],t,u.parent,l,u);return g}}(n,m,e,t,l);var h=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var v=e.slot;e={},v&&(e.slot=v)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<xt.length;t++){var r=xt[t],o=e[r],a=bt[r];o===a||o&&o._merged||(e[r]=o?wt(a,o):a)}}(e);var f=ft(n.options)||c;return new mn("vue-component-".concat(n.cid).concat(f?"-".concat(f):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:m,listeners:h,tag:c,children:l},u)}}}function wt(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var jt=C,kt=F.optionMergeStrategies;function Et(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var r,o,a,i=dn?Reflect.ownKeys(e):Object.keys(e),s=0;s<i.length;s++)"__ob__"!==(r=i[s])&&(o=n[r],a=e[r],t&&j(n,r)?o!==a&&u(o)&&u(a)&&Et(o,a):Cn(n,r,a));return n}function Tt(n,e,t){return t?function(){var r=c(e)?e.call(t,t):e,o=c(n)?n.call(t,t):n;return r?Et(r,o):o}:e?n?function(){return Et(c(e)?e.call(this,this):e,c(n)?n.call(this,this):n)}:e:n}function It(n,e){var t=e?n?n.concat(e):o(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function At(n,e,t,r){var o=Object.create(n||null);return e?_(o,e):o}kt.data=function(n,e,t){return t?Tt(n,e,t):e&&"function"!=typeof e?n:Tt(n,e)},M.forEach((function(n){kt[n]=It})),R.forEach((function(n){kt[n+"s"]=At})),kt.watch=function(n,e,t,r){if(n===tn&&(n=void 0),e===tn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var i in _(a,n),e){var s=a[i],l=e[i];s&&!o(s)&&(s=[s]),a[i]=s?s.concat(l):o(l)?l:[l]}return a},kt.props=kt.methods=kt.inject=kt.computed=function(n,e,t,r){if(!n)return e;var o=Object.create(null);return _(o,n),e&&_(o,e),o},kt.provide=function(n,e){return n?function(){var t=Object.create(null);return Et(t,c(n)?n.call(this):n),e&&Et(t,c(e)?e.call(this):e,!1),t}:e};var zt=function(n,e){return void 0===e?n:e};function Pt(n,e,t){if(c(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,a,i={};if(o(t))for(r=t.length;r--;)"string"==typeof(a=t[r])&&(i[T(a)]={type:null});else if(u(t))for(var s in t)a=t[s],i[T(s)]=u(a)?a:{type:a};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(o(t))for(var a=0;a<t.length;a++)r[t[a]]={from:t[a]};else if(u(t))for(var i in t){var s=t[i];r[i]=u(s)?_({from:i},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];c(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Pt(n,e.extends,t)),e.mixins))for(var r=0,a=e.mixins.length;r<a;r++)n=Pt(n,e.mixins[r],t);var i,s={};for(i in n)l(i);for(i in e)j(n,i)||l(i);function l(r){var o=kt[r]||zt;s[r]=o(n[r],e[r],t,r)}return s}function St(n,e,t,r){if("string"==typeof t){var o=n[e];if(j(o,t))return o[t];var a=T(t);if(j(o,a))return o[a];var i=I(a);return j(o,i)?o[i]:o[t]||o[a]||o[i]}}function _t(n,e,t,r){var o=e[n],a=!j(t,n),i=t[n],s=Ot(Boolean,o.type);if(s>-1)if(a&&!j(o,"default"))i=!1;else if(""===i||i===z(n)){var l=Ot(String,o.type);(l<0||s<l)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!j(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return c(r)&&"Function"!==Ct(e.type)?r.call(n):r}(r,o,n);var d=An;zn(!0),_n(i),zn(d)}return i}var qt=/^\s*function (\w+)/;function Ct(n){var e=n&&n.toString().match(qt);return e?e[1]:""}function Bt(n,e){return Ct(n)===Ct(e)}function Ot(n,e){if(!o(e))return Bt(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Bt(e[t],n))return t;return-1}var Dt={enumerable:!0,configurable:!0,get:C,set:C};function $t(n,e,t){Dt.get=function(){return this[e][t]},Dt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Dt)}function Ut(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=Dn({}),o=n.$options._propKeys=[];n.$parent&&zn(!1);var a=function(a){o.push(a);var i=_t(a,e,t,n);qn(r,a,i),a in n||$t(n,"_props",a)};for(var i in e)a(i);zn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=be(n);un(n),wn();var o=Ae(t,null,[n._props||Dn({}),r],n,"setup");if(jn(),un(),c(o))e.render=o;else if(d(o))if(n._setupState=o,o.__sfc){var a=n._setupProxy={};for(var i in o)"__sfc"!==i&&Rn(a,o,i)}else for(var i in o)H(i)||Rn(n,o,i);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?C:P(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;u(e=n._data=c(e)?function(n,e){wn();try{return n.call(e,e)}catch(n){return Ie(n,e,"data()"),{}}finally{jn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,o=(n.$options.methods,t.length);for(;o--;){var a=t[o];0,r&&j(r,a)||H(a)||$t(n,"_data",a)}var i=_n(e);i&&i.vmCount++}(n);else{var t=_n(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=an();for(var o in e){var a=e[o],i=c(a)?a:a.get;0,r||(t[o]=new We(n,i||C,C,Lt)),o in n||Rt(n,o,a)}}(n,e.computed),e.watch&&e.watch!==tn&&function(n,e){for(var t in e){var r=e[t];if(o(r))for(var a=0;a<r.length;a++)Nt(n,t,r[a]);else Nt(n,t,r)}}(n,e.watch)}var Lt={lazy:!0};function Rt(n,e,t){var r=!an();c(t)?(Dt.get=r?Mt(e):Ft(t),Dt.set=C):(Dt.get=t.get?r&&!1!==t.cache?Mt(e):Ft(t.get):C,Dt.set=t.set||C),Object.defineProperty(n,e,Dt)}function Mt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),xn.target&&e.depend(),e.value}}function Ft(n){return function(){return n.call(this,this)}}function Nt(n,e,t,r){return u(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Ht=0;function Wt(n){var e=n.options;if(n.super){var t=Wt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var o in t)t[o]!==r[o]&&(e||(e={}),e[o]=t[o]);return e}(n);r&&_(n.extendOptions,r),(e=n.options=Pt(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Jt(n){this._init(n)}function Zt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,o=n._Ctor||(n._Ctor={});if(o[r])return o[r];var a=ft(n)||ft(t.options);var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=Pt(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)$t(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)Rt(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,R.forEach((function(n){i[n]=t[n]})),a&&(i.options.components[a]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=_({},i.options),o[r]=i,i}}function Vt(n){return n&&(ft(n.Ctor.options)||n.tag)}function Gt(n,e){return o(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!m(n)&&n.test(e)}function Kt(n,e){var t=n.cache,r=n.keys,o=n._vnode;for(var a in t){var i=t[a];if(i){var s=i.name;s&&!e(s)&&Xt(t,a,r,o)}}}function Xt(n,e,t,r){var o=n[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),n[e]=null,y(t,e)}Jt.prototype._init=function(n){var e=this;e._uid=Ht++,e._isVue=!0,e.__v_skip=!0,e._scope=new Fn(!0),e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var o=r.componentOptions;t.propsData=o.propsData,t._parentListeners=o.listeners,t._renderChildren=o.children,t._componentTag=o.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Pt(Wt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Ge(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,o=t&&t.context;n.$slots=ue(e._renderChildren,o),n.$scopedSlots=t?ge(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,o){return Te(n,e,t,r,o,!1)},n.$createElement=function(e,t,r,o){return Te(n,e,t,r,o,!0)};var a=t&&t.data;qn(n,"$attrs",a&&a.attrs||r,null,!0),qn(n,"$listeners",e._parentListeners||r,null,!0)}(e),nt(e,"beforeCreate",void 0,!1),function(n){var e=mt(n.$options.inject,n);e&&(zn(!1),Object.keys(e).forEach((function(t){qn(n,t,e[t])})),zn(!0))}(e),Ut(e),function(n){var e=n.$options.provide;if(e){var t=c(e)?e.call(n):e;if(!d(t))return;for(var r=Nn(n),o=dn?Reflect.ownKeys(t):Object.keys(t),a=0;a<o.length;a++){var i=o[a];Object.defineProperty(r,i,Object.getOwnPropertyDescriptor(t,i))}}}(e),nt(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=Cn,n.prototype.$delete=Bn,n.prototype.$watch=function(n,e,t){if(u(e))return Nt(this,n,e,t);(t=t||{}).user=!0;var r=new We(this,n,e,t);if(t.immediate){var o='callback for immediate watcher "'.concat(r.expression,'"');wn(),Ae(e,this,[r.value],this,o),jn()}return function(){r.teardown()}}}(Jt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(o(n))for(var a=0,i=n.length;a<i;a++)r.$on(n[a],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(o(n)){for(var r=0,a=n.length;r<a;r++)t.$off(n[r],e);return t}var i,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var l=s.length;l--;)if((i=s[l])===e||i.fn===e){s.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?S(t):t;for(var r=S(arguments,1),o='event handler for "'.concat(n,'"'),a=0,i=t.length;a<i;a++)Ae(t[a],e,r,e,o)}return e}}(Jt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,o=t._vnode,a=Xe(t);t._vnode=n,t.$el=o?t.__patch__(o,n):t.__patch__(t.$el,n,e,!1),a(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var i=t;i&&i.$vnode&&i.$parent&&i.$vnode===i.$parent._vnode;)i.$parent.$el=i.$el,i=i.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){nt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||y(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),nt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Jt),function(n){pe(n.prototype),n.prototype.$nextTick=function(n){return Le(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,a=t._parentVnode;a&&e._isMounted&&(e.$scopedSlots=ge(e.$parent,a.data.scopedSlots,e.$slots,e.$scopedSlots),e._slotsProxy&&we(e._slotsProxy,e.$scopedSlots)),e.$vnode=a;try{un(e),je=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Ie(t,e,"render"),n=e._vnode}finally{je=null,un()}return o(n)&&1===n.length&&(n=n[0]),n instanceof mn||(n=hn()),n.parent=a,n}}(Jt);var Yt=[String,RegExp,Array],Qt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Yt,exclude:Yt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var o=t.tag,a=t.componentInstance,i=t.componentOptions;n[r]={name:Vt(i),tag:o,componentInstance:a},e.push(r),this.max&&e.length>parseInt(this.max)&&Xt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Xt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Kt(n,(function(n){return Gt(e,n)}))})),this.$watch("exclude",(function(e){Kt(n,(function(n){return!Gt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Ee(n),t=e&&e.componentOptions;if(t){var r=Vt(t),o=this.include,a=this.exclude;if(o&&(!r||!Gt(o,r))||a&&r&&Gt(a,r))return e;var i=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;i[l]?(e.componentInstance=i[l].componentInstance,y(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return F}};Object.defineProperty(n,"config",e),n.util={warn:jt,extend:_,mergeOptions:Pt,defineReactive:qn},n.set=Cn,n.delete=Bn,n.nextTick=Le,n.observable=function(n){return _n(n),n},n.options=Object.create(null),R.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,_(n.options.components,Qt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=S(arguments,1);return t.unshift(this),c(n.install)?n.install.apply(n,t):c(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Pt(this.options,n),this}}(n),Zt(n),function(n){R.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&u(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&c(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Jt),Object.defineProperty(Jt.prototype,"$isServer",{get:an}),Object.defineProperty(Jt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Jt,"FunctionalRenderContext",{value:ht}),Jt.version="2.7.14";var nr=b("style,class"),er=b("input,textarea,option,select,progress"),tr=b("contenteditable,draggable,spellcheck"),rr=b("events,caret,typing,plaintext-only"),or=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ar="http://www.w3.org/1999/xlink",ir=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},sr=function(n){return ir(n)?n.slice(6,n.length):""},lr=function(n){return null==n||!1===n};function cr(n){for(var e=n.data,t=n,r=n;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=dr(r.data,e));for(;i(t=t.parent);)t&&t.data&&(e=dr(e,t.data));return function(n,e){if(i(n)||i(e))return pr(n,ur(e));return""}(e.staticClass,e.class)}function dr(n,e){return{staticClass:pr(n.staticClass,e.staticClass),class:i(n.class)?[n.class,e.class]:e.class}}function pr(n,e){return n?e?n+" "+e:n:e||""}function ur(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,o=n.length;r<o;r++)i(e=ur(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):d(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var mr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},hr=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),gr=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),vr=function(n){return hr(n)||gr(n)};var fr=Object.create(null);var br=b("text,number,password,search,email,tel,url");var xr=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(mr[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),yr={create:function(n,e){wr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(wr(n,!0),wr(e))},destroy:function(n){wr(n,!0)}};function wr(n,e){var t=n.data.ref;if(i(t)){var r=n.context,a=n.componentInstance||n.elm,s=e?null:a,l=e?void 0:a;if(c(t))Ae(t,r,[s],r,"template ref function");else{var d=n.data.refInFor,p="string"==typeof t||"number"==typeof t,u=Ln(t),m=r.$refs;if(p||u)if(d){var h=p?m[t]:t.value;e?o(h)&&y(h,a):o(h)?h.includes(a)||h.push(a):p?(m[t]=[a],jr(r,t,m[t])):t.value=[a]}else if(p){if(e&&m[t]!==a)return;m[t]=l,jr(r,t,s)}else if(u){if(e&&t.value!==a)return;t.value=s}else 0}}}function jr(n,e,t){var r=n._setupState;r&&j(r,e)&&(Ln(r[e])?r[e].value=t:r[e]=t)}var kr=new mn("",{},[]),Er=["create","activate","update","remove","destroy"];function Tr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&i(n.data)===i(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=i(t=n.data)&&i(t=t.attrs)&&t.type,o=i(t=e.data)&&i(t=t.attrs)&&t.type;return r===o||br(r)&&br(o)}(n,e)||s(n.isAsyncPlaceholder)&&a(e.asyncFactory.error))}function Ir(n,e,t){var r,o,a={};for(r=e;r<=t;++r)i(o=n[r].key)&&(a[o]=r);return a}var Ar={create:zr,update:zr,destroy:function(n){zr(n,kr)}};function zr(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,o,a=n===kr,i=e===kr,s=Sr(n.data.directives,n.context),l=Sr(e.data.directives,e.context),c=[],d=[];for(t in l)r=s[t],o=l[t],r?(o.oldValue=r.value,o.oldArg=r.arg,qr(o,"update",e,n),o.def&&o.def.componentUpdated&&d.push(o)):(qr(o,"bind",e,n),o.def&&o.def.inserted&&c.push(o));if(c.length){var p=function(){for(var t=0;t<c.length;t++)qr(c[t],"inserted",e,n)};a?Zn(e,"insert",p):p()}d.length&&Zn(e,"postpatch",(function(){for(var t=0;t<d.length;t++)qr(d[t],"componentUpdated",e,n)}));if(!a)for(t in s)l[t]||qr(s[t],"unbind",n,n,i)}(n,e)}var Pr=Object.create(null);function Sr(n,e){var t,r,o=Object.create(null);if(!n)return o;for(t=0;t<n.length;t++){if((r=n[t]).modifiers||(r.modifiers=Pr),o[_r(r)]=r,e._setupState&&e._setupState.__sfc){var a=r.def||St(e,"_setupState","v-"+r.name);r.def="function"==typeof a?{bind:a,update:a}:a}r.def=r.def||St(e.$options,"directives",r.name)}return o}function _r(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function qr(n,e,t,r,o){var a=n.def&&n.def[e];if(a)try{a(t.elm,n,t,r,o)}catch(r){Ie(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Cr=[yr,Ar];function Br(n,e){var t=e.componentOptions;if(!(i(t)&&!1===t.Ctor.options.inheritAttrs||a(n.data.attrs)&&a(e.data.attrs))){var r,o,l=e.elm,c=n.data.attrs||{},d=e.data.attrs||{};for(r in(i(d.__ob__)||s(d._v_attr_proxy))&&(d=e.data.attrs=_({},d)),d)o=d[r],c[r]!==o&&Or(l,r,o,e.data.pre);for(r in(K||Y)&&d.value!==c.value&&Or(l,"value",d.value),c)a(d[r])&&(ir(r)?l.removeAttributeNS(ar,sr(r)):tr(r)||l.removeAttribute(r))}}function Or(n,e,t,r){r||n.tagName.indexOf("-")>-1?Dr(n,e,t):or(e)?lr(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):tr(e)?n.setAttribute(e,function(n,e){return lr(e)||"false"===e?"false":"contenteditable"===n&&rr(e)?e:"true"}(e,t)):ir(e)?lr(t)?n.removeAttributeNS(ar,sr(e)):n.setAttributeNS(ar,e,t):Dr(n,e,t)}function Dr(n,e,t){if(lr(t))n.removeAttribute(e);else{if(K&&!X&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var $r={create:Br,update:Br};function Ur(n,e){var t=e.elm,r=e.data,o=n.data;if(!(a(r.staticClass)&&a(r.class)&&(a(o)||a(o.staticClass)&&a(o.class)))){var s=cr(e),l=t._transitionClasses;i(l)&&(s=pr(s,ur(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var Lr,Rr={create:Ur,update:Ur};function Mr(n,e,t){var r=Lr;return function o(){var a=e.apply(null,arguments);null!==a&&Hr(n,o,t,r)}}var Fr=_e&&!(en&&Number(en[1])<=53);function Nr(n,e,t,r){if(Fr){var o=st,a=e;e=a._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=o||n.timeStamp<=0||n.target.ownerDocument!==document)return a.apply(this,arguments)}}Lr.addEventListener(n,e,rn?{capture:t,passive:r}:t)}function Hr(n,e,t,r){(r||Lr).removeEventListener(n,e._wrapper||e,t)}function Wr(n,e){if(!a(n.data.on)||!a(e.data.on)){var t=e.data.on||{},r=n.data.on||{};Lr=e.elm||n.elm,function(n){if(i(n.__r)){var e=K?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}i(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Jn(t,r,Nr,Hr,Mr,e.context),Lr=void 0}}var Jr,Zr={create:Wr,update:Wr,destroy:function(n){return Wr(n,kr)}};function Vr(n,e){if(!a(n.data.domProps)||!a(e.data.domProps)){var t,r,o=e.elm,l=n.data.domProps||{},c=e.data.domProps||{};for(t in(i(c.__ob__)||s(c._v_attr_proxy))&&(c=e.data.domProps=_({},c)),l)t in c||(o[t]="");for(t in c){if(r=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===l[t])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===t&&"PROGRESS"!==o.tagName){o._value=r;var d=a(r)?"":String(r);Gr(o,d)&&(o.value=d)}else if("innerHTML"===t&&gr(o.tagName)&&a(o.innerHTML)){(Jr=Jr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var p=Jr.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;p.firstChild;)o.appendChild(p.firstChild)}else if(r!==l[t])try{o[t]=r}catch(n){}}}}function Gr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(i(r)){if(r.number)return f(t)!==f(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Kr={create:Vr,update:Vr},Xr=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Yr(n){var e=Qr(n.style);return n.staticStyle?_(n.staticStyle,e):e}function Qr(n){return Array.isArray(n)?q(n):"string"==typeof n?Xr(n):n}var no,eo=/^--/,to=/\s*!important$/,ro=function(n,e,t){if(eo.test(e))n.style.setProperty(e,t);else if(to.test(t))n.style.setProperty(z(e),t.replace(to,""),"important");else{var r=ao(e);if(Array.isArray(t))for(var o=0,a=t.length;o<a;o++)n.style[r]=t[o];else n.style[r]=t}},oo=["Webkit","Moz","ms"],ao=k((function(n){if(no=no||document.createElement("div").style,"filter"!==(n=T(n))&&n in no)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<oo.length;t++){var r=oo[t]+e;if(r in no)return r}}));function io(n,e){var t=e.data,r=n.data;if(!(a(t.staticStyle)&&a(t.style)&&a(r.staticStyle)&&a(r.style))){var o,s,l=e.elm,c=r.staticStyle,d=r.normalizedStyle||r.style||{},p=c||d,u=Qr(e.data.style)||{};e.data.normalizedStyle=i(u.__ob__)?_({},u):u;var m=function(n,e){var t,r={};if(e)for(var o=n;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(t=Yr(o.data))&&_(r,t);(t=Yr(n.data))&&_(r,t);for(var a=n;a=a.parent;)a.data&&(t=Yr(a.data))&&_(r,t);return r}(e,!0);for(s in p)a(m[s])&&ro(l,s,"");for(s in m)(o=m[s])!==p[s]&&ro(l,s,null==o?"":o)}}var so={create:io,update:io},lo=/\s+/;function co(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(lo).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function po(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(lo).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function uo(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&_(e,mo(n.name||"v")),_(e,n),e}return"string"==typeof n?mo(n):void 0}}var mo=k((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),ho=V&&!X,go="transition",vo="transitionend",fo="animation",bo="animationend";ho&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(go="WebkitTransition",vo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(fo="WebkitAnimation",bo="webkitAnimationEnd"));var xo=V?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function yo(n){xo((function(){xo(n)}))}function wo(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),co(n,e))}function jo(n,e){n._transitionClasses&&y(n._transitionClasses,e),po(n,e)}function ko(n,e,t){var r=To(n,e),o=r.type,a=r.timeout,i=r.propCount;if(!o)return t();var s="transition"===o?vo:bo,l=0,c=function(){n.removeEventListener(s,d),t()},d=function(e){e.target===n&&++l>=i&&c()};setTimeout((function(){l<i&&c()}),a+1),n.addEventListener(s,d)}var Eo=/\b(transform|all)(,|$)/;function To(n,e){var t,r=window.getComputedStyle(n),o=(r[go+"Delay"]||"").split(", "),a=(r[go+"Duration"]||"").split(", "),i=Io(o,a),s=(r[fo+"Delay"]||"").split(", "),l=(r[fo+"Duration"]||"").split(", "),c=Io(s,l),d=0,p=0;return"transition"===e?i>0&&(t="transition",d=i,p=a.length):"animation"===e?c>0&&(t="animation",d=c,p=l.length):p=(t=(d=Math.max(i,c))>0?i>c?"transition":"animation":null)?"transition"===t?a.length:l.length:0,{type:t,timeout:d,propCount:p,hasTransform:"transition"===t&&Eo.test(r[go+"Property"])}}function Io(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Ao(e)+Ao(n[t])})))}function Ao(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function zo(n,e){var t=n.elm;i(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=uo(n.data.transition);if(!a(r)&&!i(t._enterCb)&&1===t.nodeType){for(var o=r.css,s=r.type,l=r.enterClass,p=r.enterToClass,u=r.enterActiveClass,m=r.appearClass,h=r.appearToClass,g=r.appearActiveClass,v=r.beforeEnter,b=r.enter,x=r.afterEnter,y=r.enterCancelled,w=r.beforeAppear,j=r.appear,k=r.afterAppear,E=r.appearCancelled,T=r.duration,I=Ke,A=Ke.$vnode;A&&A.parent;)I=A.context,A=A.parent;var z=!I._isMounted||!n.isRootInsert;if(!z||j||""===j){var P=z&&m?m:l,S=z&&g?g:u,_=z&&h?h:p,q=z&&w||v,C=z&&c(j)?j:b,B=z&&k||x,O=z&&E||y,D=f(d(T)?T.enter:T);0;var $=!1!==o&&!X,L=_o(C),R=t._enterCb=U((function(){$&&(jo(t,_),jo(t,S)),R.cancelled?($&&jo(t,P),O&&O(t)):B&&B(t),t._enterCb=null}));n.data.show||Zn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),C&&C(t,R)})),q&&q(t),$&&(wo(t,P),wo(t,S),yo((function(){jo(t,P),R.cancelled||(wo(t,_),L||(So(D)?setTimeout(R,D):ko(t,s,R)))}))),n.data.show&&(e&&e(),C&&C(t,R)),$||L||R()}}}function Po(n,e){var t=n.elm;i(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=uo(n.data.transition);if(a(r)||1!==t.nodeType)return e();if(!i(t._leaveCb)){var o=r.css,s=r.type,l=r.leaveClass,c=r.leaveToClass,p=r.leaveActiveClass,u=r.beforeLeave,m=r.leave,h=r.afterLeave,g=r.leaveCancelled,v=r.delayLeave,b=r.duration,x=!1!==o&&!X,y=_o(m),w=f(d(b)?b.leave:b);0;var j=t._leaveCb=U((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),x&&(jo(t,c),jo(t,p)),j.cancelled?(x&&jo(t,l),g&&g(t)):(e(),h&&h(t)),t._leaveCb=null}));v?v(k):k()}function k(){j.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),u&&u(t),x&&(wo(t,l),wo(t,p),yo((function(){jo(t,l),j.cancelled||(wo(t,c),y||(So(w)?setTimeout(j,w):ko(t,s,j)))}))),m&&m(t,j),x||y||j())}}function So(n){return"number"==typeof n&&!isNaN(n)}function _o(n){if(a(n))return!1;var e=n.fns;return i(e)?_o(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function qo(n,e){!0!==e.data.show&&zo(e)}var Co=function(n){var e,t,r={},c=n.modules,d=n.nodeOps;for(e=0;e<Er.length;++e)for(r[Er[e]]=[],t=0;t<c.length;++t)i(c[t][Er[e]])&&r[Er[e]].push(c[t][Er[e]]);function p(n){var e=d.parentNode(n);i(e)&&d.removeChild(e,n)}function u(n,e,t,o,a,l,c){if(i(n.elm)&&i(l)&&(n=l[c]=vn(n)),n.isRootInsert=!a,!function(n,e,t,o){var a=n.data;if(i(a)){var l=i(n.componentInstance)&&a.keepAlive;if(i(a=a.hook)&&i(a=a.init)&&a(n,!1),i(n.componentInstance))return m(n,e),h(t,n.elm,o),s(l)&&function(n,e,t,o){var a,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(a=s.data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](kr,s);e.push(s);break}h(t,n.elm,o)}(n,e,t,o),!0}}(n,e,t,o)){var p=n.data,u=n.children,v=n.tag;i(v)?(n.elm=n.ns?d.createElementNS(n.ns,v):d.createElement(v,n),x(n),g(n,u,e),i(p)&&f(n,e),h(t,n.elm,o)):s(n.isComment)?(n.elm=d.createComment(n.text),h(t,n.elm,o)):(n.elm=d.createTextNode(n.text),h(t,n.elm,o))}}function m(n,e){i(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,v(n)?(f(n,e),x(n)):(wr(n),e.push(n))}function h(n,e,t){i(n)&&(i(t)?d.parentNode(t)===n&&d.insertBefore(n,e,t):d.appendChild(n,e))}function g(n,e,t){if(o(e)){0;for(var r=0;r<e.length;++r)u(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&d.appendChild(n.elm,d.createTextNode(String(n.text)))}function v(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return i(n.tag)}function f(n,t){for(var o=0;o<r.create.length;++o)r.create[o](kr,n);i(e=n.data.hook)&&(i(e.create)&&e.create(kr,n),i(e.insert)&&t.push(n))}function x(n){var e;if(i(e=n.fnScopeId))d.setStyleScope(n.elm,e);else for(var t=n;t;)i(e=t.context)&&i(e=e.$options._scopeId)&&d.setStyleScope(n.elm,e),t=t.parent;i(e=Ke)&&e!==n.context&&e!==n.fnContext&&i(e=e.$options._scopeId)&&d.setStyleScope(n.elm,e)}function y(n,e,t,r,o,a){for(;r<=o;++r)u(t[r],a,n,e,!1,t,r)}function w(n){var e,t,o=n.data;if(i(o))for(i(e=o.hook)&&i(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(i(e=n.children))for(t=0;t<n.children.length;++t)w(n.children[t])}function j(n,e,t){for(;e<=t;++e){var r=n[e];i(r)&&(i(r.tag)?(k(r),w(r)):p(r.elm))}}function k(n,e){if(i(e)||i(n.data)){var t,o=r.remove.length+1;for(i(e)?e.listeners+=o:e=function(n,e){function t(){0==--t.listeners&&p(n)}return t.listeners=e,t}(n.elm,o),i(t=n.componentInstance)&&i(t=t._vnode)&&i(t.data)&&k(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);i(t=n.data.hook)&&i(t=t.remove)?t(n,e):e()}else p(n.elm)}function E(n,e,t,r){for(var o=t;o<r;o++){var a=e[o];if(i(a)&&Tr(n,a))return o}}function T(n,e,t,o,l,c){if(n!==e){i(e.elm)&&i(o)&&(e=o[l]=vn(e));var p=e.elm=n.elm;if(s(n.isAsyncPlaceholder))i(e.asyncFactory.resolved)?z(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var m,h=e.data;i(h)&&i(m=h.hook)&&i(m=m.prepatch)&&m(n,e);var g=n.children,f=e.children;if(i(h)&&v(e)){for(m=0;m<r.update.length;++m)r.update[m](n,e);i(m=h.hook)&&i(m=m.update)&&m(n,e)}a(e.text)?i(g)&&i(f)?g!==f&&function(n,e,t,r,o){var s,l,c,p=0,m=0,h=e.length-1,g=e[0],v=e[h],f=t.length-1,b=t[0],x=t[f],w=!o;for(0;p<=h&&m<=f;)a(g)?g=e[++p]:a(v)?v=e[--h]:Tr(g,b)?(T(g,b,r,t,m),g=e[++p],b=t[++m]):Tr(v,x)?(T(v,x,r,t,f),v=e[--h],x=t[--f]):Tr(g,x)?(T(g,x,r,t,f),w&&d.insertBefore(n,g.elm,d.nextSibling(v.elm)),g=e[++p],x=t[--f]):Tr(v,b)?(T(v,b,r,t,m),w&&d.insertBefore(n,v.elm,g.elm),v=e[--h],b=t[++m]):(a(s)&&(s=Ir(e,p,h)),a(l=i(b.key)?s[b.key]:E(b,e,p,h))?u(b,r,n,g.elm,!1,t,m):Tr(c=e[l],b)?(T(c,b,r,t,m),e[l]=void 0,w&&d.insertBefore(n,c.elm,g.elm)):u(b,r,n,g.elm,!1,t,m),b=t[++m]);p>h?y(n,a(t[f+1])?null:t[f+1].elm,t,m,f,r):m>f&&j(e,p,h)}(p,g,f,t,c):i(f)?(i(n.text)&&d.setTextContent(p,""),y(p,null,f,0,f.length-1,t)):i(g)?j(g,0,g.length-1):i(n.text)&&d.setTextContent(p,""):n.text!==e.text&&d.setTextContent(p,e.text),i(h)&&i(m=h.hook)&&i(m=m.postpatch)&&m(n,e)}}}function I(n,e,t){if(s(t)&&i(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var A=b("attrs,class,staticClass,staticStyle,key");function z(n,e,t,r){var o,a=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,s(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(l)&&(i(o=l.hook)&&i(o=o.init)&&o(e,!0),i(o=e.componentInstance)))return m(e,t),!0;if(i(a)){if(i(c))if(n.hasChildNodes())if(i(o=l)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==n.innerHTML)return!1}else{for(var d=!0,p=n.firstChild,u=0;u<c.length;u++){if(!p||!z(p,c[u],t,r)){d=!1;break}p=p.nextSibling}if(!d||p)return!1}else g(e,c,t);if(i(l)){var h=!1;for(var v in l)if(!A(v)){h=!0,f(e,t);break}!h&&l.class&&Fe(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,o){if(!a(e)){var l,c=!1,p=[];if(a(n))c=!0,u(e,p);else{var m=i(n.nodeType);if(!m&&Tr(n,e))T(n,e,p,null,null,o);else{if(m){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&z(n,e,p))return I(e,p,!0),n;l=n,n=new mn(d.tagName(l).toLowerCase(),{},[],void 0,l)}var h=n.elm,g=d.parentNode(h);if(u(e,p,h._leaveCb?null:g,d.nextSibling(h)),i(e.parent))for(var f=e.parent,b=v(e);f;){for(var x=0;x<r.destroy.length;++x)r.destroy[x](f);if(f.elm=e.elm,b){for(var y=0;y<r.create.length;++y)r.create[y](kr,f);var k=f.data.hook.insert;if(k.merged)for(var E=1;E<k.fns.length;E++)k.fns[E]()}else wr(f);f=f.parent}i(g)?j([n],0,0):i(n.tag)&&w(n)}}return I(e,p,c),e.elm}i(n)&&w(n)}}({nodeOps:xr,modules:[$r,Rr,Zr,Kr,so,V?{create:qo,activate:qo,remove:function(n,e){!0!==n.data.show?Po(n,e):e()}}:{}].concat(Cr)});X&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Mo(n,"input")}));var Bo={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Zn(t,"postpatch",(function(){Bo.componentUpdated(n,e,t)})):Oo(n,e,t.context),n._vOptions=[].map.call(n.options,Uo)):("textarea"===t.tag||br(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",Lo),n.addEventListener("compositionend",Ro),n.addEventListener("change",Ro),X&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Oo(n,e,t.context);var r=n._vOptions,o=n._vOptions=[].map.call(n.options,Uo);if(o.some((function(n,e){return!D(n,r[e])})))(n.multiple?e.value.some((function(n){return $o(n,o)})):e.value!==e.oldValue&&$o(e.value,o))&&Mo(n,"change")}}};function Oo(n,e,t){Do(n,e,t),(K||Y)&&setTimeout((function(){Do(n,e,t)}),0)}function Do(n,e,t){var r=e.value,o=n.multiple;if(!o||Array.isArray(r)){for(var a,i,s=0,l=n.options.length;s<l;s++)if(i=n.options[s],o)a=$(r,Uo(i))>-1,i.selected!==a&&(i.selected=a);else if(D(Uo(i),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));o||(n.selectedIndex=-1)}}function $o(n,e){return e.every((function(e){return!D(e,n)}))}function Uo(n){return"_value"in n?n._value:n.value}function Lo(n){n.target.composing=!0}function Ro(n){n.target.composing&&(n.target.composing=!1,Mo(n.target,"input"))}function Mo(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Fo(n){return!n.componentInstance||n.data&&n.data.transition?n:Fo(n.componentInstance._vnode)}var No={model:Bo,show:{bind:function(n,e,t){var r=e.value,o=(t=Fo(t)).data&&t.data.transition,a=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&o?(t.data.show=!0,zo(t,(function(){n.style.display=a}))):n.style.display=r?a:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=Fo(t)).data&&t.data.transition?(t.data.show=!0,r?zo(t,(function(){n.style.display=n.__vOriginalDisplay})):Po(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,o){o||(n.style.display=n.__vOriginalDisplay)}}},Ho={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Wo(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Wo(Ee(e.children)):n}function Jo(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var o=t._parentListeners;for(var r in o)e[T(r)]=o[r];return e}function Zo(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Vo=function(n){return n.tag||he(n)},Go=function(n){return"show"===n.name},Ko={name:"transition",props:Ho,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Vo)).length){0;var r=this.mode;0;var o=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return o;var a=Wo(o);if(!a)return o;if(this._leaving)return Zo(n,o);var i="__transition-".concat(this._uid,"-");a.key=null==a.key?a.isComment?i+"comment":i+a.tag:l(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var s=(a.data||(a.data={})).transition=Jo(this),c=this._vnode,d=Wo(c);if(a.data.directives&&a.data.directives.some(Go)&&(a.data.show=!0),d&&d.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(a,d)&&!he(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var p=d.data.transition=_({},s);if("out-in"===r)return this._leaving=!0,Zn(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Zo(n,o);if("in-out"===r){if(he(a))return c;var u,m=function(){u()};Zn(s,"afterEnter",m),Zn(s,"enterCancelled",m),Zn(p,"delayLeave",(function(n){u=n}))}}return o}}},Xo=_({tag:String,moveClass:String},Ho);function Yo(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Qo(n){n.data.newPos=n.elm.getBoundingClientRect()}function na(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,o=e.top-t.top;if(r||o){n.data.moved=!0;var a=n.elm.style;a.transform=a.WebkitTransform="translate(".concat(r,"px,").concat(o,"px)"),a.transitionDuration="0s"}}delete Xo.mode;var ea={Transition:Ko,TransitionGroup:{props:Xo,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var o=Xe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,o(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],i=Jo(this),s=0;s<o.length;s++){if((d=o[s]).tag)if(null!=d.key&&0!==String(d.key).indexOf("__vlist"))a.push(d),t[d.key]=d,(d.data||(d.data={})).transition=i;else;}if(r){var l=[],c=[];for(s=0;s<r.length;s++){var d;(d=r[s]).data.transition=i,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?l.push(d):c.push(d)}this.kept=n(e,null,l),this.removed=c}return n(e,null,a)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Yo),n.forEach(Qo),n.forEach(na),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;wo(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(vo,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(vo,n),t._moveCb=null,jo(t,e))})}})))},methods:{hasMove:function(n,e){if(!ho)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){po(t,n)})),co(t,e),t.style.display="none",this.$el.appendChild(t);var r=To(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};function ta(n,e){for(var t in e)n[t]=e[t];return n}Jt.config.mustUseProp=function(n,e,t){return"value"===t&&er(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Jt.config.isReservedTag=vr,Jt.config.isReservedAttr=nr,Jt.config.getTagNamespace=function(n){return gr(n)?"svg":"math"===n?"math":void 0},Jt.config.isUnknownElement=function(n){if(!V)return!0;if(vr(n))return!1;if(n=n.toLowerCase(),null!=fr[n])return fr[n];var e=document.createElement(n);return n.indexOf("-")>-1?fr[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:fr[n]=/HTMLUnknownElement/.test(e.toString())},_(Jt.options.directives,No),_(Jt.options.components,ea),Jt.prototype.__patch__=V?Co:C,Jt.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=hn),nt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new We(n,r,C,{before:function(){n._isMounted&&!n._isDestroyed&&nt(n,"beforeUpdate")}},!0),t=!1;var o=n._preWatchers;if(o)for(var a=0;a<o.length;a++)o[a].run();return null==n.$vnode&&(n._isMounted=!0,nt(n,"mounted")),n}(this,n=n&&V?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},V&&setTimeout((function(){F.devtools&&sn&&sn.emit("init",Jt)}),0);var ra=/[!'()*]/g,oa=function(n){return"%"+n.charCodeAt(0).toString(16)},aa=/%2C/g,ia=function(n){return encodeURIComponent(n).replace(ra,oa).replace(aa,",")};function sa(n){try{return decodeURIComponent(n)}catch(n){0}return n}var la=function(n){return null==n||"object"==typeof n?n:String(n)};function ca(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=sa(t.shift()),o=t.length>0?sa(t.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function da(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return ia(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(ia(e)):r.push(ia(e)+"="+ia(n)))})),r.join("&")}return ia(e)+"="+ia(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var pa=/\/?$/;function ua(n,e,t,r){var o=r&&r.options.stringifyQuery,a=e.query||{};try{a=ma(a)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:a,params:e.params||{},fullPath:va(e,o),matched:n?ga(n):[]};return t&&(i.redirectedFrom=va(t,o)),Object.freeze(i)}function ma(n){if(Array.isArray(n))return n.map(ma);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=ma(n[t]);return e}return n}var ha=ua(null,{path:"/"});function ga(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function va(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var o=n.hash;return void 0===o&&(o=""),(t||"/")+(e||da)(r)+o}function fa(n,e,t){return e===ha?n===e:!!e&&(n.path&&e.path?n.path.replace(pa,"")===e.path.replace(pa,"")&&(t||n.hash===e.hash&&ba(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&ba(n.query,e.query)&&ba(n.params,e.params))))}function ba(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,o){var a=n[t];if(r[o]!==t)return!1;var i=e[t];return null==a||null==i?a===i:"object"==typeof a&&"object"==typeof i?ba(a,i):String(a)===String(i)}))}function xa(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var o=t.instances[r],a=t.enteredCbs[r];if(o&&a){delete t.enteredCbs[r];for(var i=0;i<a.length;i++)o._isBeingDestroyed||a[i](o)}}}}var ya={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,o=e.parent,a=e.data;a.routerView=!0;for(var i=o.$createElement,s=t.name,l=o.$route,c=o._routerViewCache||(o._routerViewCache={}),d=0,p=!1;o&&o._routerRoot!==o;){var u=o.$vnode?o.$vnode.data:{};u.routerView&&d++,u.keepAlive&&o._directInactive&&o._inactive&&(p=!0),o=o.$parent}if(a.routerViewDepth=d,p){var m=c[s],h=m&&m.component;return h?(m.configProps&&wa(h,a,m.route,m.configProps),i(h,a,r)):i()}var g=l.matched[d],v=g&&g.components[s];if(!g||!v)return c[s]=null,i();c[s]={component:v},a.registerRouteInstance=function(n,e){var t=g.instances[s];(e&&t!==n||!e&&t===n)&&(g.instances[s]=e)},(a.hook||(a.hook={})).prepatch=function(n,e){g.instances[s]=e.componentInstance},a.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==g.instances[s]&&(g.instances[s]=n.componentInstance),xa(l)};var f=g.props&&g.props[s];return f&&(ta(c[s],{route:l,configProps:f}),wa(v,a,l,f)),i(v,a,r)}};function wa(n,e,t,r){var o=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(o){o=e.props=ta({},o);var a=e.attrs=e.attrs||{};for(var i in o)n.props&&i in n.props||(a[i]=o[i],delete o[i])}}function ja(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var a=n.replace(/^\//,"").split("/"),i=0;i<a.length;i++){var s=a[i];".."===s?o.pop():"."!==s&&o.push(s)}return""!==o[0]&&o.unshift(""),o.join("/")}function ka(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var Ea=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},Ta=La,Ia=_a,Aa=function(n,e){return Ca(_a(n,e),e)},za=Ca,Pa=Ua,Sa=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function _a(n,e){for(var t,r=[],o=0,a=0,i="",s=e&&e.delimiter||"/";null!=(t=Sa.exec(n));){var l=t[0],c=t[1],d=t.index;if(i+=n.slice(a,d),a=d+l.length,c)i+=c[1];else{var p=n[a],u=t[2],m=t[3],h=t[4],g=t[5],v=t[6],f=t[7];i&&(r.push(i),i="");var b=null!=u&&null!=p&&p!==u,x="+"===v||"*"===v,y="?"===v||"*"===v,w=t[2]||s,j=h||g;r.push({name:m||o++,prefix:u||"",delimiter:w,optional:y,repeat:x,partial:b,asterisk:!!f,pattern:j?Oa(j):f?".*":"[^"+Ba(w)+"]+?"})}}return a<n.length&&(i+=n.substr(a)),i&&r.push(i),r}function qa(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Ca(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",$a(e)));return function(e,r){for(var o="",a=e||{},i=(r||{}).pretty?qa:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var c,d=a[l.name];if(null==d){if(l.optional){l.partial&&(o+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(Ea(d)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(c=i(d[p]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");o+=(0===p?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(d).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):i(d),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');o+=l.prefix+c}}else o+=l}return o}}function Ba(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Oa(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Da(n,e){return n.keys=e,n}function $a(n){return n&&n.sensitive?"":"i"}function Ua(n,e,t){Ea(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,o=!1!==t.end,a="",i=0;i<n.length;i++){var s=n[i];if("string"==typeof s)a+=Ba(s);else{var l=Ba(s.prefix),c="(?:"+s.pattern+")";e.push(s),s.repeat&&(c+="(?:"+l+c+")*"),a+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var d=Ba(t.delimiter||"/"),p=a.slice(-d.length)===d;return r||(a=(p?a.slice(0,-d.length):a)+"(?:"+d+"(?=$))?"),a+=o?"$":r&&p?"":"(?="+d+"|$)",Da(new RegExp("^"+a,$a(t)),e)}function La(n,e,t){return Ea(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Da(n,e)}(n,e):Ea(n)?function(n,e,t){for(var r=[],o=0;o<n.length;o++)r.push(La(n[o],e,t).source);return Da(new RegExp("(?:"+r.join("|")+")",$a(t)),e)}(n,e,t):function(n,e,t){return Ua(_a(n,t),e,t)}(n,e,t)}Ta.parse=Ia,Ta.compile=Aa,Ta.tokensToFunction=za,Ta.tokensToRegExp=Pa;var Ra=Object.create(null);function Ma(n,e,t){e=e||{};try{var r=Ra[n]||(Ra[n]=Ta.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Fa(n,e,t,r){var o="string"==typeof n?{path:n}:n;if(o._normalized)return o;if(o.name){var a=(o=ta({},n)).params;return a&&"object"==typeof a&&(o.params=ta({},a)),o}if(!o.path&&o.params&&e){(o=ta({},o))._normalized=!0;var i=ta(ta({},e.params),o.params);if(e.name)o.name=e.name,o.params=i;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;o.path=Ma(s,i,e.path)}else 0;return o}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var o=n.indexOf("?");return o>=0&&(t=n.slice(o+1),n=n.slice(0,o)),{path:n,query:t,hash:e}}(o.path||""),c=e&&e.path||"/",d=l.path?ja(l.path,c,t||o.append):c,p=function(n,e,t){void 0===e&&(e={});var r,o=t||ca;try{r=o(n||"")}catch(n){r={}}for(var a in e){var i=e[a];r[a]=Array.isArray(i)?i.map(la):la(i)}return r}(l.query,o.query,r&&r.options.parseQuery),u=o.hash||l.hash;return u&&"#"!==u.charAt(0)&&(u="#"+u),{_normalized:!0,path:d,query:p,hash:u}}var Na,Ha=function(){},Wa={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,o=t.resolve(this.to,r,this.append),a=o.location,i=o.route,s=o.href,l={},c=t.options.linkActiveClass,d=t.options.linkExactActiveClass,p=null==c?"router-link-active":c,u=null==d?"router-link-exact-active":d,m=null==this.activeClass?p:this.activeClass,h=null==this.exactActiveClass?u:this.exactActiveClass,g=i.redirectedFrom?ua(null,Fa(i.redirectedFrom),null,t):i;l[h]=fa(r,g,this.exactPath),l[m]=this.exact||this.exactPath?l[h]:function(n,e){return 0===n.path.replace(pa,"/").indexOf(e.path.replace(pa,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,g);var v=l[h]?this.ariaCurrentValue:null,f=function(n){Ja(n)&&(e.replace?t.replace(a,Ha):t.push(a,Ha))},b={click:Ja};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=f})):b[this.event]=f;var x={class:l},y=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:i,navigate:f,isActive:l[m],isExactActive:l[h]});if(y){if(1===y.length)return y[0];if(y.length>1||!y.length)return 0===y.length?n():n("span",{},y)}if("a"===this.tag)x.on=b,x.attrs={href:s,"aria-current":v};else{var w=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(w){w.isStatic=!1;var j=w.data=ta({},w.data);for(var k in j.on=j.on||{},j.on){var E=j.on[k];k in b&&(j.on[k]=Array.isArray(E)?E:[E])}for(var T in b)T in j.on?j.on[T].push(b[T]):j.on[T]=f;var I=w.data.attrs=ta({},w.data.attrs);I.href=s,I["aria-current"]=v}else x.on=b}return n(this.tag,x,this.$slots.default)}};function Ja(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Za="undefined"!=typeof window;function Va(n,e,t,r,o){var a=e||[],i=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,o,a,i){var s=o.path,l=o.name;0;var c=o.pathToRegexpOptions||{},d=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ka(e.path+"/"+n)}(s,a,c.strict);"boolean"==typeof o.caseSensitive&&(c.sensitive=o.caseSensitive);var p={path:d,regex:Ga(d,c),components:o.components||{default:o.component},alias:o.alias?"string"==typeof o.alias?[o.alias]:o.alias:[],instances:{},enteredCbs:{},name:l,parent:a,matchAs:i,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach((function(o){var a=i?ka(i+"/"+o.path):void 0;n(e,t,r,o,p,a)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==o.alias)for(var u=Array.isArray(o.alias)?o.alias:[o.alias],m=0;m<u.length;++m){0;var h={path:u[m],children:o.children};n(e,t,r,h,a,p.path||"/")}l&&(r[l]||(r[l]=p))}(a,i,s,n,o)}));for(var l=0,c=a.length;l<c;l++)"*"===a[l]&&(a.push(a.splice(l,1)[0]),c--,l--);return{pathList:a,pathMap:i,nameMap:s}}function Ga(n,e){return Ta(n,[],e)}function Ka(n,e){var t=Va(n),r=t.pathList,o=t.pathMap,a=t.nameMap;function i(n,t,i){var s=Fa(n,t,!1,e),c=s.name;if(c){var d=a[c];if(!d)return l(null,s);var p=d.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var u in t.params)!(u in s.params)&&p.indexOf(u)>-1&&(s.params[u]=t.params[u]);return s.path=Ma(d.path,s.params),l(d,s,i)}if(s.path){s.params={};for(var m=0;m<r.length;m++){var h=r[m],g=o[h];if(Xa(g.regex,s.path,s.params))return l(g,s,i)}}return l(null,s)}function s(n,t){var r=n.redirect,o="function"==typeof r?r(ua(n,t,null,e)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return l(null,t);var s=o,c=s.name,d=s.path,p=t.query,u=t.hash,m=t.params;if(p=s.hasOwnProperty("query")?s.query:p,u=s.hasOwnProperty("hash")?s.hash:u,m=s.hasOwnProperty("params")?s.params:m,c){a[c];return i({_normalized:!0,name:c,query:p,hash:u,params:m},void 0,t)}if(d){var h=function(n,e){return ja(n,e.parent?e.parent.path:"/",!0)}(d,n);return i({_normalized:!0,path:Ma(h,m),query:p,hash:u},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=i({_normalized:!0,path:Ma(t,e.params)});if(r){var o=r.matched,a=o[o.length-1];return e.params=r.params,l(a,e)}return l(null,e)}(0,t,n.matchAs):ua(n,t,r,e)}return{match:i,addRoute:function(n,e){var t="object"!=typeof n?a[n]:void 0;Va([e||n],r,o,a,t),t&&t.alias.length&&Va(t.alias.map((function(n){return{path:n,children:[e]}})),r,o,a,t)},getRoutes:function(){return r.map((function(n){return o[n]}))},addRoutes:function(n){Va(n,r,o,a)}}}function Xa(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var o=1,a=r.length;o<a;++o){var i=n.keys[o-1];i&&(t[i.name||"pathMatch"]="string"==typeof r[o]?sa(r[o]):r[o])}return!0}var Ya=Za&&window.performance&&window.performance.now?window.performance:Date;function Qa(){return Ya.now().toFixed(3)}var ni=Qa();function ei(){return ni}function ti(n){return ni=n}var ri=Object.create(null);function oi(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=ta({},window.history.state);return t.key=ei(),window.history.replaceState(t,"",e),window.addEventListener("popstate",si),function(){window.removeEventListener("popstate",si)}}function ai(n,e,t,r){if(n.app){var o=n.options.scrollBehavior;o&&n.app.$nextTick((function(){var a=function(){var n=ei();if(n)return ri[n]}(),i=o.call(n,e,t,r?a:null);i&&("function"==typeof i.then?i.then((function(n){ui(n,a)})).catch((function(n){0})):ui(i,a))}))}}function ii(){var n=ei();n&&(ri[n]={x:window.pageXOffset,y:window.pageYOffset})}function si(n){ii(),n.state&&n.state.key&&ti(n.state.key)}function li(n){return di(n.x)||di(n.y)}function ci(n){return{x:di(n.x)?n.x:window.pageXOffset,y:di(n.y)?n.y:window.pageYOffset}}function di(n){return"number"==typeof n}var pi=/^#\d/;function ui(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var o=pi.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(o){var a=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(o,a={x:di((t=a).x)?t.x:0,y:di(t.y)?t.y:0})}else li(n)&&(e=ci(n))}else r&&li(n)&&(e=ci(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var mi,hi=Za&&((-1===(mi=window.navigator.userAgent).indexOf("Android 2.")&&-1===mi.indexOf("Android 4.0")||-1===mi.indexOf("Mobile Safari")||-1!==mi.indexOf("Chrome")||-1!==mi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function gi(n,e){ii();var t=window.history;try{if(e){var r=ta({},t.state);r.key=ei(),t.replaceState(r,"",n)}else t.pushState({key:ti(Qa())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function vi(n){gi(n,!0)}var fi={redirected:2,aborted:4,cancelled:8,duplicated:16};function bi(n,e){return yi(n,e,fi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return wi.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function xi(n,e){return yi(n,e,fi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function yi(n,e,t,r){var o=new Error(r);return o._isRouter=!0,o.from=n,o.to=e,o.type=t,o}var wi=["params","query","hash"];function ji(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function ki(n,e){return ji(n)&&n._isRouter&&(null==e||n.type===e)}function Ei(n,e,t){var r=function(o){o>=n.length?t():n[o]?e(n[o],(function(){r(o+1)})):r(o+1)};r(0)}function Ti(n){return function(e,t,r){var o=!1,a=0,i=null;Ii(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){o=!0,a++;var l,c=Pi((function(e){var o;((o=e).__esModule||zi&&"Module"===o[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Na.extend(e),t.components[s]=e,--a<=0&&r()})),d=Pi((function(n){var e="Failed to resolve async component "+s+": "+n;i||(i=ji(n)?n:new Error(e),r(i))}));try{l=n(c,d)}catch(n){d(n)}if(l)if("function"==typeof l.then)l.then(c,d);else{var p=l.component;p&&"function"==typeof p.then&&p.then(c,d)}}})),o||r()}}function Ii(n,e){return Ai(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Ai(n){return Array.prototype.concat.apply([],n)}var zi="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Pi(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var Si=function(n,e){this.router=n,this.base=function(n){if(!n)if(Za){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=ha,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function _i(n,e,t,r){var o=Ii(n,(function(n,r,o,a){var i=function(n,e){"function"!=typeof n&&(n=Na.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map((function(n){return t(n,r,o,a)})):t(i,r,o,a)}));return Ai(r?o.reverse():o)}function qi(n,e){if(e)return function(){return n.apply(e,arguments)}}Si.prototype.listen=function(n){this.cb=n},Si.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Si.prototype.onError=function(n){this.errorCbs.push(n)},Si.prototype.transitionTo=function(n,e,t){var r,o=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var a=this.current;this.confirmTransition(r,(function(){o.updateRoute(r),e&&e(r),o.ensureURL(),o.router.afterHooks.forEach((function(n){n&&n(r,a)})),o.ready||(o.ready=!0,o.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!o.ready&&(ki(n,fi.redirected)&&a===ha||(o.ready=!0,o.readyErrorCbs.forEach((function(e){e(n)}))))}))},Si.prototype.confirmTransition=function(n,e,t){var r=this,o=this.current;this.pending=n;var a,i,s=function(n){!ki(n)&&ji(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=o.matched.length-1;if(fa(n,o)&&l===c&&n.matched[l]===o.matched[c])return this.ensureURL(),n.hash&&ai(this.router,o,n,!1),s(((i=yi(a=o,n,fi.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",i));var d=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=d.updated,u=d.deactivated,m=d.activated,h=[].concat(function(n){return _i(n,"beforeRouteLeave",qi,!0)}(u),this.router.beforeHooks,function(n){return _i(n,"beforeRouteUpdate",qi)}(p),m.map((function(n){return n.beforeEnter})),Ti(m)),g=function(e,t){if(r.pending!==n)return s(xi(o,n));try{e(n,o,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return yi(n,e,fi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(o,n))):ji(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(bi(o,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Ei(h,g,(function(){Ei(function(n){return _i(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,o,a){return n(r,o,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),a(n)}))}}(n,t,r)}))}(m).concat(r.router.resolveHooks),g,(function(){if(r.pending!==n)return s(xi(o,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){xa(n)}))}))}))},Si.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Si.prototype.setupListeners=function(){},Si.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=ha,this.pending=null};var Ci=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Bi(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=hi&&t;r&&this.listeners.push(oi());var o=function(){var t=n.current,o=Bi(n.base);n.current===ha&&o===n._startLocation||n.transitionTo(o,(function(n){r&&ai(e,n,t,!0)}))};window.addEventListener("popstate",o),this.listeners.push((function(){window.removeEventListener("popstate",o)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){gi(ka(r.base+n.fullPath)),ai(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){vi(ka(r.base+n.fullPath)),ai(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Bi(this.base)!==this.current.fullPath){var e=ka(this.base+this.current.fullPath);n?gi(e):vi(e)}},e.prototype.getCurrentLocation=function(){return Bi(this.base)},e}(Si);function Bi(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ka(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Oi=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=Bi(n);if(!/^\/#/.test(e))return window.location.replace(ka(n+"/#"+e)),!0}(this.base)||Di()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=hi&&e;t&&this.listeners.push(oi());var r=function(){var e=n.current;Di()&&n.transitionTo($i(),(function(r){t&&ai(n.router,r,e,!0),hi||Ri(r.fullPath)}))},o=hi?"popstate":"hashchange";window.addEventListener(o,r),this.listeners.push((function(){window.removeEventListener(o,r)}))}},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Li(n.fullPath),ai(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Ri(n.fullPath),ai(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;$i()!==e&&(n?Li(e):Ri(e))},e.prototype.getCurrentLocation=function(){return $i()},e}(Si);function Di(){var n=$i();return"/"===n.charAt(0)||(Ri("/"+n),!1)}function $i(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Ui(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Li(n){hi?gi(Ui(n)):window.location.hash=n}function Ri(n){hi?vi(Ui(n)):window.location.replace(Ui(n))}var Mi=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){ki(n,fi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Si),Fi=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ka(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!hi&&!1!==n.fallback,this.fallback&&(e="hash"),Za||(e="abstract"),this.mode=e,e){case"history":this.history=new Ci(this,n.base);break;case"hash":this.history=new Oi(this,n.base,this.fallback);break;case"abstract":this.history=new Mi(this,n.base);break;default:0}},Ni={currentRoute:{configurable:!0}};Fi.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Ni.currentRoute.get=function(){return this.history&&this.history.current},Fi.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Ci||t instanceof Oi){var r=function(n){t.setupListeners(),function(n){var r=t.current,o=e.options.scrollBehavior;hi&&o&&"fullPath"in n&&ai(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Fi.prototype.beforeEach=function(n){return Wi(this.beforeHooks,n)},Fi.prototype.beforeResolve=function(n){return Wi(this.resolveHooks,n)},Fi.prototype.afterEach=function(n){return Wi(this.afterHooks,n)},Fi.prototype.onReady=function(n,e){this.history.onReady(n,e)},Fi.prototype.onError=function(n){this.history.onError(n)},Fi.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Fi.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Fi.prototype.go=function(n){this.history.go(n)},Fi.prototype.back=function(){this.go(-1)},Fi.prototype.forward=function(){this.go(1)},Fi.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Fi.prototype.resolve=function(n,e,t){var r=Fa(n,e=e||this.history.current,t,this),o=this.match(r,e),a=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ka(n+"/"+r):r}(this.history.base,a,this.mode),normalizedTo:r,resolved:o}},Fi.prototype.getRoutes=function(){return this.matcher.getRoutes()},Fi.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==ha&&this.history.transitionTo(this.history.getCurrentLocation())},Fi.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==ha&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Fi.prototype,Ni);var Hi=Fi;function Wi(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Fi.install=function n(e){if(!n.installed||Na!==e){n.installed=!0,Na=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",ya),e.component("RouterLink",Wa);var o=e.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},Fi.version="3.6.5",Fi.isNavigationFailure=ki,Fi.NavigationFailureType=fi,Fi.START_LOCATION=ha,Za&&window.Vue&&window.Vue.use(Fi);t(104);t(16),t(130);var Ji={NotFound:()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,332)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,331))},Zi={"v-4c0345b0":()=>t.e(6).then(t.bind(null,333)),"v-6af08e1e":()=>t.e(7).then(t.bind(null,334)),"v-19994cbb":()=>t.e(8).then(t.bind(null,335)),"v-4651cac4":()=>t.e(9).then(t.bind(null,336)),"v-0fe10b14":()=>t.e(10).then(t.bind(null,337)),"v-95692bc4":()=>t.e(11).then(t.bind(null,338)),"v-352d0043":()=>t.e(12).then(t.bind(null,339)),"v-285e924a":()=>t.e(13).then(t.bind(null,340)),"v-373087a2":()=>t.e(14).then(t.bind(null,341)),"v-23f0e4b6":()=>t.e(15).then(t.bind(null,342)),"v-6d28b49e":()=>t.e(16).then(t.bind(null,343)),"v-6c2c2e43":()=>t.e(17).then(t.bind(null,344)),"v-5d82c9fa":()=>t.e(18).then(t.bind(null,345)),"v-4a63d472":()=>t.e(19).then(t.bind(null,346)),"v-5c557f7e":()=>t.e(20).then(t.bind(null,347)),"v-01497320":()=>t.e(21).then(t.bind(null,348)),"v-52406657":()=>t.e(22).then(t.bind(null,349)),"v-39c98aa8":()=>t.e(23).then(t.bind(null,350)),"v-122cb915":()=>t.e(24).then(t.bind(null,351)),"v-73411bec":()=>t.e(25).then(t.bind(null,352)),"v-902b297a":()=>t.e(26).then(t.bind(null,353)),"v-54a88ce1":()=>t.e(27).then(t.bind(null,354)),"v-332b2444":()=>t.e(28).then(t.bind(null,355)),"v-619f047f":()=>t.e(29).then(t.bind(null,356)),"v-14f32652":()=>t.e(30).then(t.bind(null,357)),"v-50e0c421":()=>t.e(31).then(t.bind(null,358)),"v-47347fd0":()=>t.e(32).then(t.bind(null,359)),"v-2d12da79":()=>t.e(33).then(t.bind(null,360)),"v-85823422":()=>t.e(34).then(t.bind(null,361)),"v-53d7913d":()=>t.e(35).then(t.bind(null,362)),"v-56d35d64":()=>t.e(36).then(t.bind(null,363)),"v-0f0fa256":()=>t.e(37).then(t.bind(null,364)),"v-2e0ff7c7":()=>t.e(38).then(t.bind(null,365)),"v-1a1e4140":()=>t.e(39).then(t.bind(null,366)),"v-760f3a82":()=>t.e(40).then(t.bind(null,367)),"v-4aa8813c":()=>t.e(41).then(t.bind(null,368)),"v-5328f47d":()=>t.e(42).then(t.bind(null,369)),"v-7eda8506":()=>t.e(43).then(t.bind(null,370)),"v-ec7d88d8":()=>t.e(44).then(t.bind(null,371)),"v-4a59b246":()=>t.e(45).then(t.bind(null,372)),"v-c6b87b8a":()=>t.e(46).then(t.bind(null,373)),"v-1d0e27ff":()=>t.e(47).then(t.bind(null,374)),"v-5ba972b8":()=>t.e(48).then(t.bind(null,375)),"v-c6133784":()=>t.e(49).then(t.bind(null,376)),"v-0712ef68":()=>t.e(50).then(t.bind(null,377)),"v-cd3a654c":()=>t.e(51).then(t.bind(null,378)),"v-46addefb":()=>t.e(52).then(t.bind(null,379)),"v-290d4594":()=>t.e(53).then(t.bind(null,380)),"v-542ed480":()=>t.e(54).then(t.bind(null,381)),"v-3d1d1f36":()=>t.e(55).then(t.bind(null,382)),"v-8751844c":()=>t.e(56).then(t.bind(null,383)),"v-5f961103":()=>t.e(57).then(t.bind(null,384)),"v-46b5a036":()=>t.e(58).then(t.bind(null,385)),"v-77fe27fa":()=>t.e(59).then(t.bind(null,386)),"v-7581b9fe":()=>t.e(60).then(t.bind(null,387)),"v-a89e22a8":()=>t.e(61).then(t.bind(null,388)),"v-02d3e2da":()=>t.e(62).then(t.bind(null,389)),"v-e11e3a30":()=>t.e(63).then(t.bind(null,390)),"v-5bcb8ad1":()=>t.e(64).then(t.bind(null,391)),"v-1f96c428":()=>t.e(65).then(t.bind(null,392)),"v-6440137f":()=>t.e(66).then(t.bind(null,393)),"v-a9404fc6":()=>t.e(67).then(t.bind(null,394)),"v-40fe6700":()=>t.e(68).then(t.bind(null,395)),"v-2eb9ca82":()=>t.e(69).then(t.bind(null,396)),"v-4c3db813":()=>t.e(70).then(t.bind(null,397)),"v-41eef0dd":()=>t.e(71).then(t.bind(null,398)),"v-01aae38e":()=>t.e(72).then(t.bind(null,399)),"v-02bf0215":()=>t.e(73).then(t.bind(null,400)),"v-5b248a07":()=>t.e(74).then(t.bind(null,401)),"v-0d882400":()=>t.e(75).then(t.bind(null,402)),"v-3f395710":()=>t.e(76).then(t.bind(null,403)),"v-520fcb33":()=>t.e(77).then(t.bind(null,404)),"v-a821d174":()=>t.e(78).then(t.bind(null,405)),"v-7d2b1e54":()=>t.e(79).then(t.bind(null,406)),"v-6385ecc6":()=>t.e(80).then(t.bind(null,407)),"v-6c8f570a":()=>t.e(81).then(t.bind(null,408)),"v-2754fb3f":()=>t.e(82).then(t.bind(null,409)),"v-aa8bc1d4":()=>t.e(83).then(t.bind(null,410)),"v-576c4fe7":()=>t.e(84).then(t.bind(null,411)),"v-3e505182":()=>t.e(85).then(t.bind(null,412)),"v-2f3d57c5":()=>t.e(86).then(t.bind(null,413)),"v-465b447a":()=>t.e(87).then(t.bind(null,414)),"v-ad446a36":()=>t.e(88).then(t.bind(null,415)),"v-6bb0facd":()=>t.e(89).then(t.bind(null,416)),"v-ea2869d2":()=>t.e(90).then(t.bind(null,417)),"v-46878545":()=>t.e(91).then(t.bind(null,418)),"v-3b3d45f6":()=>t.e(92).then(t.bind(null,419)),"v-6d0954b6":()=>t.e(93).then(t.bind(null,420)),"v-15582085":()=>t.e(94).then(t.bind(null,421)),"v-9db5bb36":()=>t.e(95).then(t.bind(null,422)),"v-1c66ce13":()=>t.e(96).then(t.bind(null,423)),"v-ff627a0a":()=>t.e(97).then(t.bind(null,424)),"v-25cf1a76":()=>t.e(98).then(t.bind(null,425)),"v-cb633736":()=>t.e(99).then(t.bind(null,426)),"v-e4e3fbae":()=>t.e(100).then(t.bind(null,427)),"v-2cd68046":()=>t.e(101).then(t.bind(null,428)),"v-5b4be836":()=>t.e(102).then(t.bind(null,429)),"v-3c69d965":()=>t.e(103).then(t.bind(null,430)),"v-8ffb466a":()=>t.e(104).then(t.bind(null,431)),"v-28761791":()=>t.e(105).then(t.bind(null,432)),"v-623c2036":()=>t.e(106).then(t.bind(null,433)),"v-ace1a136":()=>t.e(107).then(t.bind(null,434)),"v-96c80576":()=>t.e(108).then(t.bind(null,435)),"v-294c3845":()=>t.e(109).then(t.bind(null,436)),"v-33e567d2":()=>t.e(110).then(t.bind(null,437)),"v-432b5acd":()=>t.e(111).then(t.bind(null,438)),"v-2a4a7876":()=>t.e(112).then(t.bind(null,439)),"v-2aada385":()=>t.e(113).then(t.bind(null,440)),"v-4c8cb4fa":()=>t.e(114).then(t.bind(null,441)),"v-da23d6b6":()=>t.e(118).then(t.bind(null,442)),"v-0eece9f9":()=>t.e(119).then(t.bind(null,443)),"v-07309b25":()=>t.e(120).then(t.bind(null,444)),"v-58b797ed":()=>t.e(121).then(t.bind(null,445)),"v-bed3c2f6":()=>t.e(122).then(t.bind(null,446)),"v-b47cce36":()=>t.e(123).then(t.bind(null,447)),"v-87791df6":()=>t.e(124).then(t.bind(null,448)),"v-4dbd4885":()=>t.e(125).then(t.bind(null,449)),"v-c0b707b6":()=>t.e(126).then(t.bind(null,450)),"v-88fc4b76":()=>t.e(127).then(t.bind(null,451)),"v-29741085":()=>t.e(128).then(t.bind(null,452)),"v-a1619a84":()=>t.e(129).then(t.bind(null,453)),"v-fbfd6272":()=>t.e(130).then(t.bind(null,454)),"v-0f3afd48":()=>t.e(131).then(t.bind(null,455)),"v-7cc1ad8e":()=>t.e(132).then(t.bind(null,456)),"v-59a78690":()=>t.e(133).then(t.bind(null,457)),"v-ccf099a6":()=>t.e(134).then(t.bind(null,458)),"v-ae509a02":()=>t.e(135).then(t.bind(null,459)),"v-67569a3f":()=>t.e(136).then(t.bind(null,460)),"v-25d5817f":()=>t.e(137).then(t.bind(null,461)),"v-37572e82":()=>t.e(138).then(t.bind(null,462)),"v-ba596002":()=>t.e(139).then(t.bind(null,463)),"v-6152373f":()=>t.e(140).then(t.bind(null,464)),"v-1fd11e7f":()=>t.e(141).then(t.bind(null,465)),"v-435ff482":()=>t.e(142).then(t.bind(null,466)),"v-c6622602":()=>t.e(143).then(t.bind(null,467)),"v-91f20eb6":()=>t.e(144).then(t.bind(null,468)),"v-7bb863e5":()=>t.e(145).then(t.bind(null,469)),"v-4069cf25":()=>t.e(146).then(t.bind(null,470)),"v-051b3a65":()=>t.e(147).then(t.bind(null,471)),"v-6c66b4b6":()=>t.e(148).then(t.bind(null,472)),"v-e303de36":()=>t.e(149).then(t.bind(null,473)),"v-532f7c25":()=>t.e(150).then(t.bind(null,474)),"v-17e0e765":()=>t.e(151).then(t.bind(null,475)),"v-46db5ab6":()=>t.e(152).then(t.bind(null,476)),"v-bd788436":()=>t.e(153).then(t.bind(null,477)),"v-eefa1536":()=>t.e(154).then(t.bind(null,478)),"v-4d3460a5":()=>t.e(155).then(t.bind(null,479)),"v-8109bfa4":()=>t.e(156).then(t.bind(null,480)),"v-7248d847":()=>t.e(157).then(t.bind(null,481)),"v-a2020f60":()=>t.e(158).then(t.bind(null,482)),"v-79d8519c":()=>t.e(159).then(t.bind(null,483)),"v-4db28903":()=>t.e(160).then(t.bind(null,484)),"v-f1bc02ba":()=>t.e(161).then(t.bind(null,485)),"v-a7b481ba":()=>t.e(162).then(t.bind(null,486)),"v-2ec19c8e":()=>t.e(163).then(t.bind(null,487)),"v-cda616d8":()=>t.e(164).then(t.bind(null,488)),"v-16b2c9d1":()=>t.e(165).then(t.bind(null,489)),"v-1769b69b":()=>t.e(166).then(t.bind(null,490)),"v-2f8b72a4":()=>t.e(167).then(t.bind(null,491)),"v-518abb43":()=>t.e(168).then(t.bind(null,492)),"v-7cf65ffd":()=>t.e(169).then(t.bind(null,493)),"v-0d673e87":()=>t.e(170).then(t.bind(null,494)),"v-95598034":()=>t.e(171).then(t.bind(null,495)),"v-e8f6dcc8":()=>t.e(172).then(t.bind(null,496)),"v-2dd55657":()=>t.e(173).then(t.bind(null,497)),"v-75f026ec":()=>t.e(174).then(t.bind(null,498)),"v-26aa7218":()=>t.e(175).then(t.bind(null,499)),"v-1cb749f7":()=>t.e(176).then(t.bind(null,500)),"v-67db9c88":()=>t.e(177).then(t.bind(null,501)),"v-46cea4e5":()=>t.e(178).then(t.bind(null,502)),"v-fa41ba04":()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,503)),"v-6e84f442":()=>t.e(117).then(t.bind(null,504)),"v-2cba8c46":()=>t.e(116).then(t.bind(null,505)),"v-4addcf41":()=>t.e(115).then(t.bind(null,506))};function Vi(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Gi=/-(\w)/g,Ki=Vi(n=>n.replace(Gi,(n,e)=>e?e.toUpperCase():"")),Xi=/\B([A-Z])/g,Yi=Vi(n=>n.replace(Xi,"-$1").toLowerCase()),Qi=Vi(n=>n.charAt(0).toUpperCase()+n.slice(1));function ns(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(Qi(Ki(e))):n(Qi(e))||n(Yi(e))}const es=Object.assign({},Ji,Zi),ts=n=>es[n],rs=n=>Zi[n],os=n=>Ji[n],as=n=>Jt.component(n);function is(n){return ns(rs,n)}function ss(n){return ns(os,n)}function ls(n){return ns(ts,n)}function cs(n){return ns(as,n)}function ds(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!cs(n)&&ls(n)){const e=await ls(n)();Jt.component(n,e.default)}}))}function ps(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var us=t(92),ms=t.n(us),hs=t(93),gs=t.n(hs),vs={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${gs()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=bs(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=xs(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return ms()([{name:"description",content:this.$description}],n,this.siteMeta,ys)},updateCanonicalLink(){fs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",bs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){xs(null,this.currentMetaTags),fs()}};function fs(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function bs(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function xs(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function ys(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var ws=t(50),js={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(ws)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),o=window.innerHeight+t;for(let n=0;n<e.length;n++){const a=e[n],i=e[n+1],s=0===n&&0===t||t>=a.parentElement.offsetTop+10&&(!i||t<i.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(a.hash)){const t=a;if(o===r)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},ks=t(24),Es=t.n(ks),Ts={mounted(){Es.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Jt.component(n.name)||Es.a.start(),t()}),this.$router.afterEach(()=>{Es.a.done(),this.isSidebarOpen=!1})}};t(239),t(240);class Is{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var As={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new Is).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}},zs="auto",Ps="zoom-in",Ss="zoom-out",_s="grab",qs="move";function Cs(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o={passive:!1};r?n.addEventListener(e,t,o):n.removeEventListener(e,t,o)}function Bs(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Os(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Ds(n,e,t){!function(n){var e=$s,t=Us;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var o=n.transform;delete n.transform,n[t]=o}}(e);var r=n.style,o={};for(var a in e)t&&(o[a]=r[a]||""),r[a]=e[a];return o}var $s="transition",Us="transform",Ls="transform",Rs="transitionend";var Ms=function(){},Fs={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Ms,onClose:Ms,onGrab:Ms,onMove:Ms,onRelease:Ms,onBeforeOpen:Ms,onBeforeClose:Ms,onBeforeGrab:Ms,onBeforeRelease:Ms,onImageLoading:Ms,onImageLoaded:Ms},Ns={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Ws(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,o=this.lastScrollPosition.y-t,a=this.options.scrollThreshold;(Math.abs(o)>=a||Math.abs(r)>=a)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Hs(n)&&!Ws(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Hs(n)&&!Ws(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Hs(n){return 0===n.button}function Ws(n){return n.metaKey||n.ctrlKey}var Js={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Ds(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Cs(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Ds(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Zs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Vs=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Gs=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Ks={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Os(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,o=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?_s:Ss,transition:Ls+"\n        "+r+"s\n        "+o,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Ds(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Ds(this.el,{transform:"none"})},grab:function(n,e,t){var r=Xs(),o=r.x-n,a=r.y-e;Ds(this.el,{cursor:qs,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=Xs(),o=r.x-n,a=r.y-e;Ds(this.el,{transition:Ls,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Ds(this.el,this.styleClose)},restoreOpenStyle:function(){Ds(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=Xs(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,o=r.customSize,a=r.scaleBase;if(!o&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(o&&"object"===(void 0===o?"undefined":Zs(o)))return{x:o.width/this.rect.width,y:o.height/this.rect.height};var i=this.rect.width/2,s=this.rect.height/2,l=Xs(),c={x:l.x-i,y:l.y-s},d=c.x/i,p=c.y/s,u=a+Math.min(d,p);if(o&&"string"==typeof o){var m=t||this.el.naturalWidth,h=e||this.el.naturalHeight,g=parseFloat(o)*m/(100*this.rect.width),v=parseFloat(o)*h/(100*this.rect.height);if(u>g||u>v)return{x:g,y:v}}return{x:u,y:u}}};function Xs(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Ys(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Cs(n,r,e[r],t)}))}var Qs=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Ks),this.overlay=Object.create(Js),this.handler=Object.create(Ns),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Gs({},Fs,e),this.overlay.init(this),this.handler.init(this)}return Vs(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Ps,Cs(n,"click",this.handler.click),this.options.preloadImage&&Bs(Os(n)));return this}},{key:"config",value:function(n){return n?(Gs(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var o=this.target.srcOriginal;null!=o&&(this.options.onImageLoading(r),Bs(o,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Cs(document,"scroll",this.handler.scroll),Cs(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Cs(window,"resize",this.handler.resizeWindow);var a=function n(){Cs(r,Rs,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Ys(document,e.handler,!0),t(r)};return Cs(r,Rs,a),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=zs,this.overlay.fadeOut(),this.target.zoomOut(),Cs(document,"scroll",this.handler.scroll,!1),Cs(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Cs(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Cs(t,Rs,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Ys(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Cs(t,Rs,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var o=this.target.el;this.options.onBeforeGrab(o),this.released=!1,this.target.grab(n,e,t);var a=function n(){Cs(o,Rs,n,!1),r(o)};return Cs(o,Rs,a),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=qs,this.target.move(n,e,t);var o=this.target.el,a=function n(){Cs(o,Rs,n,!1),r(o)};return Cs(o,Rs,a),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=zs,this.target.restoreOpenStyle();var r=function r(){Cs(t,Rs,r,!1),n.lock=!1,n.released=!0,e(t)};return Cs(t,Rs,r),this}}}]),n}();const nl=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),el=Number("500");class tl{constructor(){this.instance=new Qs(nl)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=el){setTimeout(()=>this.update(n),e)}}var rl=[vs,js,Ts,As,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new tl,this.$vuepress.zooming.updateDelay()}}],ol={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ps("layout",n),Jt.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},al=t(7),il=Object(al.a)(ol,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(il,"mixins",rl);const sl=[{name:"v-4c0345b0",path:"/pages/8ef798/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4c0345b0").then(t)}},{path:"/pages/8ef798/index.html",redirect:"/pages/8ef798/"},{path:"/01.v3/010.快速入门/010.简介.html",redirect:"/pages/8ef798/"},{name:"v-6af08e1e",path:"/pages/4b9629/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6af08e1e").then(t)}},{path:"/pages/4b9629/index.html",redirect:"/pages/4b9629/"},{path:"/01.v3/010.快速入门/020.electron-egg是什么.html",redirect:"/pages/4b9629/"},{name:"v-19994cbb",path:"/pages/e64ff6/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-19994cbb").then(t)}},{path:"/pages/e64ff6/index.html",redirect:"/pages/e64ff6/"},{path:"/01.v3/010.快速入门/030.安装.html",redirect:"/pages/e64ff6/"},{name:"v-4651cac4",path:"/pages/089f32/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4651cac4").then(t)}},{path:"/pages/089f32/index.html",redirect:"/pages/089f32/"},{path:"/01.v3/010.快速入门/031.第三方使用.html",redirect:"/pages/089f32/"},{name:"v-0fe10b14",path:"/pages/a28da5/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-0fe10b14").then(t)}},{path:"/pages/a28da5/index.html",redirect:"/pages/a28da5/"},{path:"/01.v3/010.快速入门/040.快速开始.html",redirect:"/pages/a28da5/"},{name:"v-95692bc4",path:"/pages/f7cbf9/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-95692bc4").then(t)}},{path:"/pages/f7cbf9/index.html",redirect:"/pages/f7cbf9/"},{path:"/01.v3/010.快速入门/050.配置/01.基础配置.html",redirect:"/pages/f7cbf9/"},{name:"v-352d0043",path:"/pages/197d56/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-352d0043").then(t)}},{path:"/pages/197d56/index.html",redirect:"/pages/197d56/"},{path:"/01.v3/010.快速入门/050.配置/03.加密配置.html",redirect:"/pages/197d56/"},{name:"v-285e924a",path:"/pages/2df2e6/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-285e924a").then(t)}},{path:"/pages/2df2e6/index.html",redirect:"/pages/2df2e6/"},{path:"/01.v3/010.快速入门/050.配置/05.打包配置.html",redirect:"/pages/2df2e6/"},{name:"v-373087a2",path:"/pages/b61a92/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-373087a2").then(t)}},{path:"/pages/b61a92/index.html",redirect:"/pages/b61a92/"},{path:"/01.v3/010.快速入门/060.命令.html",redirect:"/pages/b61a92/"},{name:"v-23f0e4b6",path:"/pages/ee9aed/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-23f0e4b6").then(t)}},{path:"/pages/ee9aed/index.html",redirect:"/pages/ee9aed/"},{path:"/01.v3/020.基础功能/010.目录结构.html",redirect:"/pages/ee9aed/"},{name:"v-6d28b49e",path:"/pages/e6cd33/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6d28b49e").then(t)}},{path:"/pages/e6cd33/index.html",redirect:"/pages/e6cd33/"},{path:"/01.v3/020.基础功能/012.入口及生命周期.html",redirect:"/pages/e6cd33/"},{name:"v-6c2c2e43",path:"/pages/a75f3c/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6c2c2e43").then(t)}},{path:"/pages/a75f3c/index.html",redirect:"/pages/a75f3c/"},{path:"/01.v3/020.基础功能/014.前端模块.html",redirect:"/pages/a75f3c/"},{name:"v-5d82c9fa",path:"/pages/f5ca26/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-5d82c9fa").then(t)}},{path:"/pages/f5ca26/index.html",redirect:"/pages/f5ca26/"},{path:"/01.v3/020.基础功能/016.控制器.html",redirect:"/pages/f5ca26/"},{name:"v-4a63d472",path:"/pages/de1cbf/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4a63d472").then(t)}},{path:"/pages/de1cbf/index.html",redirect:"/pages/de1cbf/"},{path:"/01.v3/020.基础功能/018.服务层.html",redirect:"/pages/de1cbf/"},{name:"v-5c557f7e",path:"/pages/00ac20/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-5c557f7e").then(t)}},{path:"/pages/00ac20/index.html",redirect:"/pages/00ac20/"},{path:"/01.v3/020.基础功能/020.预加载层.html",redirect:"/pages/00ac20/"},{name:"v-01497320",path:"/pages/c08bd9/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-01497320").then(t)}},{path:"/pages/c08bd9/index.html",redirect:"/pages/c08bd9/"},{path:"/01.v3/020.基础功能/030.插件/010.插件说明.html",redirect:"/pages/c08bd9/"},{name:"v-52406657",path:"/pages/fe5e7f/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-52406657").then(t)}},{path:"/pages/fe5e7f/index.html",redirect:"/pages/fe5e7f/"},{path:"/01.v3/020.基础功能/030.插件/020.窗口插件.html",redirect:"/pages/fe5e7f/"},{name:"v-39c98aa8",path:"/pages/c2dd07/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-39c98aa8").then(t)}},{path:"/pages/c2dd07/index.html",redirect:"/pages/c2dd07/"},{path:"/01.v3/020.基础功能/030.插件/030.托盘插件.html",redirect:"/pages/c2dd07/"},{name:"v-122cb915",path:"/pages/5746e7/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-122cb915").then(t)}},{path:"/pages/5746e7/index.html",redirect:"/pages/5746e7/"},{path:"/01.v3/020.基础功能/030.插件/040.自动升级插件.html",redirect:"/pages/5746e7/"},{name:"v-73411bec",path:"/pages/371117/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-73411bec").then(t)}},{path:"/pages/371117/index.html",redirect:"/pages/371117/"},{path:"/01.v3/020.基础功能/030.插件/050.唤醒插件.html",redirect:"/pages/371117/"},{name:"v-902b297a",path:"/pages/2af017/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-902b297a").then(t)}},{path:"/pages/2af017/index.html",redirect:"/pages/2af017/"},{path:"/01.v3/020.基础功能/030.插件/060.安全插件.html",redirect:"/pages/2af017/"},{name:"v-54a88ce1",path:"/pages/745360/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-54a88ce1").then(t)}},{path:"/pages/745360/index.html",redirect:"/pages/745360/"},{path:"/01.v3/020.基础功能/030.插件/070.java服务插件.html",redirect:"/pages/745360/"},{name:"v-332b2444",path:"/pages/f4f62c/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-332b2444").then(t)}},{path:"/pages/f4f62c/index.html",redirect:"/pages/f4f62c/"},{path:"/01.v3/020.基础功能/040.通信/010.通信介绍.html",redirect:"/pages/f4f62c/"},{name:"v-619f047f",path:"/pages/ae344a/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-619f047f").then(t)}},{path:"/pages/ae344a/index.html",redirect:"/pages/ae344a/"},{path:"/01.v3/020.基础功能/040.通信/020.通信ipcRender.html",redirect:"/pages/ae344a/"},{name:"v-14f32652",path:"/pages/ad7faa/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-14f32652").then(t)}},{path:"/pages/ad7faa/index.html",redirect:"/pages/ad7faa/"},{path:"/01.v3/020.基础功能/050.数据库/010.json数据库.html",redirect:"/pages/ad7faa/"},{name:"v-50e0c421",path:"/pages/c547b1/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-50e0c421").then(t)}},{path:"/pages/c547b1/index.html",redirect:"/pages/c547b1/"},{path:"/01.v3/020.基础功能/050.数据库/020.sqlite数据库.html",redirect:"/pages/c547b1/"},{name:"v-47347fd0",path:"/pages/afbfa0/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-47347fd0").then(t)}},{path:"/pages/afbfa0/index.html",redirect:"/pages/afbfa0/"},{path:"/01.v3/020.基础功能/060.任务/010.Jobs说明.html",redirect:"/pages/afbfa0/"},{name:"v-2d12da79",path:"/pages/036718/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2d12da79").then(t)}},{path:"/pages/036718/index.html",redirect:"/pages/036718/"},{path:"/01.v3/020.基础功能/060.任务/020.ChildJob.html",redirect:"/pages/036718/"},{name:"v-85823422",path:"/pages/2341b1/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-85823422").then(t)}},{path:"/pages/2341b1/index.html",redirect:"/pages/2341b1/"},{path:"/01.v3/020.基础功能/060.任务/030.ChildPoolJob.html",redirect:"/pages/2341b1/"},{name:"v-53d7913d",path:"/pages/bd2084/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-53d7913d").then(t)}},{path:"/pages/bd2084/index.html",redirect:"/pages/bd2084/"},{path:"/01.v3/020.基础功能/060.任务/040.RenderJob.html",redirect:"/pages/bd2084/"},{name:"v-56d35d64",path:"/pages/0d08b1/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-56d35d64").then(t)}},{path:"/pages/0d08b1/index.html",redirect:"/pages/0d08b1/"},{path:"/01.v3/020.基础功能/072.日志.html",redirect:"/pages/0d08b1/"},{name:"v-0f0fa256",path:"/pages/7fe540/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-0f0fa256").then(t)}},{path:"/pages/7fe540/index.html",redirect:"/pages/7fe540/"},{path:"/01.v3/020.基础功能/074.额外资源目录.html",redirect:"/pages/7fe540/"},{name:"v-2e0ff7c7",path:"/pages/64001c/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2e0ff7c7").then(t)}},{path:"/pages/64001c/index.html",redirect:"/pages/64001c/"},{path:"/01.v3/020.基础功能/076.调试.html",redirect:"/pages/64001c/"},{name:"v-1a1e4140",path:"/pages/c0859e/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-1a1e4140").then(t)}},{path:"/pages/c0859e/index.html",redirect:"/pages/c0859e/"},{path:"/01.v3/020.基础功能/078.脚本工具.html",redirect:"/pages/c0859e/"},{name:"v-760f3a82",path:"/pages/e13483/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-760f3a82").then(t)}},{path:"/pages/e13483/index.html",redirect:"/pages/e13483/"},{path:"/01.v3/020.基础功能/081.dll使用.html",redirect:"/pages/e13483/"},{name:"v-4aa8813c",path:"/pages/0b76fb/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4aa8813c").then(t)}},{path:"/pages/0b76fb/index.html",redirect:"/pages/0b76fb/"},{path:"/01.v3/020.基础功能/082.调用第三方程序.html",redirect:"/pages/0b76fb/"},{name:"v-5328f47d",path:"/pages/c9eed1/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-5328f47d").then(t)}},{path:"/pages/c9eed1/index.html",redirect:"/pages/c9eed1/"},{path:"/01.v3/020.基础功能/090.远程模式.html",redirect:"/pages/c9eed1/"},{name:"v-7eda8506",path:"/pages/ad838d/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-7eda8506").then(t)}},{path:"/pages/ad838d/index.html",redirect:"/pages/ad838d/"},{path:"/01.v3/030.生成软件/010.构建.html",redirect:"/pages/ad838d/"},{name:"v-ec7d88d8",path:"/pages/383ba6/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-ec7d88d8").then(t)}},{path:"/pages/383ba6/index.html",redirect:"/pages/383ba6/"},{path:"/01.v3/030.生成软件/020.代码加密.html",redirect:"/pages/383ba6/"},{name:"v-4a59b246",path:"/pages/801f4c/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4a59b246").then(t)}},{path:"/pages/801f4c/index.html",redirect:"/pages/801f4c/"},{path:"/01.v3/030.生成软件/030.图标修改.html",redirect:"/pages/801f4c/"},{name:"v-c6b87b8a",path:"/pages/bc25c6/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-c6b87b8a").then(t)}},{path:"/pages/bc25c6/index.html",redirect:"/pages/bc25c6/"},{path:"/01.v3/040.升级/010.框架升级.html",redirect:"/pages/bc25c6/"},{name:"v-1d0e27ff",path:"/pages/3152fb/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-1d0e27ff").then(t)}},{path:"/pages/3152fb/index.html",redirect:"/pages/3152fb/"},{path:"/01.v3/040.升级/020.应用软件自动更新.html",redirect:"/pages/3152fb/"},{name:"v-5ba972b8",path:"/pages/f686cd/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-5ba972b8").then(t)}},{path:"/pages/f686cd/index.html",redirect:"/pages/f686cd/"},{path:"/01.v3/050.其它/030.更新记录.html",redirect:"/pages/f686cd/"},{name:"v-c6133784",path:"/pages/23649b/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-c6133784").then(t)}},{path:"/pages/23649b/index.html",redirect:"/pages/23649b/"},{path:"/01.v3/060.常见问题.html",redirect:"/pages/23649b/"},{name:"v-0712ef68",path:"/pages/96f672/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-0712ef68").then(t)}},{path:"/pages/96f672/index.html",redirect:"/pages/96f672/"},{path:"/02.v2/010.快速入门/010.简介.html",redirect:"/pages/96f672/"},{name:"v-cd3a654c",path:"/pages/ea6ac8/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-cd3a654c").then(t)}},{path:"/pages/ea6ac8/index.html",redirect:"/pages/ea6ac8/"},{path:"/02.v2/010.快速入门/020.electron-egg是什么.html",redirect:"/pages/ea6ac8/"},{name:"v-46addefb",path:"/pages/356bca/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-46addefb").then(t)}},{path:"/pages/356bca/index.html",redirect:"/pages/356bca/"},{path:"/02.v2/010.快速入门/030.安装.html",redirect:"/pages/356bca/"},{name:"v-290d4594",path:"/pages/da8349/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-290d4594").then(t)}},{path:"/pages/da8349/index.html",redirect:"/pages/da8349/"},{path:"/02.v2/010.快速入门/040.快速开始.html",redirect:"/pages/da8349/"},{name:"v-542ed480",path:"/pages/201d62/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-542ed480").then(t)}},{path:"/pages/201d62/index.html",redirect:"/pages/201d62/"},{path:"/02.v2/010.快速入门/050.配置.html",redirect:"/pages/201d62/"},{name:"v-3d1d1f36",path:"/pages/ae32b8/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-3d1d1f36").then(t)}},{path:"/pages/ae32b8/index.html",redirect:"/pages/ae32b8/"},{path:"/02.v2/020.基础功能/010.目录结构.html",redirect:"/pages/ae32b8/"},{name:"v-8751844c",path:"/pages/6b9c7a/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-8751844c").then(t)}},{path:"/pages/6b9c7a/index.html",redirect:"/pages/6b9c7a/"},{path:"/02.v2/020.基础功能/012.入口及生命周期.html",redirect:"/pages/6b9c7a/"},{name:"v-5f961103",path:"/pages/3d5da0/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-5f961103").then(t)}},{path:"/pages/3d5da0/index.html",redirect:"/pages/3d5da0/"},{path:"/02.v2/020.基础功能/014.前端模块.html",redirect:"/pages/3d5da0/"},{name:"v-46b5a036",path:"/pages/c50bb1/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-46b5a036").then(t)}},{path:"/pages/c50bb1/index.html",redirect:"/pages/c50bb1/"},{path:"/02.v2/020.基础功能/016.控制器.html",redirect:"/pages/c50bb1/"},{name:"v-77fe27fa",path:"/pages/465a58/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-77fe27fa").then(t)}},{path:"/pages/465a58/index.html",redirect:"/pages/465a58/"},{path:"/02.v2/020.基础功能/018.服务层.html",redirect:"/pages/465a58/"},{name:"v-7581b9fe",path:"/pages/4d182f/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-7581b9fe").then(t)}},{path:"/pages/4d182f/index.html",redirect:"/pages/4d182f/"},{path:"/02.v2/020.基础功能/020.预加载层.html",redirect:"/pages/4d182f/"},{name:"v-a89e22a8",path:"/pages/b69355/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-a89e22a8").then(t)}},{path:"/pages/b69355/index.html",redirect:"/pages/b69355/"},{path:"/02.v2/020.基础功能/030.插件/010.插件说明.html",redirect:"/pages/b69355/"},{name:"v-02d3e2da",path:"/pages/7a78f7/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-02d3e2da").then(t)}},{path:"/pages/7a78f7/index.html",redirect:"/pages/7a78f7/"},{path:"/02.v2/020.基础功能/030.插件/020.窗口插件.html",redirect:"/pages/7a78f7/"},{name:"v-e11e3a30",path:"/pages/d155ae/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-e11e3a30").then(t)}},{path:"/pages/d155ae/index.html",redirect:"/pages/d155ae/"},{path:"/02.v2/020.基础功能/030.插件/030.托盘插件.html",redirect:"/pages/d155ae/"},{name:"v-5bcb8ad1",path:"/pages/9e6229/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-5bcb8ad1").then(t)}},{path:"/pages/9e6229/index.html",redirect:"/pages/9e6229/"},{path:"/02.v2/020.基础功能/030.插件/040.自动升级插件.html",redirect:"/pages/9e6229/"},{name:"v-1f96c428",path:"/pages/d4ef4d/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-1f96c428").then(t)}},{path:"/pages/d4ef4d/index.html",redirect:"/pages/d4ef4d/"},{path:"/02.v2/020.基础功能/030.插件/050.唤醒插件.html",redirect:"/pages/d4ef4d/"},{name:"v-6440137f",path:"/pages/1cdf89/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6440137f").then(t)}},{path:"/pages/1cdf89/index.html",redirect:"/pages/1cdf89/"},{path:"/02.v2/020.基础功能/030.插件/060.安全插件.html",redirect:"/pages/1cdf89/"},{name:"v-a9404fc6",path:"/pages/259c1f/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-a9404fc6").then(t)}},{path:"/pages/259c1f/index.html",redirect:"/pages/259c1f/"},{path:"/02.v2/020.基础功能/030.插件/070.java服务插件.html",redirect:"/pages/259c1f/"},{name:"v-40fe6700",path:"/pages/4ed946/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-40fe6700").then(t)}},{path:"/pages/4ed946/index.html",redirect:"/pages/4ed946/"},{path:"/02.v2/020.基础功能/040.通信/010.通信介绍.html",redirect:"/pages/4ed946/"},{name:"v-2eb9ca82",path:"/pages/eec975/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2eb9ca82").then(t)}},{path:"/pages/eec975/index.html",redirect:"/pages/eec975/"},{path:"/02.v2/020.基础功能/040.通信/020.通信ipcRender.html",redirect:"/pages/eec975/"},{name:"v-4c3db813",path:"/pages/839e74/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4c3db813").then(t)}},{path:"/pages/839e74/index.html",redirect:"/pages/839e74/"},{path:"/02.v2/020.基础功能/050.数据库/010.json数据库.html",redirect:"/pages/839e74/"},{name:"v-41eef0dd",path:"/pages/879ef7/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-41eef0dd").then(t)}},{path:"/pages/879ef7/index.html",redirect:"/pages/879ef7/"},{path:"/02.v2/020.基础功能/050.数据库/020.sqlite数据库.html",redirect:"/pages/879ef7/"},{name:"v-01aae38e",path:"/pages/508c87/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-01aae38e").then(t)}},{path:"/pages/508c87/index.html",redirect:"/pages/508c87/"},{path:"/02.v2/020.基础功能/072.日志.html",redirect:"/pages/508c87/"},{name:"v-02bf0215",path:"/pages/45e36e/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-02bf0215").then(t)}},{path:"/pages/45e36e/index.html",redirect:"/pages/45e36e/"},{path:"/02.v2/020.基础功能/074.额外资源目录.html",redirect:"/pages/45e36e/"},{name:"v-5b248a07",path:"/pages/a9b338/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-5b248a07").then(t)}},{path:"/pages/a9b338/index.html",redirect:"/pages/a9b338/"},{path:"/02.v2/020.基础功能/076.调试.html",redirect:"/pages/a9b338/"},{name:"v-0d882400",path:"/pages/04a0ff/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-0d882400").then(t)}},{path:"/pages/04a0ff/index.html",redirect:"/pages/04a0ff/"},{path:"/02.v2/020.基础功能/078.脚本工具.html",redirect:"/pages/04a0ff/"},{name:"v-3f395710",path:"/pages/e85f92/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-3f395710").then(t)}},{path:"/pages/e85f92/index.html",redirect:"/pages/e85f92/"},{path:"/02.v2/020.基础功能/080.其它/010.dll使用.html",redirect:"/pages/e85f92/"},{name:"v-520fcb33",path:"/pages/b4410e/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-520fcb33").then(t)}},{path:"/pages/b4410e/index.html",redirect:"/pages/b4410e/"},{path:"/02.v2/020.基础功能/080.其它/020.调用第三方程序.html",redirect:"/pages/b4410e/"},{name:"v-a821d174",path:"/pages/95a09b/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-a821d174").then(t)}},{path:"/pages/95a09b/index.html",redirect:"/pages/95a09b/"},{path:"/02.v2/030.生成软件/010.构建.html",redirect:"/pages/95a09b/"},{name:"v-7d2b1e54",path:"/pages/280e92/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-7d2b1e54").then(t)}},{path:"/pages/280e92/index.html",redirect:"/pages/280e92/"},{path:"/02.v2/030.生成软件/020.代码加密.html",redirect:"/pages/280e92/"},{name:"v-6385ecc6",path:"/pages/50b8e9/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6385ecc6").then(t)}},{path:"/pages/50b8e9/index.html",redirect:"/pages/50b8e9/"},{path:"/02.v2/030.生成软件/030.图标修改.html",redirect:"/pages/50b8e9/"},{name:"v-6c8f570a",path:"/pages/5d7733/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6c8f570a").then(t)}},{path:"/pages/5d7733/index.html",redirect:"/pages/5d7733/"},{path:"/02.v2/040.升级/010.框架升级.html",redirect:"/pages/5d7733/"},{name:"v-2754fb3f",path:"/pages/0039b5/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2754fb3f").then(t)}},{path:"/pages/0039b5/index.html",redirect:"/pages/0039b5/"},{path:"/02.v2/040.升级/020.应用软件自动更新.html",redirect:"/pages/0039b5/"},{name:"v-aa8bc1d4",path:"/pages/85c531/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-aa8bc1d4").then(t)}},{path:"/pages/85c531/index.html",redirect:"/pages/85c531/"},{path:"/03.api/001.教程/001.使用说明.html",redirect:"/pages/85c531/"},{name:"v-576c4fe7",path:"/pages/1dbe35/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-576c4fe7").then(t)}},{path:"/pages/1dbe35/index.html",redirect:"/pages/1dbe35/"},{path:"/03.api/001.教程/002.第三方使用.html",redirect:"/pages/1dbe35/"},{name:"v-3e505182",path:"/pages/12884f/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-3e505182").then(t)}},{path:"/pages/12884f/index.html",redirect:"/pages/12884f/"},{path:"/03.api/002.API/005.addon/010.介绍.html",redirect:"/pages/12884f/"},{name:"v-2f3d57c5",path:"/pages/3b0795/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2f3d57c5").then(t)}},{path:"/pages/3b0795/index.html",redirect:"/pages/3b0795/"},{path:"/03.api/002.API/005.addon/030.window.html",redirect:"/pages/3b0795/"},{name:"v-465b447a",path:"/pages/369cb1/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-465b447a").then(t)}},{path:"/pages/369cb1/index.html",redirect:"/pages/369cb1/"},{path:"/03.api/002.API/010.bin.html",redirect:"/pages/369cb1/"},{name:"v-ad446a36",path:"/pages/24a0ab/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-ad446a36").then(t)}},{path:"/pages/24a0ab/index.html",redirect:"/pages/24a0ab/"},{path:"/03.api/002.API/015.config.html",redirect:"/pages/24a0ab/"},{name:"v-6bb0facd",path:"/pages/0517c4/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6bb0facd").then(t)}},{path:"/pages/0517c4/index.html",redirect:"/pages/0517c4/"},{path:"/03.api/002.API/020.const.html",redirect:"/pages/0517c4/"},{name:"v-ea2869d2",path:"/pages/3bd231/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-ea2869d2").then(t)}},{path:"/pages/3bd231/index.html",redirect:"/pages/3bd231/"},{path:"/03.api/002.API/025.const-channel.html",redirect:"/pages/3bd231/"},{name:"v-46878545",path:"/pages/33f926/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-46878545").then(t)}},{path:"/pages/33f926/index.html",redirect:"/pages/33f926/"},{path:"/03.api/002.API/030.controller.html",redirect:"/pages/33f926/"},{name:"v-3b3d45f6",path:"/pages/46466d/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-3b3d45f6").then(t)}},{path:"/pages/46466d/index.html",redirect:"/pages/46466d/"},{path:"/03.api/002.API/035.core.html",redirect:"/pages/46466d/"},{name:"v-6d0954b6",path:"/pages/f559b8/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6d0954b6").then(t)}},{path:"/pages/f559b8/index.html",redirect:"/pages/f559b8/"},{path:"/03.api/002.API/040.ee.html",redirect:"/pages/f559b8/"},{name:"v-15582085",path:"/pages/338aae/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-15582085").then(t)}},{path:"/pages/338aae/index.html",redirect:"/pages/338aae/"},{path:"/03.api/002.API/045.electron.html",redirect:"/pages/338aae/"},{name:"v-9db5bb36",path:"/pages/fc1e81/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-9db5bb36").then(t)}},{path:"/pages/fc1e81/index.html",redirect:"/pages/fc1e81/"},{path:"/03.api/002.API/046.electron-app.html",redirect:"/pages/fc1e81/"},{name:"v-1c66ce13",path:"/pages/ace333/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-1c66ce13").then(t)}},{path:"/pages/ace333/index.html",redirect:"/pages/ace333/"},{path:"/03.api/002.API/047.electron-window.html",redirect:"/pages/ace333/"},{name:"v-ff627a0a",path:"/pages/be2d90/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-ff627a0a").then(t)}},{path:"/pages/be2d90/index.html",redirect:"/pages/be2d90/"},{path:"/03.api/002.API/050.exception.html",redirect:"/pages/be2d90/"},{name:"v-25cf1a76",path:"/pages/1a0cf7/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-25cf1a76").then(t)}},{path:"/pages/1a0cf7/index.html",redirect:"/pages/1a0cf7/"},{path:"/03.api/002.API/055.httpclient.html",redirect:"/pages/1a0cf7/"},{name:"v-cb633736",path:"/pages/c6ede4/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-cb633736").then(t)}},{path:"/pages/c6ede4/index.html",redirect:"/pages/c6ede4/"},{path:"/03.api/002.API/060.jobs.html",redirect:"/pages/c6ede4/"},{name:"v-e4e3fbae",path:"/pages/cb31a1/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-e4e3fbae").then(t)}},{path:"/pages/cb31a1/index.html",redirect:"/pages/cb31a1/"},{path:"/03.api/002.API/061.jobs-childjob.html",redirect:"/pages/cb31a1/"},{name:"v-2cd68046",path:"/pages/f72716/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2cd68046").then(t)}},{path:"/pages/f72716/index.html",redirect:"/pages/f72716/"},{path:"/03.api/002.API/063.jobs-childpooljob.html",redirect:"/pages/f72716/"},{name:"v-5b4be836",path:"/pages/b57859/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-5b4be836").then(t)}},{path:"/pages/b57859/index.html",redirect:"/pages/b57859/"},{path:"/03.api/002.API/065.jobs-rendererjob.html",redirect:"/pages/b57859/"},{name:"v-3c69d965",path:"/pages/54c34e/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-3c69d965").then(t)}},{path:"/pages/54c34e/index.html",redirect:"/pages/54c34e/"},{path:"/03.api/002.API/070.loader.html",redirect:"/pages/54c34e/"},{name:"v-8ffb466a",path:"/pages/0cb46d/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-8ffb466a").then(t)}},{path:"/pages/0cb46d/index.html",redirect:"/pages/0cb46d/"},{path:"/03.api/002.API/075.log.html",redirect:"/pages/0cb46d/"},{name:"v-28761791",path:"/pages/7e527e/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-28761791").then(t)}},{path:"/pages/7e527e/index.html",redirect:"/pages/7e527e/"},{path:"/03.api/002.API/080.message.html",redirect:"/pages/7e527e/"},{name:"v-623c2036",path:"/pages/ed2d28/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-623c2036").then(t)}},{path:"/pages/ed2d28/index.html",redirect:"/pages/ed2d28/"},{path:"/03.api/002.API/081.message-childmessage.html",redirect:"/pages/ed2d28/"},{name:"v-ace1a136",path:"/pages/4b84f2/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-ace1a136").then(t)}},{path:"/pages/4b84f2/index.html",redirect:"/pages/4b84f2/"},{path:"/03.api/002.API/085.ps.html",redirect:"/pages/4b84f2/"},{name:"v-96c80576",path:"/pages/deaaeb/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-96c80576").then(t)}},{path:"/pages/deaaeb/index.html",redirect:"/pages/deaaeb/"},{path:"/03.api/002.API/090.services.html",redirect:"/pages/deaaeb/"},{name:"v-294c3845",path:"/pages/b33008/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-294c3845").then(t)}},{path:"/pages/b33008/index.html",redirect:"/pages/b33008/"},{path:"/03.api/002.API/095.socket.html",redirect:"/pages/b33008/"},{name:"v-33e567d2",path:"/pages/1e4caf/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-33e567d2").then(t)}},{path:"/pages/1e4caf/index.html",redirect:"/pages/1e4caf/"},{path:"/03.api/002.API/100.storage.html",redirect:"/pages/1e4caf/"},{name:"v-432b5acd",path:"/pages/abfcb0/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-432b5acd").then(t)}},{path:"/pages/abfcb0/index.html",redirect:"/pages/abfcb0/"},{path:"/03.api/002.API/105.tools.html",redirect:"/pages/abfcb0/"},{name:"v-2a4a7876",path:"/pages/4cc0ef/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2a4a7876").then(t)}},{path:"/pages/4cc0ef/index.html",redirect:"/pages/4cc0ef/"},{path:"/03.api/002.API/106.this-app/001.intro.html",redirect:"/pages/4cc0ef/"},{name:"v-2aada385",path:"/pages/ae545a/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2aada385").then(t)}},{path:"/pages/ae545a/index.html",redirect:"/pages/ae545a/"},{path:"/03.api/002.API/106.this-app/010.addon.html",redirect:"/pages/ae545a/"},{name:"v-4c8cb4fa",path:"/pages/d66b36/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4c8cb4fa").then(t)}},{path:"/pages/d66b36/index.html",redirect:"/pages/d66b36/"},{path:"/03.api/002.API/106.this-app/020.config.html",redirect:"/pages/d66b36/"},{name:"v-da23d6b6",path:"/pages/43c09b/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-da23d6b6").then(t)}},{path:"/pages/43c09b/index.html",redirect:"/pages/43c09b/"},{path:"/03.api/002.API/106.this-app/070.request.html",redirect:"/pages/43c09b/"},{name:"v-0eece9f9",path:"/pages/d04c0c/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-0eece9f9").then(t)}},{path:"/pages/d04c0c/index.html",redirect:"/pages/d04c0c/"},{path:"/03.api/002.API/106.this-app/080.response.html",redirect:"/pages/d04c0c/"},{name:"v-07309b25",path:"/pages/5f6665/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-07309b25").then(t)}},{path:"/pages/5f6665/index.html",redirect:"/pages/5f6665/"},{path:"/03.api/002.API/106.this-app/090.service.html",redirect:"/pages/5f6665/"},{name:"v-58b797ed",path:"/pages/e0ef81/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-58b797ed").then(t)}},{path:"/pages/e0ef81/index.html",redirect:"/pages/e0ef81/"},{path:"/03.api/002.API/110.utils.html",redirect:"/pages/e0ef81/"},{name:"v-bed3c2f6",path:"/pages/fbf5b7/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-bed3c2f6").then(t)}},{path:"/pages/fbf5b7/index.html",redirect:"/pages/fbf5b7/"},{path:"/03.api/002.API/111.utils-helper.html",redirect:"/pages/fbf5b7/"},{name:"v-b47cce36",path:"/pages/70fa2b/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-b47cce36").then(t)}},{path:"/pages/70fa2b/index.html",redirect:"/pages/70fa2b/"},{path:"/03.api/002.API/112.utils-is.html",redirect:"/pages/70fa2b/"},{name:"v-87791df6",path:"/pages/44cac6/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-87791df6").then(t)}},{path:"/pages/44cac6/index.html",redirect:"/pages/44cac6/"},{path:"/03.api/002.API/113.utils-json.html",redirect:"/pages/44cac6/"},{name:"v-4dbd4885",path:"/pages/b7f46d/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4dbd4885").then(t)}},{path:"/pages/b7f46d/index.html",redirect:"/pages/b7f46d/"},{path:"/03.api/002.API/114.utils-time.html",redirect:"/pages/b7f46d/"},{name:"v-c0b707b6",path:"/pages/451022/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-c0b707b6").then(t)}},{path:"/pages/451022/index.html",redirect:"/pages/451022/"},{path:"/03.api/002.API/115.utils-ip.html",redirect:"/pages/451022/"},{name:"v-88fc4b76",path:"/pages/001df6/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-88fc4b76").then(t)}},{path:"/pages/001df6/index.html",redirect:"/pages/001df6/"},{path:"/03.api/002.API/116.utils-port.html",redirect:"/pages/001df6/"},{name:"v-29741085",path:"/pages/7f6033/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-29741085").then(t)}},{path:"/pages/7f6033/index.html",redirect:"/pages/7f6033/"},{path:"/03.api/002.API/999.oldUtils.html",redirect:"/pages/7f6033/"},{name:"v-a1619a84",path:"/pages/eadf46/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-a1619a84").then(t)}},{path:"/pages/eadf46/index.html",redirect:"/pages/eadf46/"},{path:"/04.其它/010.案例.html",redirect:"/pages/eadf46/"},{name:"v-fbfd6272",path:"/pages/c2720e/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-fbfd6272").then(t)}},{path:"/pages/c2720e/index.html",redirect:"/pages/c2720e/"},{path:"/04.其它/011.交流.html",redirect:"/pages/c2720e/"},{name:"v-0f3afd48",path:"/pages/1f0f51/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-0f3afd48").then(t)}},{path:"/pages/1f0f51/index.html",redirect:"/pages/1f0f51/"},{path:"/05.知识点/010.nvm.html",redirect:"/pages/1f0f51/"},{name:"v-7cc1ad8e",path:"/pages/cecb5a/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-7cc1ad8e").then(t)}},{path:"/pages/cecb5a/index.html",redirect:"/pages/cecb5a/"},{path:"/05.知识点/020.macos/010.安装python.html",redirect:"/pages/cecb5a/"},{name:"v-59a78690",path:"/pages/a6916d/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-59a78690").then(t)}},{path:"/pages/a6916d/index.html",redirect:"/pages/a6916d/"},{path:"/05.知识点/020.macos/020.Mac显示Library库.html",redirect:"/pages/a6916d/"},{name:"v-ccf099a6",path:"/pages/afbd71/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-ccf099a6").then(t)}},{path:"/pages/afbd71/index.html",redirect:"/pages/afbd71/"},{path:"/05.知识点/030.https/010.ssl证书.html",redirect:"/pages/afbd71/"},{name:"v-ae509a02",path:"/pages/39b969/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-ae509a02").then(t)}},{path:"/pages/39b969/index.html",redirect:"/pages/39b969/"},{path:"/05.知识点/040.版本关系/001.v1.html",redirect:"/pages/39b969/"},{name:"v-67569a3f",path:"/pages/52ba2e/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-67569a3f").then(t)}},{path:"/pages/52ba2e/index.html",redirect:"/pages/52ba2e/"},{path:"/05.知识点/040.版本关系/002.v2.html",redirect:"/pages/52ba2e/"},{name:"v-25d5817f",path:"/pages/8e1938/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-25d5817f").then(t)}},{path:"/pages/8e1938/index.html",redirect:"/pages/8e1938/"},{path:"/05.知识点/040.版本关系/003.v3.html",redirect:"/pages/8e1938/"},{name:"v-37572e82",path:"/pages/4c62ae/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-37572e82").then(t)}},{path:"/pages/4c62ae/index.html",redirect:"/pages/4c62ae/"},{path:"/05.知识点/040.版本关系/004.v4.html",redirect:"/pages/4c62ae/"},{name:"v-ba596002",path:"/pages/9ad977/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-ba596002").then(t)}},{path:"/pages/9ad977/index.html",redirect:"/pages/9ad977/"},{path:"/05.知识点/040.版本关系/005.v5.html",redirect:"/pages/9ad977/"},{name:"v-6152373f",path:"/pages/b5bb02/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6152373f").then(t)}},{path:"/pages/b5bb02/index.html",redirect:"/pages/b5bb02/"},{path:"/05.知识点/040.版本关系/006.v6.html",redirect:"/pages/b5bb02/"},{name:"v-1fd11e7f",path:"/pages/81c439/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-1fd11e7f").then(t)}},{path:"/pages/81c439/index.html",redirect:"/pages/81c439/"},{path:"/05.知识点/040.版本关系/007.v7.html",redirect:"/pages/81c439/"},{name:"v-435ff482",path:"/pages/a96045/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-435ff482").then(t)}},{path:"/pages/a96045/index.html",redirect:"/pages/a96045/"},{path:"/05.知识点/040.版本关系/008.v8.html",redirect:"/pages/a96045/"},{name:"v-c6622602",path:"/pages/c83c9f/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-c6622602").then(t)}},{path:"/pages/c83c9f/index.html",redirect:"/pages/c83c9f/"},{path:"/05.知识点/040.版本关系/009.v9.html",redirect:"/pages/c83c9f/"},{name:"v-91f20eb6",path:"/pages/1d0701/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-91f20eb6").then(t)}},{path:"/pages/1d0701/index.html",redirect:"/pages/1d0701/"},{path:"/05.知识点/040.版本关系/010.v10.html",redirect:"/pages/1d0701/"},{name:"v-7bb863e5",path:"/pages/964526/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-7bb863e5").then(t)}},{path:"/pages/964526/index.html",redirect:"/pages/964526/"},{path:"/05.知识点/040.版本关系/011.v11.html",redirect:"/pages/964526/"},{name:"v-4069cf25",path:"/pages/c5cca4/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4069cf25").then(t)}},{path:"/pages/c5cca4/index.html",redirect:"/pages/c5cca4/"},{path:"/05.知识点/040.版本关系/012.v12.html",redirect:"/pages/c5cca4/"},{name:"v-051b3a65",path:"/pages/5638a8/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-051b3a65").then(t)}},{path:"/pages/5638a8/index.html",redirect:"/pages/5638a8/"},{path:"/05.知识点/040.版本关系/013.v13.html",redirect:"/pages/5638a8/"},{name:"v-6c66b4b6",path:"/pages/f50391/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6c66b4b6").then(t)}},{path:"/pages/f50391/index.html",redirect:"/pages/f50391/"},{path:"/05.知识点/040.版本关系/014.v14.html",redirect:"/pages/f50391/"},{name:"v-e303de36",path:"/pages/e6b75d/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-e303de36").then(t)}},{path:"/pages/e6b75d/index.html",redirect:"/pages/e6b75d/"},{path:"/05.知识点/040.版本关系/015.v15.html",redirect:"/pages/e6b75d/"},{name:"v-532f7c25",path:"/pages/e08a17/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-532f7c25").then(t)}},{path:"/pages/e08a17/index.html",redirect:"/pages/e08a17/"},{path:"/05.知识点/040.版本关系/016.v16.html",redirect:"/pages/e08a17/"},{name:"v-17e0e765",path:"/pages/631d92/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-17e0e765").then(t)}},{path:"/pages/631d92/index.html",redirect:"/pages/631d92/"},{path:"/05.知识点/040.版本关系/017.v17.html",redirect:"/pages/631d92/"},{name:"v-46db5ab6",path:"/pages/e75f83/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-46db5ab6").then(t)}},{path:"/pages/e75f83/index.html",redirect:"/pages/e75f83/"},{path:"/05.知识点/040.版本关系/018.v18.html",redirect:"/pages/e75f83/"},{name:"v-bd788436",path:"/pages/41624c/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-bd788436").then(t)}},{path:"/pages/41624c/index.html",redirect:"/pages/41624c/"},{path:"/05.知识点/040.版本关系/019.v19.html",redirect:"/pages/41624c/"},{name:"v-eefa1536",path:"/pages/d93161/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-eefa1536").then(t)}},{path:"/pages/d93161/index.html",redirect:"/pages/d93161/"},{path:"/05.知识点/040.版本关系/020.v20.html",redirect:"/pages/d93161/"},{name:"v-4d3460a5",path:"/pages/4fce33/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4d3460a5").then(t)}},{path:"/pages/4fce33/index.html",redirect:"/pages/4fce33/"},{path:"/05.知识点/040.版本关系/021.v21.html",redirect:"/pages/4fce33/"},{name:"v-8109bfa4",path:"/pages/9365a8/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-8109bfa4").then(t)}},{path:"/pages/9365a8/index.html",redirect:"/pages/9365a8/"},{path:"/06.支持/015.外包.html",redirect:"/pages/9365a8/"},{name:"v-7248d847",path:"/pages/cce31f/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-7248d847").then(t)}},{path:"/pages/cce31f/index.html",redirect:"/pages/cce31f/"},{path:"/06.支持/018.个人赞助.html",redirect:"/pages/cce31f/"},{name:"v-a2020f60",path:"/pages/fe2b29/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-a2020f60").then(t)}},{path:"/pages/fe2b29/index.html",redirect:"/pages/fe2b29/"},{path:"/06.支持/020.成为赞助商.html",redirect:"/pages/fe2b29/"},{name:"v-79d8519c",path:"/pages/132909/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-79d8519c").then(t)}},{path:"/pages/132909/index.html",redirect:"/pages/132909/"},{path:"/07.功能/01.教程/01.介绍.html",redirect:"/pages/132909/"},{name:"v-4db28903",path:"/pages/bb3659/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4db28903").then(t)}},{path:"/pages/bb3659/index.html",redirect:"/pages/bb3659/"},{path:"/07.功能/02.框架/01.通信.html",redirect:"/pages/bb3659/"},{name:"v-f1bc02ba",path:"/pages/67c56b/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-f1bc02ba").then(t)}},{path:"/pages/67c56b/index.html",redirect:"/pages/67c56b/"},{path:"/07.功能/02.框架/02.http服务.html",redirect:"/pages/67c56b/"},{name:"v-a7b481ba",path:"/pages/3703d6/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-a7b481ba").then(t)}},{path:"/pages/3703d6/index.html",redirect:"/pages/3703d6/"},{path:"/07.功能/02.框架/03.socket服务.html",redirect:"/pages/3703d6/"},{name:"v-2ec19c8e",path:"/pages/f5a534/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2ec19c8e").then(t)}},{path:"/pages/f5a534/index.html",redirect:"/pages/f5a534/"},{path:"/07.功能/02.框架/04.json数据库.html",redirect:"/pages/f5a534/"},{name:"v-cda616d8",path:"/pages/ed4289/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-cda616d8").then(t)}},{path:"/pages/ed4289/index.html",redirect:"/pages/ed4289/"},{path:"/07.功能/02.框架/05.sqlite数据库.html",redirect:"/pages/ed4289/"},{name:"v-16b2c9d1",path:"/pages/98c38b/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-16b2c9d1").then(t)}},{path:"/pages/98c38b/index.html",redirect:"/pages/98c38b/"},{path:"/07.功能/02.框架/06.任务.html",redirect:"/pages/98c38b/"},{name:"v-1769b69b",path:"/pages/500e33/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-1769b69b").then(t)}},{path:"/pages/500e33/index.html",redirect:"/pages/500e33/"},{path:"/07.功能/02.框架/07.自动更新.html",redirect:"/pages/500e33/"},{name:"v-2f8b72a4",path:"/pages/d5125f/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2f8b72a4").then(t)}},{path:"/pages/d5125f/index.html",redirect:"/pages/d5125f/"},{path:"/07.功能/02.框架/08.软件调用.html",redirect:"/pages/d5125f/"},{name:"v-518abb43",path:"/pages/56f285/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-518abb43").then(t)}},{path:"/pages/56f285/index.html",redirect:"/pages/56f285/"},{path:"/07.功能/02.框架/09.Java服务.html",redirect:"/pages/56f285/"},{name:"v-7cf65ffd",path:"/pages/b44b48/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-7cf65ffd").then(t)}},{path:"/pages/b44b48/index.html",redirect:"/pages/b44b48/"},{path:"/07.功能/03.操作系统/01.文件.html",redirect:"/pages/b44b48/"},{name:"v-0d673e87",path:"/pages/7fd8ae/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-0d673e87").then(t)}},{path:"/pages/7fd8ae/index.html",redirect:"/pages/7fd8ae/"},{path:"/07.功能/03.操作系统/02.视图.html",redirect:"/pages/7fd8ae/"},{name:"v-95598034",path:"/pages/cb40d7/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-95598034").then(t)}},{path:"/pages/cb40d7/index.html",redirect:"/pages/cb40d7/"},{path:"/07.功能/03.操作系统/03.窗口.html",redirect:"/pages/cb40d7/"},{name:"v-e8f6dcc8",path:"/pages/58d5cb/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-e8f6dcc8").then(t)}},{path:"/pages/58d5cb/index.html",redirect:"/pages/58d5cb/"},{path:"/07.功能/03.操作系统/04.桌面通知.html",redirect:"/pages/58d5cb/"},{name:"v-2dd55657",path:"/pages/e1061b/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2dd55657").then(t)}},{path:"/pages/e1061b/index.html",redirect:"/pages/e1061b/"},{path:"/07.功能/03.操作系统/05.电源监控.html",redirect:"/pages/e1061b/"},{name:"v-75f026ec",path:"/pages/e8890e/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-75f026ec").then(t)}},{path:"/pages/e8890e/index.html",redirect:"/pages/e8890e/"},{path:"/07.功能/03.操作系统/06.屏幕信息.html",redirect:"/pages/e8890e/"},{name:"v-26aa7218",path:"/pages/30f6b3/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-26aa7218").then(t)}},{path:"/pages/30f6b3/index.html",redirect:"/pages/30f6b3/"},{path:"/07.功能/03.操作系统/07.系统主题.html",redirect:"/pages/30f6b3/"},{name:"v-1cb749f7",path:"/pages/d144d4/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-1cb749f7").then(t)}},{path:"/pages/d144d4/index.html",redirect:"/pages/d144d4/"},{path:"/07.功能/04.特效/01.视频播放器.html",redirect:"/pages/d144d4/"},{name:"v-67db9c88",path:"/pages/75c776/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-67db9c88").then(t)}},{path:"/pages/75c776/index.html",redirect:"/pages/75c776/"},{path:"/07.功能/05.硬件/01.打印机.html",redirect:"/pages/75c776/"},{name:"v-46cea4e5",path:"/blog/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-46cea4e5").then(t)}},{path:"/blog/index.html",redirect:"/blog/"},{path:"/@pages/archivesPage.html",redirect:"/blog/"},{name:"v-fa41ba04",path:"/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-fa41ba04").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-6e84f442",path:"/pages/4c19a1/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-6e84f442").then(t)}},{path:"/pages/4c19a1/index.html",redirect:"/pages/4c19a1/"},{path:"/03.api/002.API/106.this-app/060.logger.html",redirect:"/pages/4c19a1/"},{name:"v-2cba8c46",path:"/pages/a4058f/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-2cba8c46").then(t)}},{path:"/pages/a4058f/index.html",redirect:"/pages/a4058f/"},{path:"/03.api/002.API/106.this-app/040.httpclient.html",redirect:"/pages/a4058f/"},{name:"v-4addcf41",path:"/pages/5f58fe/",component:il,beforeEnter:(n,e,t)=>{ds("Layout","v-4addcf41").then(t)}},{path:"/pages/5f58fe/index.html",redirect:"/pages/5f58fe/"},{path:"/03.api/002.API/106.this-app/030.electron.html",redirect:"/pages/5f58fe/"},{path:"*",component:il}],ll={title:"electron-egg",description:"一个入门简单、跨平台、企业级桌面软件开发框架",base:"/",headTags:[["link",{rel:"icon",href:"/img/favicon.ico"}],["meta",{name:"keywords",content:"electron-egg,ElectronEgg,EE,ee,electron,framework,electron-egg教程,electron-egg架构,electron-egg控制台,egg"}],["meta",{name:"theme-color",content:"#fff"}],["script",{crossorigin:"anonymous",async:!0,src:"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2708221248260848"}],["script",{async:!0,src:"https://cdn.wwads.cn/js/makemoney.js",type:"text/javascript"}],["script",{async:!0,src:"https://www.googletagmanager.com/gtag/js?id=G-DBQJBD61NC",type:"text/javascript"}],["script",{},"\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag('js', new Date());\n\n    gtag('config', 'G-DBQJBD61NC');\n  "],["script",{},'\n    // 万维广告“禁止”广告拦截\n    // function called if wwads is blocked\n    // https://github.com/bytegravity/whitelist-wwads\n    function ABDetected() {\n      var adBlockDetected_div = document.createElement("div");\n      document.body.appendChild(adBlockDetected_div);\n      var navbar = document.querySelector(".navbar");\n      navbar.style.cssText="transition:top 300ms;top:33px";\n      adBlockDetected_div.style.cssText = "position: fixed; top: 0; left: 0; width: 100%; background: #E01E5A; color: #fff; z-index: 9999999999; font-size: 14px; text-align: center; line-height: 1.5; font-weight: bold; padding-top: 6px; padding-bottom: 6px;";\n      adBlockDetected_div.innerHTML = "我们的广告服务商 <a style=\'color:#fff;text-decoration:underline\' target=\'_blank\' href=\'https://wwads.cn/page/end-user-privacy\'>并不跟踪您的隐私</a>，为了支持本站的长期运营，请将我们的网站 <a style=\'color: #fff;text-decoration:underline\' target=\'_blank\' href=\'https://wwads.cn/page/whitelist-wwads\'>加入广告拦截器的白名单</a>。";\n      document.getElementsByTagName("body")[0].appendChild(adBlockDetected_div);\n      // add a close button to the right side of the div\n      var adBlockDetected_close = document.createElement("div");\n      adBlockDetected_close.style.cssText = "position: absolute; top: 0; right: 10px; width: 30px; height: 30px; background: #E01E5A; color: #fff; z-index: 9999999999; line-height: 30px; cursor: pointer;";\n      adBlockDetected_close.innerHTML = "×";\n      adBlockDetected_div.appendChild(adBlockDetected_close);\n      // add a click event to the close button\n      adBlockDetected_close.onclick = function() {\n      this.parentNode.parentNode.removeChild(this.parentNode);\n      navbar.style.cssText="transition:top 300ms;top:0";\n      };\n    }\n\n    function vote() {\n      var voteDetected_div = document.createElement("div");\n      voteDetected_div.style.cssText = "position: absolute; top: 0; left: 0; width: 100%; background: #7bbfea; color: #fff; z-index: 9999999999; font-size: 14px; text-align: center; line-height: 1.5; font-weight: bold; padding-top: 6px; padding-bottom: 6px;";\n      voteDetected_div.innerHTML = "<a style=\'color:#fff;text-decoration:underline\' target=\'_blank\' href=\'xxxxxx\'>Easy-Es 正在参与“2022年度 OSC 中国开源项目”评选，请为我们投上宝贵的一票，谢谢！</a>";\n      document.getElementsByTagName("body")[0].appendChild(voteDetected_div);\n      voteDetected_div.onclick = function() {\n        this.remove();\n      };\n    }\n\n    function docReady(t) {\n      "complete" === document.readyState ||\n      "interactive" === document.readyState\n        ? setTimeout(t, 1)\n        : document.addEventListener("DOMContentLoaded", t);\n    }\n\n    //check if wwads\' fire function was blocked after document is ready with 3s timeout (waiting the ad loading)\n    docReady(function () {\n      setTimeout(function () {\n        if( window._AdBlockInit === undefined ){\n            ABDetected();\n        }\n      }, 3000);\n    });\n  ']],pages:[{title:"介绍",frontmatter:{title:"介绍",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/8ef798/",article:!1},regularPath:"/01.v3/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/010.%E7%AE%80%E4%BB%8B.html",relativePath:"01.v3/010.快速入门/010.简介.md",key:"v-4c0345b0",path:"/pages/8ef798/",headers:[{level:3,title:"为什么使用",slug:"为什么使用",normalizedTitle:"为什么使用",charIndex:85},{level:3,title:"值得信赖",slug:"值得信赖",normalizedTitle:"值得信赖",charIndex:188},{level:3,title:"愿景",slug:"愿景",normalizedTitle:"愿景",charIndex:199},{level:3,title:"简单",slug:"简单",normalizedTitle:"简单",charIndex:49},{level:3,title:"开源",slug:"开源",normalizedTitle:"开源",charIndex:246},{level:2,title:"使用场景",slug:"使用场景",normalizedTitle:"使用场景",charIndex:358},{level:3,title:"常规桌面软件",slug:"常规桌面软件",normalizedTitle:"常规桌面软件",charIndex:367},{level:4,title:"Windows - demo",slug:"windows-demo",normalizedTitle:"windows - demo",charIndex:423},{level:4,title:"MacOS - demo",slug:"macos-demo",normalizedTitle:"macos - demo",charIndex:443},{level:4,title:"Linux - demo - 国产UOS、Deepin",slug:"linux-demo-国产uos、deepin",normalizedTitle:"linux - demo - 国产uos、deepin",charIndex:461},{level:4,title:"Linux - demo - ubuntu",slug:"linux-demo-ubuntu",normalizedTitle:"linux - demo - ubuntu",charIndex:494}],headersStr:"为什么使用 值得信赖 愿景 简单 开源 使用场景 常规桌面软件 Windows - demo MacOS - demo Linux - demo - 国产UOS、Deepin Linux - demo - ubuntu",content:"提示\n\n🎉🎉🎉 electron-egg v3 发布 ! 🎉🎉🎉\n\n\n\n\n\n\n一个入门简单、跨平台、企业级桌面软件开发框架\n\n框架下载量突破10万+\n\n\n# 为什么使用\n\n桌面软件（办公方向、 个人工具），仍然是未来十几年PC端需求之一，提高工作效率\n\nElectron 技术是流行趋势，抖音、B站、QQ、百度翻译、阿里网盘、迅雷、有道云笔记......\n\n\n# 值得信赖\n\n\n\n\n# 愿景\n\n所有开发者都能学会桌面软件研发\n\n\n# 简单\n\n只需懂 JavaScript\n\n\n# 开源\n\nGitee https://gitee.com/dromara/electron-egg 3300+\n\nGithub https://github.com/dromara/electron-egg 900+\n\n\n# 使用场景\n\n\n# 常规桌面软件\n\n支持Windows、MacOS、Linux操作系统；并提供demo，方便开发者快速入门。\n\n# Windows - demo\n\n\n\n# MacOS - demo\n\n\n\n# Linux - demo - 国产UOS、Deepin\n\n\n\n# Linux - demo - ubuntu\n\n",normalizedContent:"提示\n\n🎉🎉🎉 electron-egg v3 发布 ! 🎉🎉🎉\n\n\n\n\n\n\n一个入门简单、跨平台、企业级桌面软件开发框架\n\n框架下载量突破10万+\n\n\n# 为什么使用\n\n桌面软件（办公方向、 个人工具），仍然是未来十几年pc端需求之一，提高工作效率\n\nelectron 技术是流行趋势，抖音、b站、qq、百度翻译、阿里网盘、迅雷、有道云笔记......\n\n\n# 值得信赖\n\n\n\n\n# 愿景\n\n所有开发者都能学会桌面软件研发\n\n\n# 简单\n\n只需懂 javascript\n\n\n# 开源\n\ngitee https://gitee.com/dromara/electron-egg 3300+\n\ngithub https://github.com/dromara/electron-egg 900+\n\n\n# 使用场景\n\n\n# 常规桌面软件\n\n支持windows、macos、linux操作系统；并提供demo，方便开发者快速入门。\n\n# windows - demo\n\n\n\n# macos - demo\n\n\n\n# linux - demo - 国产uos、deepin\n\n\n\n# linux - demo - ubuntu\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"EE框架是什么？",frontmatter:{title:"EE框架是什么？",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/4b9629/",article:!1},regularPath:"/01.v3/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/020.electron-egg%E6%98%AF%E4%BB%80%E4%B9%88.html",relativePath:"01.v3/010.快速入门/020.electron-egg是什么.md",key:"v-6af08e1e",path:"/pages/4b9629/",headers:[{level:3,title:"一句话介绍",slug:"一句话介绍",normalizedTitle:"一句话介绍",charIndex:2}],headersStr:"一句话介绍",content:"# 一句话介绍\n\nelectron-egg是一个业务框架。\n\n就好比 Spring 之于 JAVA，Thinkphp 之于 PHP，Nuxt.js 之于 VUE ......\n\nelectron提供了基础的函数和api，当你写项目的时候，业务和代码工程化是需要自己实现的，electron-egg就提供了这个工程化能力。",normalizedContent:"# 一句话介绍\n\nelectron-egg是一个业务框架。\n\n就好比 spring 之于 java，thinkphp 之于 php，nuxt.js 之于 vue ......\n\nelectron提供了基础的函数和api，当你写项目的时候，业务和代码工程化是需要自己实现的，electron-egg就提供了这个工程化能力。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"安装",frontmatter:{title:"安装",date:"2023-06-14T11:12:19.000Z",permalink:"/pages/e64ff6/",article:!1},regularPath:"/01.v3/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/030.%E5%AE%89%E8%A3%85.html",relativePath:"01.v3/010.快速入门/030.安装.md",key:"v-19994cbb",path:"/pages/e64ff6/",headers:[{level:3,title:"准备",slug:"准备",normalizedTitle:"准备",charIndex:2},{level:3,title:"下载",slug:"下载",normalizedTitle:"下载",charIndex:51},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:42},{level:3,title:"Demo",slug:"demo",normalizedTitle:"demo",charIndex:881},{level:3,title:"生成软件",slug:"生成软件",normalizedTitle:"生成软件",charIndex:926},{level:3,title:"window 7 系统",slug:"window-7-系统",normalizedTitle:"window 7 系统",charIndex:948}],headersStr:"准备 下载 安装 Demo 生成软件 window 7 系统",content:"# 准备\n\n * 推荐 node.js >= 16.20.0\n * node.js 安装教程\n\n\n# 下载\n\n# gitee\ngit clone https://gitee.com/dromara/electron-egg.git\n\n# github\ngit clone https://github.com/dromara/electron-egg.git\n\n\n\n# 安装\n\n有问题先看文档：常见问题\n\n# 设置国内镜像源(加速)\nnpm config set registry=https://registry.npmmirror.com\nnpm config set disturl=https://registry.npmmirror.com/-/binary/node\n\n#如果下载electron慢，配置如下（或者挂个VPN）\nnpm config set electron_mirror=https://registry.npmmirror.com/-/binary/electron/\n\n# 进入目录 ./electron-egg/\nnpm install\n\n# 如果还是提示 electron 没安装，进入 node_modules/electron 目录下，再npm install\n\n\n# 解决幽灵依赖\nnpm config set node-linker hoisted\n\n# 设置国内镜像源(加速)\nnpm config set registry=https://registry.npmmirror.com\nnpm config set disturl=https://registry.npmmirror.com/-/binary/node\n\n# 如果下载electron慢，配置如下\nnpm config set electron_mirror=https://registry.npmmirror.com/-/binary/electron/\n\n# 进入目录 ./electron-egg/\npnpm install\n\n\n\n# Demo\n\n框架集成了许多功能demo示例，方便开发者快速入门。查看demo文档\n\n\n# 生成软件\n\n见教程：构建可执行程序\n\n\n# window 7 系统\n\n微软已经停止对 win7系统支持。需要支持win7的，请使用以下开发环境\n\nelectron <= 12版本\nnode.js <= 12版本\nelectron-builder <= 22.10.5\n",normalizedContent:"# 准备\n\n * 推荐 node.js >= 16.20.0\n * node.js 安装教程\n\n\n# 下载\n\n# gitee\ngit clone https://gitee.com/dromara/electron-egg.git\n\n# github\ngit clone https://github.com/dromara/electron-egg.git\n\n\n\n# 安装\n\n有问题先看文档：常见问题\n\n# 设置国内镜像源(加速)\nnpm config set registry=https://registry.npmmirror.com\nnpm config set disturl=https://registry.npmmirror.com/-/binary/node\n\n#如果下载electron慢，配置如下（或者挂个vpn）\nnpm config set electron_mirror=https://registry.npmmirror.com/-/binary/electron/\n\n# 进入目录 ./electron-egg/\nnpm install\n\n# 如果还是提示 electron 没安装，进入 node_modules/electron 目录下，再npm install\n\n\n# 解决幽灵依赖\nnpm config set node-linker hoisted\n\n# 设置国内镜像源(加速)\nnpm config set registry=https://registry.npmmirror.com\nnpm config set disturl=https://registry.npmmirror.com/-/binary/node\n\n# 如果下载electron慢，配置如下\nnpm config set electron_mirror=https://registry.npmmirror.com/-/binary/electron/\n\n# 进入目录 ./electron-egg/\npnpm install\n\n\n\n# demo\n\n框架集成了许多功能demo示例，方便开发者快速入门。查看demo文档\n\n\n# 生成软件\n\n见教程：构建可执行程序\n\n\n# window 7 系统\n\n微软已经停止对 win7系统支持。需要支持win7的，请使用以下开发环境\n\nelectron <= 12版本\nnode.js <= 12版本\nelectron-builder <= 22.10.5\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"第三方使用",frontmatter:{title:"第三方使用",date:"2023-05-25T11:12:19.000Z",article:!1,permalink:"/pages/089f32/"},regularPath:"/01.v3/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/031.%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BD%BF%E7%94%A8.html",relativePath:"01.v3/010.快速入门/031.第三方使用.md",key:"v-4651cac4",path:"/pages/089f32/",headers:[{level:3,title:"作为模块使用",slug:"作为模块使用",normalizedTitle:"作为模块使用",charIndex:2},{level:3,title:"安装 ee-core",slug:"安装-ee-core",normalizedTitle:"安装 ee-core",charIndex:43},{level:3,title:"项目中使用",slug:"项目中使用",normalizedTitle:"项目中使用",charIndex:142},{level:3,title:"更多API",slug:"更多api",normalizedTitle:"更多api",charIndex:311},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:330}],headersStr:"作为模块使用 安装 ee-core 项目中使用 更多API 示例",content:"# 作为模块使用\n\n如果您不想使用electorn-egg框架，但想使用它的API，只安装 ee-core 库即可。\n\n\n# 安装 ee-core\n\n> ee-core: v2.2.0\n\nnpm install ee-core\n\n\npnpm install ee-core\n\n\n\n# 项目中使用\n\n在您的项目入口文件，如 main.js中，添加如下代码：\n\nconst { ElectronEgg } = require('ee-core');\n\n// 以 'module' 模块方式使用 \nnew ElectronEgg('module');\n\n\n这样您就可以使用ee-core的提供的 100+ API 了。\n\n\n# 更多API\n\nAPI使用教程\n\n\n# 示例\n\ntest.js\n\nconst Log = require('ee-core/log');\nconst Ps = require('ee-core/ps');\nconst HttpClient = require('ee-core/httpclient');\nconst Storage = require('ee-core/storage');\nconst Utils = require('ee-core/utils');\n\nconst Test = {\n\n  async hello() {\n    Log.info('[log] hello ee-core');\n\n    const hc = new HttpClient();\n    const url = \"https://api.wrdan.com/ip\";\n    const options = {\n      method: 'GET',\n      data: {\n        url: 'https://www.baidu.com',\n      },\n      dataType: 'json',\n      timeout: 15000,  \n    };\n    const result = await hc.request(url, options);\n    console.log('hc.request:', result);\n\n    console.log('Ps.isMain:', Ps.isMain());\n    console.log('Ps.getHomeDir:', Ps.getHomeDir());\n    console.log('Ps.getExecDir:', Ps.getExecDir());\n \n    console.log('Utils.machineIdSync:', Utils.machineIdSync());\n\n    this.test();\n  },\n  test() {\n    const demoDB = Storage.connection('demo');  \n    const key = 'test_data';\n    if (!demoDB.db.has(key).value()) {\n      demoDB.db.set(key, []).write();\n    }\n    const data = demoDB.db\n    .get(key)\n    .push({name: 'gsx', age:21})\n    .write();\n    return data;\n  }\n}\n\nmodule.exports=Test;\n",normalizedContent:"# 作为模块使用\n\n如果您不想使用electorn-egg框架，但想使用它的api，只安装 ee-core 库即可。\n\n\n# 安装 ee-core\n\n> ee-core: v2.2.0\n\nnpm install ee-core\n\n\npnpm install ee-core\n\n\n\n# 项目中使用\n\n在您的项目入口文件，如 main.js中，添加如下代码：\n\nconst { electronegg } = require('ee-core');\n\n// 以 'module' 模块方式使用 \nnew electronegg('module');\n\n\n这样您就可以使用ee-core的提供的 100+ api 了。\n\n\n# 更多api\n\napi使用教程\n\n\n# 示例\n\ntest.js\n\nconst log = require('ee-core/log');\nconst ps = require('ee-core/ps');\nconst httpclient = require('ee-core/httpclient');\nconst storage = require('ee-core/storage');\nconst utils = require('ee-core/utils');\n\nconst test = {\n\n  async hello() {\n    log.info('[log] hello ee-core');\n\n    const hc = new httpclient();\n    const url = \"https://api.wrdan.com/ip\";\n    const options = {\n      method: 'get',\n      data: {\n        url: 'https://www.baidu.com',\n      },\n      datatype: 'json',\n      timeout: 15000,  \n    };\n    const result = await hc.request(url, options);\n    console.log('hc.request:', result);\n\n    console.log('ps.ismain:', ps.ismain());\n    console.log('ps.gethomedir:', ps.gethomedir());\n    console.log('ps.getexecdir:', ps.getexecdir());\n \n    console.log('utils.machineidsync:', utils.machineidsync());\n\n    this.test();\n  },\n  test() {\n    const demodb = storage.connection('demo');  \n    const key = 'test_data';\n    if (!demodb.db.has(key).value()) {\n      demodb.db.set(key, []).write();\n    }\n    const data = demodb.db\n    .get(key)\n    .push({name: 'gsx', age:21})\n    .write();\n    return data;\n  }\n}\n\nmodule.exports=test;\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"快速开始",frontmatter:{title:"快速开始",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/a28da5/",article:!1},regularPath:"/01.v3/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/040.%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html",relativePath:"01.v3/010.快速入门/040.快速开始.md",key:"v-0fe10b14",path:"/pages/a28da5/",headers:[{level:3,title:"框架架构",slug:"框架架构",normalizedTitle:"框架架构",charIndex:2},{level:3,title:"v3 版本",slug:"v3-版本",normalizedTitle:"v3 版本",charIndex:11},{level:3,title:"v2 版本",slug:"v2-版本",normalizedTitle:"v2 版本",charIndex:72},{level:3,title:"进程",slug:"进程",normalizedTitle:"进程",charIndex:21},{level:3,title:"通信",slug:"通信",normalizedTitle:"通信",charIndex:173},{level:3,title:"本地存储",slug:"本地存储",normalizedTitle:"本地存储",charIndex:263},{level:3,title:"核心包ee-core",slug:"核心包ee-core",normalizedTitle:"核心包ee-core",charIndex:297},{level:3,title:"开发者模式",slug:"开发者模式",normalizedTitle:"开发者模式",charIndex:330},{level:3,title:"软件界面",slug:"软件界面",normalizedTitle:"软件界面",charIndex:147},{level:3,title:"业务逻辑",slug:"业务逻辑",normalizedTitle:"业务逻辑",charIndex:132},{level:3,title:"Demo",slug:"demo",normalizedTitle:"demo",charIndex:650},{level:3,title:"生成软件",slug:"生成软件",normalizedTitle:"生成软件",charIndex:695}],headersStr:"框架架构 v3 版本 v2 版本 进程 通信 本地存储 核心包ee-core 开发者模式 软件界面 业务逻辑 Demo 生成软件",content:"# 框架架构\n\n\n# v3 版本\n\n单业务进程 + 模块化 + 多任务，适合小/中/大项目，兼顾开发效率 和 后期维护，兼容v2版本。\n\n\n# v2 版本\n\n单业务进程 + 单对象，适合小/中项目，开发效率高。\n\n\n# 进程\n\n框架有三种进程\n\n * ee主进程：业务逻辑\n * ee渲染进程：软件界面UI\n * ee任务进程：耗时业务\n\n\n# 通信\n\n * ipc：前端 ⇋ 业务层 （双向通信）\n * http： 前端、命令行、浏览器 ⇋ 业务层 （单向通信）\n * socket：前端 ⇋ 业务层 （双向通信）\n\n\n# 本地存储\n\n * json数据库\n * sqlite数据库\n\n\n# 核心包ee-core\n\n框架的实现及api，都由它提供。\n\n\n# 开发者模式\n\n\n# 软件界面\n\n进入“frontend”目录，开发软件界面；支持任意前端技术，如果vue、react、angular、html等\n\n# 进入【前端目录】\ncd frontend \n\n# 安装依赖\nnpm install\n\n# 启动服务\nnpm run serve\n\n\n注：如果启动的前端服务不是：http://localhost:8080/ 请先配置：config 文件中的“开发模式”\n\n\n# 业务逻辑\n\n“electron”目录，业务开发；常规业务逻辑、调用操作系统api、访问远程服务器等 在项目【根目录】启动服务\n\n# 启动后端服务\nnpm run dev\n\n# 热重载模式\nnpm run reload\n\n\n\n# Demo\n\n框架集成了许多功能demo示例，方便开发者快速入门。查看demo文档\n\n\n# 生成软件\n\n见教程：构建可执行程序",normalizedContent:"# 框架架构\n\n\n# v3 版本\n\n单业务进程 + 模块化 + 多任务，适合小/中/大项目，兼顾开发效率 和 后期维护，兼容v2版本。\n\n\n# v2 版本\n\n单业务进程 + 单对象，适合小/中项目，开发效率高。\n\n\n# 进程\n\n框架有三种进程\n\n * ee主进程：业务逻辑\n * ee渲染进程：软件界面ui\n * ee任务进程：耗时业务\n\n\n# 通信\n\n * ipc：前端 ⇋ 业务层 （双向通信）\n * http： 前端、命令行、浏览器 ⇋ 业务层 （单向通信）\n * socket：前端 ⇋ 业务层 （双向通信）\n\n\n# 本地存储\n\n * json数据库\n * sqlite数据库\n\n\n# 核心包ee-core\n\n框架的实现及api，都由它提供。\n\n\n# 开发者模式\n\n\n# 软件界面\n\n进入“frontend”目录，开发软件界面；支持任意前端技术，如果vue、react、angular、html等\n\n# 进入【前端目录】\ncd frontend \n\n# 安装依赖\nnpm install\n\n# 启动服务\nnpm run serve\n\n\n注：如果启动的前端服务不是：http://localhost:8080/ 请先配置：config 文件中的“开发模式”\n\n\n# 业务逻辑\n\n“electron”目录，业务开发；常规业务逻辑、调用操作系统api、访问远程服务器等 在项目【根目录】启动服务\n\n# 启动后端服务\nnpm run dev\n\n# 热重载模式\nnpm run reload\n\n\n\n# demo\n\n框架集成了许多功能demo示例，方便开发者快速入门。查看demo文档\n\n\n# 生成软件\n\n见教程：构建可执行程序",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"基础",frontmatter:{title:"基础",date:"2023-06-19T11:12:19.000Z",permalink:"/pages/f7cbf9/",article:!1},regularPath:"/01.v3/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/050.%E9%85%8D%E7%BD%AE/01.%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE.html",relativePath:"01.v3/010.快速入门/050.配置/01.基础配置.md",key:"v-95692bc4",path:"/pages/f7cbf9/",headers:[{level:3,title:"基础 config 文件",slug:"基础-config-文件",normalizedTitle:"基础 config 文件",charIndex:2},{level:3,title:"参数：appInfo 对象",slug:"参数-appinfo-对象",normalizedTitle:"参数：appinfo 对象",charIndex:264},{level:3,title:"属性说明",slug:"属性说明",normalizedTitle:"属性说明",charIndex:591},{level:3,title:"开发模式配置",slug:"开发模式配置",normalizedTitle:"开发模式配置",charIndex:600},{level:3,title:"开发者工具",slug:"开发者工具",normalizedTitle:"开发者工具",charIndex:957},{level:3,title:"应用程序顶部菜单",slug:"应用程序顶部菜单",normalizedTitle:"应用程序顶部菜单",charIndex:1051},{level:3,title:"主窗口",slug:"主窗口",normalizedTitle:"主窗口",charIndex:1156},{level:3,title:"业务日志",slug:"业务日志",normalizedTitle:"业务日志",charIndex:1764},{level:3,title:"远程web地址 (可选)",slug:"远程web地址-可选",normalizedTitle:"远程web地址 (可选)",charIndex:2027},{level:3,title:"内置socket服务",slug:"内置socket服务",normalizedTitle:"内置socket服务",charIndex:2152},{level:3,title:"内置http服务",slug:"内置http服务",normalizedTitle:"内置http服务",charIndex:2659},{level:3,title:"主进程",slug:"主进程",normalizedTitle:"主进程",charIndex:3153},{level:3,title:"应用自动升级",slug:"应用自动升级",normalizedTitle:"应用自动升级",charIndex:3695},{level:3,title:"插件功能",slug:"插件功能",normalizedTitle:"插件功能",charIndex:3742}],headersStr:"基础 config 文件 参数：appInfo 对象 属性说明 开发模式配置 开发者工具 应用程序顶部菜单 主窗口 业务日志 远程web地址 (可选) 内置socket服务 内置http服务 主进程 应用自动升级 插件功能",content:"# 基础 config 文件\n\n# 位置\n./electron/config/\n\n# 说明\nconfig.default.js // 默认配置文件，开发环境和生产环境都会加载\nconfig.local.js // 开发环境配置文件，追加和覆盖default配置文件\nconfig.prod.js // 生产环境配置文件，追加和覆盖default配置文件\nencrypt.js     // 代码加密的配置\nnodemon.json   // 开发环境，代码（监控）热加载\nbuilder.json   // 打包配置\n\n\n\n# 参数：appInfo 对象\n\n * name 应用名称\n * baseDir 框架中electron目录路径，如果使用加密功能，打包后路径为 ./public/electron\n * env 环境变量，local-本地，prod-生产环境\n * home APP根目录路径\n * root APP在操作系统中的数据目录，根据环境变量而变化\n * appUserDataDir APP在操作系统中的数据目录，与环境变量无关\n * userHome 操作系统用户的home目录\n * appVersion APP版本号\n * isPackaged APP是否已经打包\n * execDir APP安装后，可执行程序（exe、dmg、dep）的根目录\n\n\n# 属性说明\n\n\n# 开发模式配置\n\nconfig.developmentMode = {\n    default: 'vue',\n    mode: {\n      vue: {\n      \tprotocol: 'http://', // 自定义协议头\n        hostname: 'localhost',\n        port: 8080\n      },\n      react: {\n        hostname: 'localhost',\n        port: 3000\n      },\n      html: {\n        hostname: 'localhost',\n        indexPage: 'index.html' // 首页\n      },\n    }\n};\n\n\n\n# 开发者工具\n\n当openAppMenu为false时，该功能无效，推荐使用openAppMenu来调出开发者工具栏。\n\nconfig.openDevTools = false;\n\n\n\n# 应用程序顶部菜单\n\n* boolean | string\n* true, false, 'dev-show'(dev环境显示，prod环境隐藏)\nconfig.openAppMenu = true;\n\n\n\n# 主窗口\n\n// 更多属性，见文档：https://www.electronjs.org/zh/docs/latest/api/browser-window#new-browserwindowoptions\nconfig.windowsOption = {\n  title: 'EE框架', // 软件顶部或左上角名称\n  width: 980, // 软件窗口宽度\n  height: 650, // 软件窗口高度\n  minWidth: 800, // 软件窗口最小宽度\n  minHeight: 650, // 软件窗口最小高度\n  webPreferences: {\n    //webSecurity: false, // 如果需要跨域，请打开\n    contextIsolation: false, // 设置此项为false后，才可在渲染进程中使用electron api\n    nodeIntegration: true, // node模块\n    //preload: path.join(appInfo.baseDir, 'preload', 'bridge.js'),\n  },\n  frame: true,\n  show: true, \n\ticon: path.join(appInfo.home, 'public', 'images', 'logo-32.png'),\n};\n\n\n\n# 业务日志\n\nconfig.logger = {\n  encoding: 'utf8',\n  level: 'INFO',\n  outputJSON: false,\n  buffer: true,\n  enablePerformanceTimer: false,\n  rotator: 'day', // day:按天切割 | none:无\n  appLogName: 'ee.log',\n  coreLogName: 'ee-core.log',\n  errorLogName: 'ee-error.log' \n}\n\n\n\n# 远程web地址 (可选)\n\nconfig.remoteUrl = {\n  enable: false, // 是否启用\n  url: 'http://electron-egg.kaka996.com/' // Any web url\n};\n\n\n\n# 内置socket服务\n\n# 第三方软件，可通过socket-client监听端口，与ee框架通信\nconfig.socketServer = {\n  enable: false, // 是否启用\n  port: 7070, // 默认端口\n  isDynamic: false, // 如果值为false，框架默认使用port端口（如果默认端口被使用，则随机获取一个）；如果为true，默认端口无效，框架随机生成\n  path: \"/socket.io/\", // 默认路径名称\n  connectTimeout: 45000, // 客户端连接超时时间\n  pingTimeout: 30000, // 心跳检测超时时间\n  pingInterval: 25000, // 心跳检测间隔\n  maxHttpBufferSize: 1e8, // 每条消息的数据最大值 1M\n  transports: [\"polling\", \"websocket\"], // http轮询和websocket\n  cors: {\n    origin: true, // http协议时，要设置允许跨域\n  }\n};\n\n\n\n# 内置http服务\n\n# 可在前端、浏览器、终端命令中，访问EE程序  \nconfig.httpServer = {\n  enable: false, // 是否启用\n  https: {\n    enable: false, \n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },\n  port: 7071, // 默认端口（如果端口被使用，则随机获取一个）\n  cors: {\n    origin: \"*\" // 跨域\n  },\n  body: {\n    multipart: true,\n    formidable: {\n      keepExtensions: true\n    }\n  },\n  filterRequest: {\n    uris:  [\n      'favicon.ico' // 要过滤的请求uri\n    ],\n    returnData: '' // 任意数据类型\n  }\n};\n\n\n\n# 主进程\n\nconfig.mainServer = {\n  // 协议：http:// | https:// | file://\n  // web模式（http / https）将会创建server服务来加载前端资源，兼容性好。\n  // file模式不会创建server服务，性能稍好，但前端资源和路由等问题需要开发者解决。\n  protocol: 'http://',\n  // 前端资源入口文件\n  indexPath: '/public/dist/index.html',\n  host: '127.0.0.1',\n  port: 7072, // 默认端口（如果端口被使用，则随机获取一个）\n\tssl: {\n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },\n  // 兼容electron参数\n  // https://www.electronjs.org/zh/docs/latest/api/browser-window#winloadurlurl-options\n  options: {} \n}; \n\n\n\n# 应用自动升级\n\n> electron-egg < v2.3.0\n\n// 新版本的该功能已经移到插件功能里面\nconfig.autoUpdate = {\n  windows: false, // windows平台\n  macOS: false, // macOs 需要签名验证\n  linux: false, // linux平台\n  options: {\n    provider: 'generic', // or github, s3, bintray\n    url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n  },\n  force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n};\n\n\n\n# 插件功能\n\n/**\n * 插件功能\n * @param window 官方内置插件\n * @param tray 托盘插件\n * @param security 安全插件\n * @param awaken 唤醒插件\n * @param autoUpdater 自动升级插件\n * @param javaServer java项目插件\n * @param example demo插件\n */\nconfig.addons = {\n  window: {\n    enable: true,\n  },\n  tray: {\n    enable: true,\n    title: 'EE程序',\n    icon: '/public/images/tray_logo.png'\n  },\n  security: {\n    enable: true,\n  },\n  awaken: {\n    enable: true,\n    protocol: 'ee',\n    args: []\n  },\n  autoUpdater: {\n    enable: true,\n    windows: false, \n    macOS: false, \n    linux: false,\n    options: {\n      provider: 'generic', \n      url: 'http://kodo.qiniu.com/'\n    },\n    force: false,\n  },\n  javaServer: {\n    enable: false,\n    port: 18080,\n    jreVersion: 'jre1.8.0_201',\n    opt: '-server -Xms512M -Xmx512M -Xss512k -Dspring.profiles.active=prod -Dserver.port=${port} -Dlogging.file.path=\"${path}\" ',\n    name: 'java-app.jar'\n  },\n  example: {\n    enable: true,\n  },\n};\n\n\n文档：插件模块",normalizedContent:"# 基础 config 文件\n\n# 位置\n./electron/config/\n\n# 说明\nconfig.default.js // 默认配置文件，开发环境和生产环境都会加载\nconfig.local.js // 开发环境配置文件，追加和覆盖default配置文件\nconfig.prod.js // 生产环境配置文件，追加和覆盖default配置文件\nencrypt.js     // 代码加密的配置\nnodemon.json   // 开发环境，代码（监控）热加载\nbuilder.json   // 打包配置\n\n\n\n# 参数：appinfo 对象\n\n * name 应用名称\n * basedir 框架中electron目录路径，如果使用加密功能，打包后路径为 ./public/electron\n * env 环境变量，local-本地，prod-生产环境\n * home app根目录路径\n * root app在操作系统中的数据目录，根据环境变量而变化\n * appuserdatadir app在操作系统中的数据目录，与环境变量无关\n * userhome 操作系统用户的home目录\n * appversion app版本号\n * ispackaged app是否已经打包\n * execdir app安装后，可执行程序（exe、dmg、dep）的根目录\n\n\n# 属性说明\n\n\n# 开发模式配置\n\nconfig.developmentmode = {\n    default: 'vue',\n    mode: {\n      vue: {\n      \tprotocol: 'http://', // 自定义协议头\n        hostname: 'localhost',\n        port: 8080\n      },\n      react: {\n        hostname: 'localhost',\n        port: 3000\n      },\n      html: {\n        hostname: 'localhost',\n        indexpage: 'index.html' // 首页\n      },\n    }\n};\n\n\n\n# 开发者工具\n\n当openappmenu为false时，该功能无效，推荐使用openappmenu来调出开发者工具栏。\n\nconfig.opendevtools = false;\n\n\n\n# 应用程序顶部菜单\n\n* boolean | string\n* true, false, 'dev-show'(dev环境显示，prod环境隐藏)\nconfig.openappmenu = true;\n\n\n\n# 主窗口\n\n// 更多属性，见文档：https://www.electronjs.org/zh/docs/latest/api/browser-window#new-browserwindowoptions\nconfig.windowsoption = {\n  title: 'ee框架', // 软件顶部或左上角名称\n  width: 980, // 软件窗口宽度\n  height: 650, // 软件窗口高度\n  minwidth: 800, // 软件窗口最小宽度\n  minheight: 650, // 软件窗口最小高度\n  webpreferences: {\n    //websecurity: false, // 如果需要跨域，请打开\n    contextisolation: false, // 设置此项为false后，才可在渲染进程中使用electron api\n    nodeintegration: true, // node模块\n    //preload: path.join(appinfo.basedir, 'preload', 'bridge.js'),\n  },\n  frame: true,\n  show: true, \n\ticon: path.join(appinfo.home, 'public', 'images', 'logo-32.png'),\n};\n\n\n\n# 业务日志\n\nconfig.logger = {\n  encoding: 'utf8',\n  level: 'info',\n  outputjson: false,\n  buffer: true,\n  enableperformancetimer: false,\n  rotator: 'day', // day:按天切割 | none:无\n  applogname: 'ee.log',\n  corelogname: 'ee-core.log',\n  errorlogname: 'ee-error.log' \n}\n\n\n\n# 远程web地址 (可选)\n\nconfig.remoteurl = {\n  enable: false, // 是否启用\n  url: 'http://electron-egg.kaka996.com/' // any web url\n};\n\n\n\n# 内置socket服务\n\n# 第三方软件，可通过socket-client监听端口，与ee框架通信\nconfig.socketserver = {\n  enable: false, // 是否启用\n  port: 7070, // 默认端口\n  isdynamic: false, // 如果值为false，框架默认使用port端口（如果默认端口被使用，则随机获取一个）；如果为true，默认端口无效，框架随机生成\n  path: \"/socket.io/\", // 默认路径名称\n  connecttimeout: 45000, // 客户端连接超时时间\n  pingtimeout: 30000, // 心跳检测超时时间\n  pinginterval: 25000, // 心跳检测间隔\n  maxhttpbuffersize: 1e8, // 每条消息的数据最大值 1m\n  transports: [\"polling\", \"websocket\"], // http轮询和websocket\n  cors: {\n    origin: true, // http协议时，要设置允许跨域\n  }\n};\n\n\n\n# 内置http服务\n\n# 可在前端、浏览器、终端命令中，访问ee程序  \nconfig.httpserver = {\n  enable: false, // 是否启用\n  https: {\n    enable: false, \n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },\n  port: 7071, // 默认端口（如果端口被使用，则随机获取一个）\n  cors: {\n    origin: \"*\" // 跨域\n  },\n  body: {\n    multipart: true,\n    formidable: {\n      keepextensions: true\n    }\n  },\n  filterrequest: {\n    uris:  [\n      'favicon.ico' // 要过滤的请求uri\n    ],\n    returndata: '' // 任意数据类型\n  }\n};\n\n\n\n# 主进程\n\nconfig.mainserver = {\n  // 协议：http:// | https:// | file://\n  // web模式（http / https）将会创建server服务来加载前端资源，兼容性好。\n  // file模式不会创建server服务，性能稍好，但前端资源和路由等问题需要开发者解决。\n  protocol: 'http://',\n  // 前端资源入口文件\n  indexpath: '/public/dist/index.html',\n  host: '127.0.0.1',\n  port: 7072, // 默认端口（如果端口被使用，则随机获取一个）\n\tssl: {\n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },\n  // 兼容electron参数\n  // https://www.electronjs.org/zh/docs/latest/api/browser-window#winloadurlurl-options\n  options: {} \n}; \n\n\n\n# 应用自动升级\n\n> electron-egg < v2.3.0\n\n// 新版本的该功能已经移到插件功能里面\nconfig.autoupdate = {\n  windows: false, // windows平台\n  macos: false, // macos 需要签名验证\n  linux: false, // linux平台\n  options: {\n    provider: 'generic', // or github, s3, bintray\n    url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n  },\n  force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n};\n\n\n\n# 插件功能\n\n/**\n * 插件功能\n * @param window 官方内置插件\n * @param tray 托盘插件\n * @param security 安全插件\n * @param awaken 唤醒插件\n * @param autoupdater 自动升级插件\n * @param javaserver java项目插件\n * @param example demo插件\n */\nconfig.addons = {\n  window: {\n    enable: true,\n  },\n  tray: {\n    enable: true,\n    title: 'ee程序',\n    icon: '/public/images/tray_logo.png'\n  },\n  security: {\n    enable: true,\n  },\n  awaken: {\n    enable: true,\n    protocol: 'ee',\n    args: []\n  },\n  autoupdater: {\n    enable: true,\n    windows: false, \n    macos: false, \n    linux: false,\n    options: {\n      provider: 'generic', \n      url: 'http://kodo.qiniu.com/'\n    },\n    force: false,\n  },\n  javaserver: {\n    enable: false,\n    port: 18080,\n    jreversion: 'jre1.8.0_201',\n    opt: '-server -xms512m -xmx512m -xss512k -dspring.profiles.active=prod -dserver.port=${port} -dlogging.file.path=\"${path}\" ',\n    name: 'java-app.jar'\n  },\n  example: {\n    enable: true,\n  },\n};\n\n\n文档：插件模块",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"加密",frontmatter:{title:"加密",date:"2023-06-19T11:01:56.000Z",permalink:"/pages/197d56/"},regularPath:"/01.v3/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/050.%E9%85%8D%E7%BD%AE/03.%E5%8A%A0%E5%AF%86%E9%85%8D%E7%BD%AE.html",relativePath:"01.v3/010.快速入门/050.配置/03.加密配置.md",key:"v-352d0043",path:"/pages/197d56/",headers:[{level:3,title:"encrypt.json",slug:"encrypt-json",normalizedTitle:"encrypt.json",charIndex:2}],headersStr:"encrypt.json",content:"# encrypt.json\n\n多种加密功能，保护您的源码安全。\n\n/**\n * 加密配置\n * @param type - confusion | bytecode | strict\n */\nmodule.exports = {\n  // confusion - 压缩混淆加密\n  // bytecode - 字节码加密\n  // strict - 先混淆加密，然后字节码加密 \n  type: 'confusion',\n  // 文件匹配\n  files: [\n    'electron/**/*.(js|json)',\n    '!electron/config/encrypt.js',\n    '!electron/config/nodemon.json',\n    '!electron/config/builder.json',\n  ],\n  // 需要加密的文件后缀，暂时只支持js，后续待扩展\n  fileExt: ['.js'],\n  // 混淆加密配置\n  confusionOptions: {\n    // 压缩成一行\n    compact: true, \n    // 删除字符串文字并将其放置在一个特殊数组中     \n    stringArray: true,\n    // 对stringArray的所有字符串文字进行编码，值：'none' | 'base64' | 'rc4'\n    stringArrayEncoding: ['none'],\n    // 注入死代码，注：影响性能\n    deadCodeInjection: false,\n  }\n}\n",normalizedContent:"# encrypt.json\n\n多种加密功能，保护您的源码安全。\n\n/**\n * 加密配置\n * @param type - confusion | bytecode | strict\n */\nmodule.exports = {\n  // confusion - 压缩混淆加密\n  // bytecode - 字节码加密\n  // strict - 先混淆加密，然后字节码加密 \n  type: 'confusion',\n  // 文件匹配\n  files: [\n    'electron/**/*.(js|json)',\n    '!electron/config/encrypt.js',\n    '!electron/config/nodemon.json',\n    '!electron/config/builder.json',\n  ],\n  // 需要加密的文件后缀，暂时只支持js，后续待扩展\n  fileext: ['.js'],\n  // 混淆加密配置\n  confusionoptions: {\n    // 压缩成一行\n    compact: true, \n    // 删除字符串文字并将其放置在一个特殊数组中     \n    stringarray: true,\n    // 对stringarray的所有字符串文字进行编码，值：'none' | 'base64' | 'rc4'\n    stringarrayencoding: ['none'],\n    // 注入死代码，注：影响性能\n    deadcodeinjection: false,\n  }\n}\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"打包",frontmatter:{title:"打包",date:"2023-06-19T11:12:19.000Z",article:!1,permalink:"/pages/2df2e6/"},regularPath:"/01.v3/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/050.%E9%85%8D%E7%BD%AE/05.%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE.html",relativePath:"01.v3/010.快速入门/050.配置/05.打包配置.md",key:"v-285e924a",path:"/pages/2df2e6/",headers:[{level:3,title:"builder.json",slug:"builder-json",normalizedTitle:"builder.json",charIndex:2}],headersStr:"builder.json",content:'# builder.json\n\n打包功能使用electron-builder包，更多配置参考官方文档。\n\n注意\n\nelectron-egg: v3.4.0 之前版本，打包配置在package.json中。\n\n{\n  // 可执行程序名称（英文)\n  // 不要为中文，避免一些未知异常，打包后可修改安装包名称为中文\n  "productName": "ee",\n  // 软件id\n  "appId": "com.electron.ee",\n  // 版权标识（换成您自己的）\n  "copyright": "© 2023 哆啦好梦 Technology Co., Ltd.",\n  // 安装包输出目录\n  "directories": {\n    "output": "out"\n  },\n  // asar加密\n  "asar": true,\n  // 需要打包的文件\n  "files": [\n    "**/*",\n    "!frontend/",\n    "!run/",\n    "!logs/",\n    "!data/"\n  ],\n  // 额外资源（将from文件夹打进安装包，软件安装后放到to文件夹）\n  "extraResources": {\n    "from": "build/extraResources/",\n    "to": "extraResources"\n  },\n  // nsis脚本\n  "nsis": {\n    // 一键安装\n    "oneClick": false,\n    "allowElevation": true,\n    // 允许改变安装目录\n    "allowToChangeInstallationDirectory": true,\n    // 安装图标\n    "installerIcon": "build/icons/icon.ico",\n    // 卸载图标\n    "uninstallerIcon": "build/icons/icon.ico",\n    // 安装时header图标图标\n    "installerHeaderIcon": "build/icons/icon.ico",\n    // 创建桌面快捷方式\n    "createDesktopShortcut": true,\n    // 创建开始菜单快捷方式\n    "createStartMenuShortcut": true,\n    // 桌面快捷方式名称\n    "shortcutName": "EE框架"\n  },\n  // MacOS\n  "mac": {\n    "icon": "build/icons/icon.icns",\n    "artifactName": "${productName}-${os}-${version}-${arch}.${ext}",\n    "darkModeSupport": true,\n    "hardenedRuntime": false\n  },\n  // windows\n  "win": {\n    "icon": "build/icons/icon.ico",\n    "artifactName": "${productName}-${os}-${version}-${arch}.${ext}",\n    "target": [\n      {\n        "target": "nsis"\n      }\n    ]\n  },\n  // linux\n  "linux": {\n    "icon": "build/icons/icon.icns",\n    "artifactName": "${productName}-${os}-${version}-${arch}.${ext}",\n    "target": [\n      "deb"\n    ],\n    "category": "Utility"\n  }\n}\n',normalizedContent:'# builder.json\n\n打包功能使用electron-builder包，更多配置参考官方文档。\n\n注意\n\nelectron-egg: v3.4.0 之前版本，打包配置在package.json中。\n\n{\n  // 可执行程序名称（英文)\n  // 不要为中文，避免一些未知异常，打包后可修改安装包名称为中文\n  "productname": "ee",\n  // 软件id\n  "appid": "com.electron.ee",\n  // 版权标识（换成您自己的）\n  "copyright": "© 2023 哆啦好梦 technology co., ltd.",\n  // 安装包输出目录\n  "directories": {\n    "output": "out"\n  },\n  // asar加密\n  "asar": true,\n  // 需要打包的文件\n  "files": [\n    "**/*",\n    "!frontend/",\n    "!run/",\n    "!logs/",\n    "!data/"\n  ],\n  // 额外资源（将from文件夹打进安装包，软件安装后放到to文件夹）\n  "extraresources": {\n    "from": "build/extraresources/",\n    "to": "extraresources"\n  },\n  // nsis脚本\n  "nsis": {\n    // 一键安装\n    "oneclick": false,\n    "allowelevation": true,\n    // 允许改变安装目录\n    "allowtochangeinstallationdirectory": true,\n    // 安装图标\n    "installericon": "build/icons/icon.ico",\n    // 卸载图标\n    "uninstallericon": "build/icons/icon.ico",\n    // 安装时header图标图标\n    "installerheadericon": "build/icons/icon.ico",\n    // 创建桌面快捷方式\n    "createdesktopshortcut": true,\n    // 创建开始菜单快捷方式\n    "createstartmenushortcut": true,\n    // 桌面快捷方式名称\n    "shortcutname": "ee框架"\n  },\n  // macos\n  "mac": {\n    "icon": "build/icons/icon.icns",\n    "artifactname": "${productname}-${os}-${version}-${arch}.${ext}",\n    "darkmodesupport": true,\n    "hardenedruntime": false\n  },\n  // windows\n  "win": {\n    "icon": "build/icons/icon.ico",\n    "artifactname": "${productname}-${os}-${version}-${arch}.${ext}",\n    "target": [\n      {\n        "target": "nsis"\n      }\n    ]\n  },\n  // linux\n  "linux": {\n    "icon": "build/icons/icon.icns",\n    "artifactname": "${productname}-${os}-${version}-${arch}.${ext}",\n    "target": [\n      "deb"\n    ],\n    "category": "utility"\n  }\n}\n',charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"命令",frontmatter:{title:"命令",date:"2023-04-23T17:01:38.000Z",permalink:"/pages/b61a92/"},regularPath:"/01.v3/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/060.%E5%91%BD%E4%BB%A4.html",relativePath:"01.v3/010.快速入门/060.命令.md",key:"v-373087a2",path:"/pages/b61a92/",headers:[{level:3,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:2}],headersStr:"常用命令",content:"# 常用命令\n\n# 开发者模式\n# 1：【进入前端目录】，启动前端服务\ncd electron-egg/frontend && npm install && npm run serve\n# 2：【根目录】，启动后端服务\nnpm run dev\n\n# 开发模式（主进程）\nnpm run dev\n\n# 开发模式-热加载（主进程）\nnpm run reload\n\n# 预发布模式（环境变量为：prod），请先移动资源\nnpm run start\n\n# 移动前端静态资源\nnpm run rd\n\n# 代码加密\nnpm run encrypt\n\n# 清除加密的代码\nnpm run clean\n\n# 打包 （windows版）\nnpm run build-w (调整为64位)\nnpm run build-w-32 (32位)\nnpm run build-w-64 (64位)\nnpm run build-w-arm64 (arm64)\n\n# 打包 （windows 免安装版）\n# ee > v2.2.1\nnpm run build-wz (调整为64位)\nnpm run build-wz-32 (32位)\nnpm run build-wz-64 (64位)\nnpm run build-wz-arm64 (arm64)\n\n# 打包 （mac版）\nnpm run build-m\nnpm run build-m-arm64 (m1芯片架构)\n\n# 打包 （linux版）\n# ee > v2.2.1\nnpm run build-l (默认64位 deb包)\nnpm run build-l-32 (32位 deb包)\nnpm run build-l-64 (64位 deb包)\nnpm run build-l-arm64 (64位 deb包 arm64)\nnpm run build-l-armv7l (64位 deb包 armv7l)\nnpm run build-lr-64 (64位 rpm包)\nnpm run build-lp-64 (64位 pacman包)\n",normalizedContent:"# 常用命令\n\n# 开发者模式\n# 1：【进入前端目录】，启动前端服务\ncd electron-egg/frontend && npm install && npm run serve\n# 2：【根目录】，启动后端服务\nnpm run dev\n\n# 开发模式（主进程）\nnpm run dev\n\n# 开发模式-热加载（主进程）\nnpm run reload\n\n# 预发布模式（环境变量为：prod），请先移动资源\nnpm run start\n\n# 移动前端静态资源\nnpm run rd\n\n# 代码加密\nnpm run encrypt\n\n# 清除加密的代码\nnpm run clean\n\n# 打包 （windows版）\nnpm run build-w (调整为64位)\nnpm run build-w-32 (32位)\nnpm run build-w-64 (64位)\nnpm run build-w-arm64 (arm64)\n\n# 打包 （windows 免安装版）\n# ee > v2.2.1\nnpm run build-wz (调整为64位)\nnpm run build-wz-32 (32位)\nnpm run build-wz-64 (64位)\nnpm run build-wz-arm64 (arm64)\n\n# 打包 （mac版）\nnpm run build-m\nnpm run build-m-arm64 (m1芯片架构)\n\n# 打包 （linux版）\n# ee > v2.2.1\nnpm run build-l (默认64位 deb包)\nnpm run build-l-32 (32位 deb包)\nnpm run build-l-64 (64位 deb包)\nnpm run build-l-arm64 (64位 deb包 arm64)\nnpm run build-l-armv7l (64位 deb包 armv7l)\nnpm run build-lr-64 (64位 rpm包)\nnpm run build-lp-64 (64位 pacman包)\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"目录结构",frontmatter:{title:"目录结构",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/ee9aed/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/010.%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.html",relativePath:"01.v3/020.基础功能/010.目录结构.md",key:"v-23f0e4b6",path:"/pages/ee9aed/",headers:[{level:3,title:"目录结构及说明",slug:"目录结构及说明",normalizedTitle:"目录结构及说明",charIndex:2}],headersStr:"目录结构及说明",content:"# 目录结构及说明\n\nproject\n├── package.json npm包配置\n├── bulid 打包用的资源和脚本\n    ├── icons 软件图标（打包用到）\n    ├── extraResources 额外资源目录\n├── electron 主进程服务\n    ├── addon 插件目录\n        ├── example demo插件（代码示例）\n    ├── config 配置文件\n        ├── config.default.js 默认配置，都会加载\n        ├── config.local.js dev环境加载\n        ├── config.prod.js 生产环境加载\n        ├── encrypt.js 加密配置文件\n        ├── builder.json 打包配置\n    ├── controller 控制器\n    ├── service 业务层\n    ├── preload 预加载，在程序启动时加载，如托盘、自动升级等功能要提前加载代码\n    ├── jobs 任务\n├── frontend 前端目录（demo是用vue编写的）    \n├── out 打包后生成的可执行文件\n    ├── latest.yml 自动升级文件\n    ├── xxx.exe window应用安装包\n    ├── xxx.exe.blockmap window应用增量升级包（未测试过）\n    ├── xxx.dmg mac应用安装包\n    ├── xxx.deb linux应用安装包后缀有多种    \n├── run 一些运行缓存\n├── logs 日志 \n├── main.js 入口文件 \n├── public 资源目录\n    ├── dist 前端资源会移动到这里，生产环境加载\n    ├── electron 业务js加密后的文件\n    ├── html 一些模板\n    ├── images 一些图片\n├── data 内置数据库文件\n    ├── system.json 框架使用的数据库\n    ├── demo.json 示例json数据库\n    ├── sqlite-demo.db 示例sqlite数据库\n",normalizedContent:"# 目录结构及说明\n\nproject\n├── package.json npm包配置\n├── bulid 打包用的资源和脚本\n    ├── icons 软件图标（打包用到）\n    ├── extraresources 额外资源目录\n├── electron 主进程服务\n    ├── addon 插件目录\n        ├── example demo插件（代码示例）\n    ├── config 配置文件\n        ├── config.default.js 默认配置，都会加载\n        ├── config.local.js dev环境加载\n        ├── config.prod.js 生产环境加载\n        ├── encrypt.js 加密配置文件\n        ├── builder.json 打包配置\n    ├── controller 控制器\n    ├── service 业务层\n    ├── preload 预加载，在程序启动时加载，如托盘、自动升级等功能要提前加载代码\n    ├── jobs 任务\n├── frontend 前端目录（demo是用vue编写的）    \n├── out 打包后生成的可执行文件\n    ├── latest.yml 自动升级文件\n    ├── xxx.exe window应用安装包\n    ├── xxx.exe.blockmap window应用增量升级包（未测试过）\n    ├── xxx.dmg mac应用安装包\n    ├── xxx.deb linux应用安装包后缀有多种    \n├── run 一些运行缓存\n├── logs 日志 \n├── main.js 入口文件 \n├── public 资源目录\n    ├── dist 前端资源会移动到这里，生产环境加载\n    ├── electron 业务js加密后的文件\n    ├── html 一些模板\n    ├── images 一些图片\n├── data 内置数据库文件\n    ├── system.json 框架使用的数据库\n    ├── demo.json 示例json数据库\n    ├── sqlite-demo.db 示例sqlite数据库\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"入口及生命周期",frontmatter:{title:"入口及生命周期",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/e6cd33/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/012.%E5%85%A5%E5%8F%A3%E5%8F%8A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",relativePath:"01.v3/020.基础功能/012.入口及生命周期.md",key:"v-6d28b49e",path:"/pages/e6cd33/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:4,title:"main.js",slug:"main-js",normalizedTitle:"main.js",charIndex:32},{level:3,title:"旧版本",slug:"旧版本",normalizedTitle:"旧版本",charIndex:203},{level:4,title:"main.js",slug:"main-js-2",normalizedTitle:"main.js",charIndex:32}],headersStr:"介绍 main.js 旧版本 main.js",content:"# 介绍\n\n项目入口文件及生命周期\n\n提示\n\nv3.3.0 将 main.js中业务代码，放到了 ./electron/index.js 里面（稍作修改）。\n\n这样所有的业务代码都在 ./electron 文件夹下，方便业务统一与全局代码加密。\n\n# main.js\n\nconst { ElectronEgg } = require('ee-core');\nnew ElectronEgg();\n\n\n\n# 旧版本\n\n# main.js\n\n# 引入框架 Application\nconst { Application } = require('ee-core');\n# 引入 EE 全局对象\nconst EE = require('ee-core/ee');\n\n# main类\nclass Main extends Application {\n\n  constructor() {\n    super();\n    // this对象等于ee框架的全局app对象\n  }\n\n  /**\n   * core app have been loaded\n   * 框架核心功能加载完成\n   */\n  async ready () {\n    // do some things\n  }\n\n  /**\n   * electron app ready\n   * Electron完成初始化，主窗口创建之前\n   */\n  async electronAppReady () {\n    // do some things\n  }\n\n  /**\n   * main window have been loaded\n   * 主窗口创建完成\n   */\n  async windowReady () {\n    // do some things\n\n  }\n\n  /**\n   * before app close\n   * app退出之前\n   */  \n  async beforeClose () {\n    // do some things\n\n  }\n}\n\n// Instantiate an app object\nEE.app = new Main();\n",normalizedContent:"# 介绍\n\n项目入口文件及生命周期\n\n提示\n\nv3.3.0 将 main.js中业务代码，放到了 ./electron/index.js 里面（稍作修改）。\n\n这样所有的业务代码都在 ./electron 文件夹下，方便业务统一与全局代码加密。\n\n# main.js\n\nconst { electronegg } = require('ee-core');\nnew electronegg();\n\n\n\n# 旧版本\n\n# main.js\n\n# 引入框架 application\nconst { application } = require('ee-core');\n# 引入 ee 全局对象\nconst ee = require('ee-core/ee');\n\n# main类\nclass main extends application {\n\n  constructor() {\n    super();\n    // this对象等于ee框架的全局app对象\n  }\n\n  /**\n   * core app have been loaded\n   * 框架核心功能加载完成\n   */\n  async ready () {\n    // do some things\n  }\n\n  /**\n   * electron app ready\n   * electron完成初始化，主窗口创建之前\n   */\n  async electronappready () {\n    // do some things\n  }\n\n  /**\n   * main window have been loaded\n   * 主窗口创建完成\n   */\n  async windowready () {\n    // do some things\n\n  }\n\n  /**\n   * before app close\n   * app退出之前\n   */  \n  async beforeclose () {\n    // do some things\n\n  }\n}\n\n// instantiate an app object\nee.app = new main();\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"前端模块",frontmatter:{title:"前端模块",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/a75f3c/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/014.%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97.html",relativePath:"01.v3/020.基础功能/014.前端模块.md",key:"v-6c2c2e43",path:"/pages/a75f3c/",headers:[{level:3,title:"代码目录",slug:"代码目录",normalizedTitle:"代码目录",charIndex:2},{level:3,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:24},{level:3,title:"简单配置",slug:"简单配置",normalizedTitle:"简单配置",charIndex:114},{level:3,title:"只需一个文件：ipcRenderer.js",slug:"只需一个文件-ipcrenderer-js",normalizedTitle:"只需一个文件：ipcrenderer.js",charIndex:572},{level:3,title:"启动",slug:"启动",normalizedTitle:"启动",charIndex:263}],headersStr:"代码目录 说明 简单配置 只需一个文件：ipcRenderer.js 启动",content:"# 代码目录\n\n./frontend\n\n\n\n# 说明\n\n * 可以使用任意前端技术\n * 项目中前端模块只是demo，你可以随意修改或删除\n * vue2、vue3、react、Angular、html、vite 等等\n\n\n# 简单配置\n\n打开配置文件：./electron/config.default.js，可修改如下配置：\n  developmentMode: {\n    default: 'vue', // 默认前后端分离，使用vue\n    mode: {\n    \t// 前后端分离，使用vue开发，端口与vue启动的serve一致\n      vue: {\n        hostname: 'localhost',\n        port: 8080\n      },\n      // 前后端分离，使用react开发，端口与react启动的serve一致\n      react: {\n        hostname: 'localhost',\n        port: 3000\n      },\n      html: {\n        hostname: 'localhost',\n        indexPage: 'index.html' // 首页\n      },\n    }\n  },\n\n\n\n# 只需一个文件：ipcRenderer.js\n\n你的前端项目需要引入该文件，才能和electron业务层通信\n\n# 文件位置\n./electron-egg/frontend/src/utils/ipcRenderer.js\n\n\n\n# 启动\n\n * vue模式【默认】\n\n# 1：【进入前端目录】，启动vue\ncd ./frontend\nnpm run serve\n\n# 2：【根目录】，启动electron服务\nnpm run dev\n\n\n * react模式，同vue\n\n * html模式（不推荐，使用vue和react吧，跟上时代的步伐）\n\n# 1：进入前端目录，并创建dist目录\ncd ./frontend && mkdir dist\n\n# 2: 编写html文件\nindex.html\n\n# 3：【根目录】，启动electron服务\nnpm run dev\n",normalizedContent:"# 代码目录\n\n./frontend\n\n\n\n# 说明\n\n * 可以使用任意前端技术\n * 项目中前端模块只是demo，你可以随意修改或删除\n * vue2、vue3、react、angular、html、vite 等等\n\n\n# 简单配置\n\n打开配置文件：./electron/config.default.js，可修改如下配置：\n  developmentmode: {\n    default: 'vue', // 默认前后端分离，使用vue\n    mode: {\n    \t// 前后端分离，使用vue开发，端口与vue启动的serve一致\n      vue: {\n        hostname: 'localhost',\n        port: 8080\n      },\n      // 前后端分离，使用react开发，端口与react启动的serve一致\n      react: {\n        hostname: 'localhost',\n        port: 3000\n      },\n      html: {\n        hostname: 'localhost',\n        indexpage: 'index.html' // 首页\n      },\n    }\n  },\n\n\n\n# 只需一个文件：ipcrenderer.js\n\n你的前端项目需要引入该文件，才能和electron业务层通信\n\n# 文件位置\n./electron-egg/frontend/src/utils/ipcrenderer.js\n\n\n\n# 启动\n\n * vue模式【默认】\n\n# 1：【进入前端目录】，启动vue\ncd ./frontend\nnpm run serve\n\n# 2：【根目录】，启动electron服务\nnpm run dev\n\n\n * react模式，同vue\n\n * html模式（不推荐，使用vue和react吧，跟上时代的步伐）\n\n# 1：进入前端目录，并创建dist目录\ncd ./frontend && mkdir dist\n\n# 2: 编写html文件\nindex.html\n\n# 3：【根目录】，启动electron服务\nnpm run dev\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"控制器",frontmatter:{title:"控制器",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/f5ca26/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/016.%E6%8E%A7%E5%88%B6%E5%99%A8.html",relativePath:"01.v3/020.基础功能/016.控制器.md",key:"v-5d82c9fa",path:"/pages/f5ca26/",headers:[{level:4,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:4,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:51},{level:4,title:"ctx",slug:"ctx",normalizedTitle:"ctx",charIndex:193},{level:4,title:"args",slug:"args",normalizedTitle:"args",charIndex:255},{level:4,title:"event",slug:"event",normalizedTitle:"event",charIndex:279},{level:5,title:"event - IpcMainInvokeEvent",slug:"event-ipcmaininvokeevent",normalizedTitle:"event - ipcmaininvokeevent",charIndex:956},{level:5,title:"event - IpcMainEvent",slug:"event-ipcmainevent",normalizedTitle:"event - ipcmainevent",charIndex:309}],headersStr:"介绍 示例 ctx args event event - IpcMainInvokeEvent event - IpcMainEvent",content:"# 介绍\n\n和大多数框架一样，接收前端请求，组织参数及调用Service来处理业务。（非单例）\n\n# 示例\n\nconst Controller = require('ee-core').Controller;\n\n/**\n * 示例控制器\n * @class\n */\nclass ExampleController extends Controller {\n\n  constructor(ctx) {\n    super(ctx);\n  }\n\n  /**\n   * 所有方法接收两个参数\n   * @param args 前端传的参数\n   * @param event - ipc通信时才有值\n   * @param event - IpcMainEvent 文档：https://www.electronjs.org/docs/latest/api/structures/ipc-main-event\n   */\n\n  /**\n   * test\n   */\n  async test (args, event) {\n\n    // 前端参数\n    const params = args;\n\n    // 调用service\n    const result = await this.service.example.test('ee');\n\n    // 主动向前端发请求\n    // channel 前端ipc.on()，监听的路由\n    const channel = \"controller.example.something\"\n    event.reply(channel, {age:21})\n\n    // 返回数据\n    const data = {}\n    return data;\n  }\n}  \n\n\n# ctx\n\n全局app对象，等于控制器的this.app\n\n# args\n\n前端传的参数\n\n# event\n\nipc通信时才有值，且值为动态对象；\n\n * 前端使用 invoke() 方法时，event 等于 IpcMainInvokeEvent\n * 前端使用 send()/sendSync() 方法时，event 等于 IpcMainEvent\n\n说明如下：\n\n# event - IpcMainInvokeEvent\n\n前端使用 invoke() 方法时，event == IpcMainInvokeEvent\n\n请查看：详细说明\n\n# event - IpcMainEvent\n\n前端使用 send()/sendSync() 方法时，event == IpcMainEvent\n\n请查看：详细说明",normalizedContent:"# 介绍\n\n和大多数框架一样，接收前端请求，组织参数及调用service来处理业务。（非单例）\n\n# 示例\n\nconst controller = require('ee-core').controller;\n\n/**\n * 示例控制器\n * @class\n */\nclass examplecontroller extends controller {\n\n  constructor(ctx) {\n    super(ctx);\n  }\n\n  /**\n   * 所有方法接收两个参数\n   * @param args 前端传的参数\n   * @param event - ipc通信时才有值\n   * @param event - ipcmainevent 文档：https://www.electronjs.org/docs/latest/api/structures/ipc-main-event\n   */\n\n  /**\n   * test\n   */\n  async test (args, event) {\n\n    // 前端参数\n    const params = args;\n\n    // 调用service\n    const result = await this.service.example.test('ee');\n\n    // 主动向前端发请求\n    // channel 前端ipc.on()，监听的路由\n    const channel = \"controller.example.something\"\n    event.reply(channel, {age:21})\n\n    // 返回数据\n    const data = {}\n    return data;\n  }\n}  \n\n\n# ctx\n\n全局app对象，等于控制器的this.app\n\n# args\n\n前端传的参数\n\n# event\n\nipc通信时才有值，且值为动态对象；\n\n * 前端使用 invoke() 方法时，event 等于 ipcmaininvokeevent\n * 前端使用 send()/sendsync() 方法时，event 等于 ipcmainevent\n\n说明如下：\n\n# event - ipcmaininvokeevent\n\n前端使用 invoke() 方法时，event == ipcmaininvokeevent\n\n请查看：详细说明\n\n# event - ipcmainevent\n\n前端使用 send()/sendsync() 方法时，event == ipcmainevent\n\n请查看：详细说明",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"服务层",frontmatter:{title:"服务层",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/de1cbf/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/018.%E6%9C%8D%E5%8A%A1%E5%B1%82.html",relativePath:"01.v3/020.基础功能/018.服务层.md",key:"v-4a63d472",path:"/pages/de1cbf/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:22}],headersStr:"介绍 示例",content:"# 介绍\n\n业务逻辑层（单例模式）\n\n\n# 示例\n\nconst { Service } = require('ee-core');\n\n/**\n * 示例服务\n * @class\n */\nclass ExampleService extends Service {\n\n  constructor(ctx) {\n    super(ctx);\n  }\n\n  /**\n   * test\n   */\n  async test (args) {\n    let obj = {\n      status:'ok',\n      params: args\n    }\n\n    return obj;\n  }\n}\n\nExampleService.toString = () => '[class ExampleService]';\nmodule.exports = ExampleService;\n",normalizedContent:"# 介绍\n\n业务逻辑层（单例模式）\n\n\n# 示例\n\nconst { service } = require('ee-core');\n\n/**\n * 示例服务\n * @class\n */\nclass exampleservice extends service {\n\n  constructor(ctx) {\n    super(ctx);\n  }\n\n  /**\n   * test\n   */\n  async test (args) {\n    let obj = {\n      status:'ok',\n      params: args\n    }\n\n    return obj;\n  }\n}\n\nexampleservice.tostring = () => '[class exampleservice]';\nmodule.exports = exampleservice;\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"预加载层",frontmatter:{title:"预加载层",date:"2023-06-19T11:12:19.000Z",permalink:"/pages/00ac20/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/020.%E9%A2%84%E5%8A%A0%E8%BD%BD%E5%B1%82.html",relativePath:"01.v3/020.基础功能/020.预加载层.md",key:"v-5c557f7e",path:"/pages/00ac20/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:58}],headersStr:"介绍 示例",content:"# 介绍\n\n桌面应用的一些功能，需要在软件启动时就已经被加载；而控制器层代码，是前端发送请求时，才会执行。\n\n\n# 示例\n\n/*************************************************\n ** preload为预加载模块，该文件将会在程序启动时加载 **\n *************************************************/\nconst Addon = require('ee-core/addon');\n\n/**\n * 预加载模块入口\n */\nmodule.exports = async () => {\n\n  // 已实现的功能模块，可选择性使用和修改\n  Addon.get('tray').create();\n  Addon.get('security').create();\n  Addon.get('awaken').create();\n  Addon.get('autoUpdater').create();\n}\n",normalizedContent:"# 介绍\n\n桌面应用的一些功能，需要在软件启动时就已经被加载；而控制器层代码，是前端发送请求时，才会执行。\n\n\n# 示例\n\n/*************************************************\n ** preload为预加载模块，该文件将会在程序启动时加载 **\n *************************************************/\nconst addon = require('ee-core/addon');\n\n/**\n * 预加载模块入口\n */\nmodule.exports = async () => {\n\n  // 已实现的功能模块，可选择性使用和修改\n  addon.get('tray').create();\n  addon.get('security').create();\n  addon.get('awaken').create();\n  addon.get('autoupdater').create();\n}\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"插件说明",frontmatter:{title:"插件说明",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/c08bd9/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/010.%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E.html",relativePath:"01.v3/020.基础功能/030.插件/010.插件说明.md",key:"v-01497320",path:"/pages/c08bd9/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:69},{level:3,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:114},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:227}],headersStr:"介绍 目录 示例",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 介绍\n\n将通用业务做成插件，并挂载到 app.addon 对象上，扩展框架能力。\n\n\n# 目录\n\n./electron/addon\n\n\naddon目录下，一个插件一个目录。\n\n如：example/index.js 其中 example 为 插件名，index.js 为 插件入口文件（框架加载这个入口文件）\n\n\n# 示例\n\n 1. 编写插件代码\n\n# example/index.js\n\n/**\n * example插件\n * @class\n */\nclass ExampleAddon {\n\n  # 自动注入 app 对象\n  constructor(app) {\n    this.app = app;\n  }\n\n  /**\n   * hello\n   *\n   * @function \n   * @since 1.0.0\n   */\n  hello () {\n    return 'hello';\n  }  \n}\n\nExampleAddon.toString = () => '[class ExampleAddon]';\nmodule.exports = ExampleAddon;\n\n\n 2. 添加配置\n\n# 打开配置文件 ./electron/config/config.default.js\n\n/**\n * 插件功能\n * window 官方内置插件\n * example demo插件\n */\nconfig.addons = {\n  window: {\n    enable: true,\n  },\n  // 插件名为key，enable 配置启用\n  example: {\n    enable: true, \n  }\n};\n\n\n 3. 调用插件\n\n# ./electron/controller/example.js\n\nasync test () {\n\t# 获取插件对象，已经被实例化，且为单例\n  const exampleAddon = this.app.addon.example;\n  # 调用 hello 方法\n  const str = exampleAddon.hello();\n  console.log('str:', str);\n\n  return;\n}\n",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 介绍\n\n将通用业务做成插件，并挂载到 app.addon 对象上，扩展框架能力。\n\n\n# 目录\n\n./electron/addon\n\n\naddon目录下，一个插件一个目录。\n\n如：example/index.js 其中 example 为 插件名，index.js 为 插件入口文件（框架加载这个入口文件）\n\n\n# 示例\n\n 1. 编写插件代码\n\n# example/index.js\n\n/**\n * example插件\n * @class\n */\nclass exampleaddon {\n\n  # 自动注入 app 对象\n  constructor(app) {\n    this.app = app;\n  }\n\n  /**\n   * hello\n   *\n   * @function \n   * @since 1.0.0\n   */\n  hello () {\n    return 'hello';\n  }  \n}\n\nexampleaddon.tostring = () => '[class exampleaddon]';\nmodule.exports = exampleaddon;\n\n\n 2. 添加配置\n\n# 打开配置文件 ./electron/config/config.default.js\n\n/**\n * 插件功能\n * window 官方内置插件\n * example demo插件\n */\nconfig.addons = {\n  window: {\n    enable: true,\n  },\n  // 插件名为key，enable 配置启用\n  example: {\n    enable: true, \n  }\n};\n\n\n 3. 调用插件\n\n# ./electron/controller/example.js\n\nasync test () {\n\t# 获取插件对象，已经被实例化，且为单例\n  const exampleaddon = this.app.addon.example;\n  # 调用 hello 方法\n  const str = exampleaddon.hello();\n  console.log('str:', str);\n\n  return;\n}\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"内置窗口插件",frontmatter:{title:"内置窗口插件",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/fe5e7f/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/020.%E7%AA%97%E5%8F%A3%E6%8F%92%E4%BB%B6.html",relativePath:"01.v3/020.基础功能/030.插件/020.窗口插件.md",key:"v-52406657",path:"/pages/fe5e7f/",headers:[{level:3,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:69},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:111},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:228},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:42}],headersStr:"说明 配置 代码 使用",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 说明\n\n用来创建多窗口，并实现 窗口/主进程、窗口/子窗口 之间互相通信。\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  window: {\n    enable: true,\n  },\n}\n\n\n\n# 代码\n\nee-core/addon/window/index.js\n\n\n\n# 使用\n\n主进程\n\n# electron/controller/example.js\n  \n/**\n * 打开新窗口\n */\ncreateWindow (args) {\n  let content = null;\n  if (args.type == 'html') {\n    content = path.join('file://', electronApp.getAppPath(), args.content)\n  } else if (args.type == 'web') {\n    content = args.content;\n  } else if (args.type == 'vue') {\n    let addr = 'http://localhost:8080'\n    if (this.config.env == 'prod') {\n      const mainServer = this.app.config.mainServer;\n      addr = mainServer.protocol + mainServer.host + ':' + mainServer.port;\n    }\n\n    content = addr + args.content;\n  } else {\n    // some\n  }\n\n\t# 调用窗口插件\n  const addonWindow = this.app.addon.window;\n  let opt = {\n    title: args.windowName || 'new window'\n  }\n  const name = args.windowName || 'window-1';\n  const win = addonWindow.create(name, opt);\n  const winContentsId = win.webContents.id;\n\n  // load page\n  win.loadURL(content);\n\n  return winContentsId\n}\n\n\n# electron/controller/example.js\n\n/**\n * 获取窗口contents id\n */\ngetWCid (args) {\n  const addonWindow = this.app.addon.window;\n\n  // 主窗口的name默认是main，其它窗口name开发者自己定义\n  const name = args;\n  const id = addonWindow.getWCid(name);\n\n  return id;\n}\n\n\n\n前端\n\n# frontend/src/views/base/socket/Ipc.vue\n\n/**\n * 监听通信频道\n */\ninit () {\n  const self = this;\n  // 监听 窗口2 发来的消息\n  this.$ipc.removeAllListeners(specialIpcRoute.window2ToWindow1);\n  this.$ipc.on(specialIpcRoute.window2ToWindow1, (event, arg) => {\n    this.$message.info(arg);\n  })\n},\n\n/**\n * 创建窗口\n */\ncreateWindow (index) {\n  this.$ipcInvoke(ipcApiRoute.createWindow, this.views[index]).then(id => {\n    console.log('[createWindow] id:', id);\n  })\n},\n\n/**\n * 向新窗口发消息\n */\nasync sendTosubWindow () {\n  // 新窗口id\n  this.newWcId = await this.$ipcInvoke(ipcApiRoute.getWCid, this.windowName);\n  this.$ipc.sendTo(this.newWcId, specialIpcRoute.window1ToWindow2, '窗口1通过 sendTo 给窗口2发送消息');\n},\n\n\n# frontend/src/views/base/subwindow/Ipc.vue\n\n/**\n * 监听通信频道\n */\ninit () {\n  const self = this;\n  // 监听主窗口发来的消息\n  this.$ipc.removeAllListeners(specialIpcRoute.window1ToWindow2);\n  this.$ipc.on(specialIpcRoute.window1ToWindow2, (event, arg) => {\n      this.$message.info(arg);\n  })\n},\n\n/**\n * 向主窗口发消息\n */\nsendTosubWindow () {\n  // 获取主窗口id\n  this.$ipcInvoke(ipcApiRoute.getWCid, 'main').then(id => {\n    this.mainWCid = id;\n    this.$ipc.sendTo(this.mainWCid, specialIpcRoute.window2ToWindow1, '窗口2 通过 sendTo 给主窗口发送消息');\n  });\n},\n\n",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 说明\n\n用来创建多窗口，并实现 窗口/主进程、窗口/子窗口 之间互相通信。\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  window: {\n    enable: true,\n  },\n}\n\n\n\n# 代码\n\nee-core/addon/window/index.js\n\n\n\n# 使用\n\n主进程\n\n# electron/controller/example.js\n  \n/**\n * 打开新窗口\n */\ncreatewindow (args) {\n  let content = null;\n  if (args.type == 'html') {\n    content = path.join('file://', electronapp.getapppath(), args.content)\n  } else if (args.type == 'web') {\n    content = args.content;\n  } else if (args.type == 'vue') {\n    let addr = 'http://localhost:8080'\n    if (this.config.env == 'prod') {\n      const mainserver = this.app.config.mainserver;\n      addr = mainserver.protocol + mainserver.host + ':' + mainserver.port;\n    }\n\n    content = addr + args.content;\n  } else {\n    // some\n  }\n\n\t# 调用窗口插件\n  const addonwindow = this.app.addon.window;\n  let opt = {\n    title: args.windowname || 'new window'\n  }\n  const name = args.windowname || 'window-1';\n  const win = addonwindow.create(name, opt);\n  const wincontentsid = win.webcontents.id;\n\n  // load page\n  win.loadurl(content);\n\n  return wincontentsid\n}\n\n\n# electron/controller/example.js\n\n/**\n * 获取窗口contents id\n */\ngetwcid (args) {\n  const addonwindow = this.app.addon.window;\n\n  // 主窗口的name默认是main，其它窗口name开发者自己定义\n  const name = args;\n  const id = addonwindow.getwcid(name);\n\n  return id;\n}\n\n\n\n前端\n\n# frontend/src/views/base/socket/ipc.vue\n\n/**\n * 监听通信频道\n */\ninit () {\n  const self = this;\n  // 监听 窗口2 发来的消息\n  this.$ipc.removealllisteners(specialipcroute.window2towindow1);\n  this.$ipc.on(specialipcroute.window2towindow1, (event, arg) => {\n    this.$message.info(arg);\n  })\n},\n\n/**\n * 创建窗口\n */\ncreatewindow (index) {\n  this.$ipcinvoke(ipcapiroute.createwindow, this.views[index]).then(id => {\n    console.log('[createwindow] id:', id);\n  })\n},\n\n/**\n * 向新窗口发消息\n */\nasync sendtosubwindow () {\n  // 新窗口id\n  this.newwcid = await this.$ipcinvoke(ipcapiroute.getwcid, this.windowname);\n  this.$ipc.sendto(this.newwcid, specialipcroute.window1towindow2, '窗口1通过 sendto 给窗口2发送消息');\n},\n\n\n# frontend/src/views/base/subwindow/ipc.vue\n\n/**\n * 监听通信频道\n */\ninit () {\n  const self = this;\n  // 监听主窗口发来的消息\n  this.$ipc.removealllisteners(specialipcroute.window1towindow2);\n  this.$ipc.on(specialipcroute.window1towindow2, (event, arg) => {\n      this.$message.info(arg);\n  })\n},\n\n/**\n * 向主窗口发消息\n */\nsendtosubwindow () {\n  // 获取主窗口id\n  this.$ipcinvoke(ipcapiroute.getwcid, 'main').then(id => {\n    this.mainwcid = id;\n    this.$ipc.sendto(this.mainwcid, specialipcroute.window2towindow1, '窗口2 通过 sendto 给主窗口发送消息');\n  });\n},\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"托盘插件",frontmatter:{title:"托盘插件",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/c2dd07/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/030.%E6%89%98%E7%9B%98%E6%8F%92%E4%BB%B6.html",relativePath:"01.v3/020.基础功能/030.插件/030.托盘插件.md",key:"v-39c98aa8",path:"/pages/c2dd07/",headers:[{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:69},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:262},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:42}],headersStr:"配置 代码 使用",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  tray: {\n    enable: true,\n    title: 'EE程序', // 托盘显示标题\n    icon: '/public/images/tray_logo.png' // 托盘图标\n  },\n}\n\n\n\n# 代码\n\nelectron/addon/tray/index.js\n\n\n\n# 使用\n\n托盘功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {Object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n  // 获取已经实例化的类对象\n  const trayAddon = app.addon.tray;\n\n  // 调用create方法\n  trayAddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  tray: {\n    enable: true,\n    title: 'ee程序', // 托盘显示标题\n    icon: '/public/images/tray_logo.png' // 托盘图标\n  },\n}\n\n\n\n# 代码\n\nelectron/addon/tray/index.js\n\n\n\n# 使用\n\n托盘功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n  // 获取已经实例化的类对象\n  const trayaddon = app.addon.tray;\n\n  // 调用create方法\n  trayaddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"自动升级插件",frontmatter:{title:"自动升级插件",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/5746e7/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/040.%E8%87%AA%E5%8A%A8%E5%8D%87%E7%BA%A7%E6%8F%92%E4%BB%B6.html",relativePath:"01.v3/020.基础功能/030.插件/040.自动升级插件.md",key:"v-122cb915",path:"/pages/5746e7/",headers:[{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:69},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:475},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:42}],headersStr:"配置 代码 使用",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  autoUpdater: {\n    enable: true,\n    windows: false, // windows平台\n    macOS: false, // macOs 需要签名验证\n    linux: false, // linux平台\n    options: {\n      provider: 'generic', // or github, s3, bintray\n      url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n    },\n    force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n  }, \n}\n\n\n\n# 代码\n\nelectron/addon/autoUpdater/index.js\n\n\n\n# 使用\n\n自动升级功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {Object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n  // 获取已经实例化的类对象\n  const autoUpdaterAddon = app.addon.autoUpdater;\n\n  // 调用create方法\n  autoUpdaterAddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  autoupdater: {\n    enable: true,\n    windows: false, // windows平台\n    macos: false, // macos 需要签名验证\n    linux: false, // linux平台\n    options: {\n      provider: 'generic', // or github, s3, bintray\n      url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n    },\n    force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n  }, \n}\n\n\n\n# 代码\n\nelectron/addon/autoupdater/index.js\n\n\n\n# 使用\n\n自动升级功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n  // 获取已经实例化的类对象\n  const autoupdateraddon = app.addon.autoupdater;\n\n  // 调用create方法\n  autoupdateraddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"唤醒插件",frontmatter:{title:"唤醒插件",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/371117/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/050.%E5%94%A4%E9%86%92%E6%8F%92%E4%BB%B6.html",relativePath:"01.v3/020.基础功能/030.插件/050.唤醒插件.md",key:"v-73411bec",path:"/pages/371117/",headers:[{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:69},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:242},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:42}],headersStr:"配置 代码 使用",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  awaken: {\n    enable: true,\n    protocol: 'ee', // 自定义协议名（默认你的应用名称-英文）\n    args: []\n  },\n}\n\n\n\n# 代码\n\nelectron/addon/awaken/index.js\n\n\n\n# 使用\n\n唤醒功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {Object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n  // 获取已经实例化的类对象\n  const awakenAddon = app.addon.awaken;\n\n  // 调用create方法\n  awakenAddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  awaken: {\n    enable: true,\n    protocol: 'ee', // 自定义协议名（默认你的应用名称-英文）\n    args: []\n  },\n}\n\n\n\n# 代码\n\nelectron/addon/awaken/index.js\n\n\n\n# 使用\n\n唤醒功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n  // 获取已经实例化的类对象\n  const awakenaddon = app.addon.awaken;\n\n  // 调用create方法\n  awakenaddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"安全插件",frontmatter:{title:"安全插件",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/2af017/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/060.%E5%AE%89%E5%85%A8%E6%8F%92%E4%BB%B6.html",relativePath:"01.v3/020.基础功能/030.插件/060.安全插件.md",key:"v-902b297a",path:"/pages/2af017/",headers:[{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:69},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:188},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:42}],headersStr:"配置 代码 使用",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  security: {\n    enable: true,\n  },\n}\n\n\n\n# 代码\n\nelectron/addon/security/index.js\n\n\n\n# 使用\n\n托盘功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {Object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n  // 获取已经实例化的类对象\n  const securityAddon = app.addon.security;\n\n  // 调用create方法\n  securityAddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  security: {\n    enable: true,\n  },\n}\n\n\n\n# 代码\n\nelectron/addon/security/index.js\n\n\n\n# 使用\n\n托盘功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n  // 获取已经实例化的类对象\n  const securityaddon = app.addon.security;\n\n  // 调用create方法\n  securityaddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"java服务插件",frontmatter:{title:"java服务插件",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/745360/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/070.java%E6%9C%8D%E5%8A%A1%E6%8F%92%E4%BB%B6.html",relativePath:"01.v3/020.基础功能/030.插件/070.java服务插件.md",key:"v-54a88ce1",path:"/pages/745360/",headers:[{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:69},{level:3,title:"安装table-parser包",slug:"安装table-parser包",normalizedTitle:"安装table-parser包",charIndex:470},{level:3,title:"官方下载 jre",slug:"官方下载-jre",normalizedTitle:"官方下载 jre",charIndex:511},{level:3,title:"编译 spring boot 为可执行jar",slug:"编译-spring-boot-为可执行jar",normalizedTitle:"编译 spring boot 为可执行jar",charIndex:575},{level:3,title:"通信",slug:"通信",normalizedTitle:"通信",charIndex:635},{level:3,title:"展示demo",slug:"展示demo",normalizedTitle:"展示demo",charIndex:664}],headersStr:"配置 安装table-parser包 官方下载 jre 编译 spring boot 为可执行jar 通信 展示demo",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  javaServer: {\n    enable: true,  // 是否启用\n    port: 18080,    // 默认端口（如果端口被使用，则随机获取一个）\n    jreVersion: 'jre1.8.0_201', // 额外资源目录下 jre 文件夹名称\n    opt: '-server -Xms512M -Xmx512M -Xss512k -Dspring.profiles.active=prod -Dserver.port=${port} -Dlogging.file.path=\"${path}\" ',\n    name: 'java-app.jar' // 额外资源目录下 jar 名称\n  },\n}\n\n\n\n# 安装table-parser包\n\nnpm i table-parser\n\n\n\n# 官方下载 jre\n\n将jre解压到：build/extraResources 目录\n\n下载地址：Oracle java\n\n\n# 编译 spring boot 为可执行jar\n\n将jar放到： build/extraResources 目录\n\n\n# 通信\n\n前端代码发送http请求与jar服务通信\n\n\n# 展示demo\n\n 1. 下载 jre 和 jar\n\n * 下载地址\n * 资源：java-res.zip\n * 注意：请根据你的操作系统，选择正确的jre 并解压\n\n 2. 将资源放到 build/extraResources 目录\n 3. 运行ee程序，菜单->其它->java服务",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  javaserver: {\n    enable: true,  // 是否启用\n    port: 18080,    // 默认端口（如果端口被使用，则随机获取一个）\n    jreversion: 'jre1.8.0_201', // 额外资源目录下 jre 文件夹名称\n    opt: '-server -xms512m -xmx512m -xss512k -dspring.profiles.active=prod -dserver.port=${port} -dlogging.file.path=\"${path}\" ',\n    name: 'java-app.jar' // 额外资源目录下 jar 名称\n  },\n}\n\n\n\n# 安装table-parser包\n\nnpm i table-parser\n\n\n\n# 官方下载 jre\n\n将jre解压到：build/extraresources 目录\n\n下载地址：oracle java\n\n\n# 编译 spring boot 为可执行jar\n\n将jar放到： build/extraresources 目录\n\n\n# 通信\n\n前端代码发送http请求与jar服务通信\n\n\n# 展示demo\n\n 1. 下载 jre 和 jar\n\n * 下载地址\n * 资源：java-res.zip\n * 注意：请根据你的操作系统，选择正确的jre 并解压\n\n 2. 将资源放到 build/extraresources 目录\n 3. 运行ee程序，菜单->其它->java服务",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"通信介绍",frontmatter:{title:"通信介绍",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/f4f62c/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/040.%E9%80%9A%E4%BF%A1/010.%E9%80%9A%E4%BF%A1%E4%BB%8B%E7%BB%8D.html",relativePath:"01.v3/020.基础功能/040.通信/010.通信介绍.md",key:"v-332b2444",path:"/pages/f4f62c/",headers:[{level:2,title:"IPC",slug:"ipc",normalizedTitle:"ipc",charIndex:66},{level:3,title:"单向通信",slug:"单向通信",normalizedTitle:"单向通信",charIndex:104},{level:3,title:"双向通信",slug:"双向通信",normalizedTitle:"双向通信",charIndex:74},{level:3,title:"预加载模块通信",slug:"预加载模块通信",normalizedTitle:"预加载模块通信",charIndex:848},{level:2,title:"HTTP/HTTPS",slug:"http-https",normalizedTitle:"http/https",charIndex:1061},{level:3,title:"打开配置文件",slug:"打开配置文件",normalizedTitle:"打开配置文件",charIndex:1122},{level:3,title:"cors属性",slug:"cors属性",normalizedTitle:"cors属性",charIndex:1501},{level:3,title:"body属性",slug:"body属性",normalizedTitle:"body属性",charIndex:2322},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:3831},{level:2,title:"socket",slug:"socket",normalizedTitle:"socket",charIndex:55},{level:3,title:"打开配置文件",slug:"打开配置文件-2",normalizedTitle:"打开配置文件",charIndex:1122},{level:3,title:"使用方法",slug:"使用方法-2",normalizedTitle:"使用方法",charIndex:3831},{level:3,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:4454},{level:3,title:"方法二",slug:"方法二",normalizedTitle:"方法二",charIndex:5150},{level:3,title:"方法三",slug:"方法三",normalizedTitle:"方法三",charIndex:5564}],headersStr:"IPC 单向通信 双向通信 预加载模块通信 HTTP/HTTPS 打开配置文件 cors属性 body属性 使用方法 socket 打开配置文件 使用方法 方式一 方法二 方法三",content:"前端 和 业务层 通过以下三种方式通信，可根据需求搭配使用\n\n * ipc\n * http/https\n * socket\n\n\n# IPC\n\n优点：双向通信\n\n文件：前端引入ipcRender.js\n\n\n# 单向通信\n\n# 定义通信频道，即路由\nconst ipcApiRoute = {\n  hello: 'controller.example.hello',\n}\n\n# 发送请求\n# 该请求会访问 controller/example.js文件的hello函数\nthis.$ipc.invoke(ipcApiRoute.hello, {name:'张三'}).then(r => {\n\t// r为返回的数据\n  conson.log(r);\n})\n\n\n\n# 双向通信\n\n# 定义通信频道，即路由\nconst ipcApiRoute = {\n  ipcSendMsg: 'controller.example.ipcSendMsg',\n}\n\n// 避免重复监听，或者将 $ipc.on() 功能写到一个统一的地方，只加载一次\nthis.$ipc.removeAllListeners(ipcApiRoute.ipcSendMsg);\n\n// 监听，接收 服务端 event.reply()发送的数据\nthis.$ipc.on(ipcApiRoute.ipcSendMsg, (event, result) => {\n    console.log('[ipcRenderer] [ipcSendMsg] result:', result);\n\n    self.messageString = result;\n    // 调用后端的另一个接口\n    event.sender.send(ipcApiRoute.hello, 'electron-egg');\n})\n\n// 发送请求到服务端\nthis.$ipc.send(ipcApiRoute.ipcSendMsg, '参数')\n\n\n\n# 预加载模块通信\n\n# 向前端发消息  \n// 频道\nconst channel = 'controller.example.ipcSendMsg';\n// 使用主窗口的 webContents.send() 方法\neeApp.mainWindow.webContents.send(channel, {name:'张三'});\n\n\nipc通信文档\n\n * ipcMain: 文档\n * ipcRenderer: 文档\n\n\n# HTTP/HTTPS\n\n优点：可在前端、浏览器、终端命令（curl）等，跨界访问EE程序\n\n生成ssl证书：查看\n\n\n# 打开配置文件\n\n/* 内置http服务 */\nconfig.httpServer = {\n  enable: false, // 是否启用\n  https: {\n    enable: false, \n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },  \n  port: 7071, // 默认端口（如果端口被使用，则随机获取一个）\n  cors: {\n    origin: \"*\" // 跨域\n  },\n  body: {\n    multipart: true,\n    formidable: {\n      keepExtensions: true\n    }\n  }  \n};\n\n\n\n# cors属性\n\n * origin\n\n配置 Access-Control-Allow-Origin CORS header，字符串 或 函数, 它将ctx作为第一个参数\n\n * exposeHeaders\n\n配置 Access-Control-Expose-Headers CORS header，类型：Array\n\n * maxAge\n\n配置 Access-Control-Max-Age CORS header，类型：Number\n\n * credentials\n\n配置 Access-Control-Allow-Credentials CORS header. 类型：Boolean.\n\n * allowMethods\n\n配置 Access-Control-Allow-Methods CORS header. 类型：array ，默认值 ['GET', 'PUT', 'POST', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS']\n\n * allowHeaders\n\n配置 Access-Control-Allow-Headers CORS header. 类型：Array\n\n{\n  origin: function(ctx) {\n    if (ctx.url === '/test') {\n      return false;\n    }\n    return '*';\n  },\n  exposeHeaders: ['WWW-Authenticate', 'Server-Authorization'],\n  maxAge: 5,\n  credentials: true,\n  allowMethods: ['GET', 'POST', 'DELETE'],\n  allowHeaders: ['Content-Type', 'Authorization', 'Accept'],\n}\n\n\n\n# body属性\n\n * patchNode {Boolean} 将请求body修补到Node's ctx.req，默认值：false\n * patchKoa {Boolean} 将请求body修补到 Koa's ctx.request, 默认值：true\n * jsonLimit {String|Integer} JSON body大小限制，默认值：1mb\n * formLimit {String|Integer} form body大小限制，默认值：56kb\n * textLimit {String|Integer} text body大小限制，默认值：56kb\n * encoding {String} 设置传入表单字段的编码，默认值：utf-8\n * multipart {Boolean} 解析 multipart bodies，默认值：false\n * urlencoded {Boolean} 解析 urlencoded bodies，默认值：true\n * text {Boolean} 解析 text bodies，比如 XML，默认值：true\n * json {Boolean} 解析 JSON bodies，默认值：true\n * jsonStrict {Boolean} 切换 co-body 严格模式；如果设为 true - 仅仅解析 arrays 或 objects，默认值：true\n * includeUnparsed {Boolean} 切换 co-body returnRawBody 选项; 如果设为 true, 对于表单编码和JSON请求原始，未解析的 body 使用Symbol 被连接到 ctx.request.body，默认值：false\n * formidable {Object} 见下方\n * onError {Function} 自定义错误句柄，如果抛出错误，可以自定义响应 - onError(error, context), 默认值将抛出\n * strict {Boolean} DEPRECATED If enabled, 不解析 GET, HEAD, DELETE 请求，默认值：true\n * parsedMethods {String[]} 声明将在其中解析实体的HTTP方法，默认值：['POST', 'PUT', 'PATCH']. 替换 strict 选项关于\n\n关于 formidable 对象\n\n * maxFields {Integer} 限制querystring解析器将解码的字段数，默认值：1000\n * maxFieldsSize {Integer} 限制所有字段（文件除外）可以以字节为单位分配的内存量，如果超过此值，一个 'error' 事件将被触发，默认值：2mb (2 * 1024 * 1024)\n * uploadDir {String} 设置用于放置文件上载的目录, 默认值：os.tmpDir()\n * keepExtensions {Boolean} 写入uploadDir的文件将包括原始文件的扩展名，默认值：false\n * hashAlgorithm {String} 如果要计算传入文件的校验和，将其设置为“sha1”或“md5”，默认值：false\n * multiples {Boolean} 是否上载多个文件，默认值：true\n * onFileBegin {Function} 文件开始时的特殊回调。改函数将通过 formidable执行，它可以用于在将文件保存到磁盘之前重命名文件。\n\n\n# 使用方法\n\n# 前端，项目中有demo\n\n# 终端命令，如\ncurl http://127.0.0.1:7071/controller/example/doHttpRequest?id=pictures\n\n# 浏览器\nhttp://127.0.0.1:7071/controller/example/doHttpRequest?id=pictures\n\n\n\n# socket\n\n优点：双向通信\n\n\n# 打开配置文件\n\n/* 内置socket服务 */\nconfig.socketServer = {\n  enable: false, // 是否启用\n  port: 7070, // 默认端口（如果端口被使用，则随机获取一个）\n  path: \"/socket.io/\", // 默认路径名称\n  connectTimeout: 45000, // 客户端连接超时时间\n  pingTimeout: 30000, // 心跳检测超时时间\n  pingInterval: 25000, // 心跳检测间隔\n  maxHttpBufferSize: 1e8, // 每条消息的数据最大值 1M\n  transports: [\"polling\", \"websocket\"], // http轮询和websocket\n  cors: {\n    origin: true, // http协议时，要设置允许跨域\n  }\n};\n\n\n\n# 使用方法\n\n\n# 方式一\n\n在前端调用，访问electron业务层\n\n# vue\nimport { io } from 'socket.io-client'\n\nexport default {\n  data() {\n    return {};\n  },\n  mounted() {\n    // socket支持http协议和websocket协议\n    // 推荐使用websocket\n    const url  = 'ws://127.0.0.1:' + port; // config中配置的端口\n    this.socket = io(url, { transports: [\"websocket\"] });\n    this.socket.on('connect', () => {\n      console.log('connect!!!!!!!!');\n    });\n  },\n  methods: {\n    send() {\n      const channel = 'c1'; // 通信频道固定\n      const method = 'controller.example.hello'; // EE框架中，控制器中的方法\n      this.socket.emit(channel, { cmd: method, params: 1 }, (response) => {\n        // response为返回值\n        console.log('response:', response)\n      });\n    }\n  }\n};\n\n\n\n\n# 方法二\n\n在其它node.js项目中使用socket.io与EE框架通信\n\n# 第三方项目引入socket客户端\nconst Client = require('socket.io-client');\n\n// socket支持http协议和websocket协议\n// 推荐使用websocket\nconst url  = 'http://127.0.0.1:' + port;// config中配置的端口\nconst cObj = Client(url);\n\nconst channel = 'c1'; // 通信频道固定\nconst method = 'controller.example.hello'; // EE框架中，控制器中的方法\ncObj.emit(channel, { cmd: method, params: 1 }, (response) => {\n  // response为返回值\n});\n\n\n\n# 方法三\n\n其它语言的网络模块大同小异，监听通信地址即可",normalizedContent:"前端 和 业务层 通过以下三种方式通信，可根据需求搭配使用\n\n * ipc\n * http/https\n * socket\n\n\n# ipc\n\n优点：双向通信\n\n文件：前端引入ipcrender.js\n\n\n# 单向通信\n\n# 定义通信频道，即路由\nconst ipcapiroute = {\n  hello: 'controller.example.hello',\n}\n\n# 发送请求\n# 该请求会访问 controller/example.js文件的hello函数\nthis.$ipc.invoke(ipcapiroute.hello, {name:'张三'}).then(r => {\n\t// r为返回的数据\n  conson.log(r);\n})\n\n\n\n# 双向通信\n\n# 定义通信频道，即路由\nconst ipcapiroute = {\n  ipcsendmsg: 'controller.example.ipcsendmsg',\n}\n\n// 避免重复监听，或者将 $ipc.on() 功能写到一个统一的地方，只加载一次\nthis.$ipc.removealllisteners(ipcapiroute.ipcsendmsg);\n\n// 监听，接收 服务端 event.reply()发送的数据\nthis.$ipc.on(ipcapiroute.ipcsendmsg, (event, result) => {\n    console.log('[ipcrenderer] [ipcsendmsg] result:', result);\n\n    self.messagestring = result;\n    // 调用后端的另一个接口\n    event.sender.send(ipcapiroute.hello, 'electron-egg');\n})\n\n// 发送请求到服务端\nthis.$ipc.send(ipcapiroute.ipcsendmsg, '参数')\n\n\n\n# 预加载模块通信\n\n# 向前端发消息  \n// 频道\nconst channel = 'controller.example.ipcsendmsg';\n// 使用主窗口的 webcontents.send() 方法\neeapp.mainwindow.webcontents.send(channel, {name:'张三'});\n\n\nipc通信文档\n\n * ipcmain: 文档\n * ipcrenderer: 文档\n\n\n# http/https\n\n优点：可在前端、浏览器、终端命令（curl）等，跨界访问ee程序\n\n生成ssl证书：查看\n\n\n# 打开配置文件\n\n/* 内置http服务 */\nconfig.httpserver = {\n  enable: false, // 是否启用\n  https: {\n    enable: false, \n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },  \n  port: 7071, // 默认端口（如果端口被使用，则随机获取一个）\n  cors: {\n    origin: \"*\" // 跨域\n  },\n  body: {\n    multipart: true,\n    formidable: {\n      keepextensions: true\n    }\n  }  \n};\n\n\n\n# cors属性\n\n * origin\n\n配置 access-control-allow-origin cors header，字符串 或 函数, 它将ctx作为第一个参数\n\n * exposeheaders\n\n配置 access-control-expose-headers cors header，类型：array\n\n * maxage\n\n配置 access-control-max-age cors header，类型：number\n\n * credentials\n\n配置 access-control-allow-credentials cors header. 类型：boolean.\n\n * allowmethods\n\n配置 access-control-allow-methods cors header. 类型：array ，默认值 ['get', 'put', 'post', 'patch', 'delete', 'head', 'options']\n\n * allowheaders\n\n配置 access-control-allow-headers cors header. 类型：array\n\n{\n  origin: function(ctx) {\n    if (ctx.url === '/test') {\n      return false;\n    }\n    return '*';\n  },\n  exposeheaders: ['www-authenticate', 'server-authorization'],\n  maxage: 5,\n  credentials: true,\n  allowmethods: ['get', 'post', 'delete'],\n  allowheaders: ['content-type', 'authorization', 'accept'],\n}\n\n\n\n# body属性\n\n * patchnode {boolean} 将请求body修补到node's ctx.req，默认值：false\n * patchkoa {boolean} 将请求body修补到 koa's ctx.request, 默认值：true\n * jsonlimit {string|integer} json body大小限制，默认值：1mb\n * formlimit {string|integer} form body大小限制，默认值：56kb\n * textlimit {string|integer} text body大小限制，默认值：56kb\n * encoding {string} 设置传入表单字段的编码，默认值：utf-8\n * multipart {boolean} 解析 multipart bodies，默认值：false\n * urlencoded {boolean} 解析 urlencoded bodies，默认值：true\n * text {boolean} 解析 text bodies，比如 xml，默认值：true\n * json {boolean} 解析 json bodies，默认值：true\n * jsonstrict {boolean} 切换 co-body 严格模式；如果设为 true - 仅仅解析 arrays 或 objects，默认值：true\n * includeunparsed {boolean} 切换 co-body returnrawbody 选项; 如果设为 true, 对于表单编码和json请求原始，未解析的 body 使用symbol 被连接到 ctx.request.body，默认值：false\n * formidable {object} 见下方\n * onerror {function} 自定义错误句柄，如果抛出错误，可以自定义响应 - onerror(error, context), 默认值将抛出\n * strict {boolean} deprecated if enabled, 不解析 get, head, delete 请求，默认值：true\n * parsedmethods {string[]} 声明将在其中解析实体的http方法，默认值：['post', 'put', 'patch']. 替换 strict 选项关于\n\n关于 formidable 对象\n\n * maxfields {integer} 限制querystring解析器将解码的字段数，默认值：1000\n * maxfieldssize {integer} 限制所有字段（文件除外）可以以字节为单位分配的内存量，如果超过此值，一个 'error' 事件将被触发，默认值：2mb (2 * 1024 * 1024)\n * uploaddir {string} 设置用于放置文件上载的目录, 默认值：os.tmpdir()\n * keepextensions {boolean} 写入uploaddir的文件将包括原始文件的扩展名，默认值：false\n * hashalgorithm {string} 如果要计算传入文件的校验和，将其设置为“sha1”或“md5”，默认值：false\n * multiples {boolean} 是否上载多个文件，默认值：true\n * onfilebegin {function} 文件开始时的特殊回调。改函数将通过 formidable执行，它可以用于在将文件保存到磁盘之前重命名文件。\n\n\n# 使用方法\n\n# 前端，项目中有demo\n\n# 终端命令，如\ncurl http://127.0.0.1:7071/controller/example/dohttprequest?id=pictures\n\n# 浏览器\nhttp://127.0.0.1:7071/controller/example/dohttprequest?id=pictures\n\n\n\n# socket\n\n优点：双向通信\n\n\n# 打开配置文件\n\n/* 内置socket服务 */\nconfig.socketserver = {\n  enable: false, // 是否启用\n  port: 7070, // 默认端口（如果端口被使用，则随机获取一个）\n  path: \"/socket.io/\", // 默认路径名称\n  connecttimeout: 45000, // 客户端连接超时时间\n  pingtimeout: 30000, // 心跳检测超时时间\n  pinginterval: 25000, // 心跳检测间隔\n  maxhttpbuffersize: 1e8, // 每条消息的数据最大值 1m\n  transports: [\"polling\", \"websocket\"], // http轮询和websocket\n  cors: {\n    origin: true, // http协议时，要设置允许跨域\n  }\n};\n\n\n\n# 使用方法\n\n\n# 方式一\n\n在前端调用，访问electron业务层\n\n# vue\nimport { io } from 'socket.io-client'\n\nexport default {\n  data() {\n    return {};\n  },\n  mounted() {\n    // socket支持http协议和websocket协议\n    // 推荐使用websocket\n    const url  = 'ws://127.0.0.1:' + port; // config中配置的端口\n    this.socket = io(url, { transports: [\"websocket\"] });\n    this.socket.on('connect', () => {\n      console.log('connect!!!!!!!!');\n    });\n  },\n  methods: {\n    send() {\n      const channel = 'c1'; // 通信频道固定\n      const method = 'controller.example.hello'; // ee框架中，控制器中的方法\n      this.socket.emit(channel, { cmd: method, params: 1 }, (response) => {\n        // response为返回值\n        console.log('response:', response)\n      });\n    }\n  }\n};\n\n\n\n\n# 方法二\n\n在其它node.js项目中使用socket.io与ee框架通信\n\n# 第三方项目引入socket客户端\nconst client = require('socket.io-client');\n\n// socket支持http协议和websocket协议\n// 推荐使用websocket\nconst url  = 'http://127.0.0.1:' + port;// config中配置的端口\nconst cobj = client(url);\n\nconst channel = 'c1'; // 通信频道固定\nconst method = 'controller.example.hello'; // ee框架中，控制器中的方法\ncobj.emit(channel, { cmd: method, params: 1 }, (response) => {\n  // response为返回值\n});\n\n\n\n# 方法三\n\n其它语言的网络模块大同小异，监听通信地址即可",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"通信-ipcRender.js",frontmatter:{title:"通信-ipcRender.js",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/ae344a/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/040.%E9%80%9A%E4%BF%A1/020.%E9%80%9A%E4%BF%A1ipcRender.html",relativePath:"01.v3/020.基础功能/040.通信/020.通信ipcRender.md",key:"v-619f047f",path:"/pages/ae344a/",headers:[{level:3,title:"ipcRenderer.js",slug:"ipcrenderer-js",normalizedTitle:"ipcrenderer.js",charIndex:21},{level:3,title:"API",slug:"api",normalizedTitle:"api",charIndex:1015},{level:3,title:"ipc",slug:"ipc",normalizedTitle:"ipc",charIndex:11},{level:3,title:"isEE",slug:"isee",normalizedTitle:"isee",charIndex:956},{level:3,title:"旧的API",slug:"旧的api",normalizedTitle:"旧的api",charIndex:1095},{level:3,title:"$ipcInvoke(route, params)",slug:"ipcinvoke-route-params",normalizedTitle:"$ipcinvoke(route, params)",charIndex:1105},{level:3,title:"$ipcSendSync(route, params)",slug:"ipcsendsync-route-params",normalizedTitle:"$ipcsendsync(route, params)",charIndex:1430},{level:3,title:"$ipc",slug:"ipc-2",normalizedTitle:"$ipc",charIndex:1105},{level:3,title:"$ipc.send(route, params)",slug:"ipc-send-route-params",normalizedTitle:"$ipc.send(route, params)",charIndex:1841},{level:3,title:"$ipc.on(route, listener)",slug:"ipc-on-route-listener",normalizedTitle:"$ipc.on(route, listener)",charIndex:2041}],headersStr:"ipcRenderer.js API ipc isEE 旧的API $ipcInvoke(route, params) $ipcSendSync(route, params) $ipc $ipc.send(route, params) $ipc.on(route, listener)",content:"前端与主进程（业务层）ipc通信\n\n\n# ipcRenderer.js\n\n文件位置\n\n./frontend/src/utils/ipcRenderer.js\n\n\n内容\n\nconst { ipcRenderer: ipc } = (window.require && window.require('electron')) || window.electron || {};\n\n/**\n * ipc\n * 官方api说明：https://www.electronjs.org/zh/docs/latest/api/ipc-renderer\n * \n * 属性/方法\n * ipc.invoke(channel, param) - 发送异步消息（invoke/handle 模型）\n * ipc.sendSync(channel, param) - 发送同步消息（send/on 模型）\n * ipc.on(channel, listener) - 监听 channel, 当新消息到达，调用 listener\n * ipc.once(channel, listener) - 添加一次性 listener 函数\n * ipc.removeListener(channel, listener) - 为特定的 channel 从监听队列中删除特定的 listener 监听者\n * ipc.removeAllListeners(channel) - 移除所有的监听器，当指定 channel 时只移除与其相关的所有监听器\n * ipc.send(channel, ...args) - 通过channel向主进程发送异步消息\n * ipc.postMessage(channel, message, [transfer]) - 发送消息到主进程\n * ipc.sendTo(webContentsId, channel, ...args) - 通过 channel 发送消息到带有 webContentsId 的窗口\n * ipc.sendToHost(channel, ...args) - 消息会被发送到 host 页面上的 <webview> 元素\n */\n\n/**\n * 是否为EE环境\n */\nconst isEE = ipc ? true : false;\n\nexport {\n  ipc,\n  isEE\n}\n\n\n\n\n# API\n\n\n# ipc\n\n等于electron官方的api\n\n\n# isEE\n\n是否为EE环境。可用此属性区别前端页面是在服务器环境还是用户电脑环境。\n\n\n# 旧的API\n\n\n# $ipcInvoke(route, params)\n\n * 介绍：发送异步消息（invoke/handle 模型）\n * 返回：Promise\n\n# 回调语法\nhandleInvoke () {\n    this.$ipcInvoke(ipcApiRoute.ipcInvokeMsg, '异步-回调').then(r => {\n      console.log('r:', r);\n    });\n},\n\n# async/await语法\nasync handleInvoke2 () {\n    const msg = await this.$ipcInvoke(ipcApiRoute.ipcInvokeMsg, '异步');\n},\n\n\n\n# $ipcSendSync(route, params)\n\n * 介绍：发送同步消息（send/on 模型）\n * 返回：任意类型\n\n# 语法\nconst msg = this.$ipcSendSync(ipcApiRoute.ipcSendSyncMsg, '同步');\n\n\n\n# $ipc\n\n * 介绍：全局ipc对象，等价于electron官方提供的 ipcRender\n\n该对象包含如下方法：\non\nonce\nremoveListener\nremoveAllListeners\nsend\ninvoke\nsendSync\npostMessage\nsendTo\nsendToHost\nIpcRendererEvent\n\n\n详细说明见：https://www.electronjs.org/zh/docs/latest/api/ipc-renderer#ipcrendereronchannel-listener\n\n\n# $ipc.send(route, params)\n\n * 介绍：ipc的send属性，向主进程发送异步消息，可以发送任意参数。\n * 返回：结果在 $ipc.on()监听的路由中\n\n# 使用\nconst params = {\n  type: 'start',\n  content: '开始'\n}\nthis.$ipc.send(ipcApiRoute.ipcSendMsg, params)\n\n\n\n# $ipc.on(route, listener)\n\n * 介绍：ipc的on属性，监听 route；当新消息到达，将调用listener\n * 返回：callback\n\nthis.$ipc.on(ipcApiRoute.ipcSendMsg, (event, result) => {\n  console.log('result:', result);\n\n  // 调用后端的另一个接口\n  event.sender.send(ipcApiRoute.hello, 'electron-egg');\n})\n",normalizedContent:"前端与主进程（业务层）ipc通信\n\n\n# ipcrenderer.js\n\n文件位置\n\n./frontend/src/utils/ipcrenderer.js\n\n\n内容\n\nconst { ipcrenderer: ipc } = (window.require && window.require('electron')) || window.electron || {};\n\n/**\n * ipc\n * 官方api说明：https://www.electronjs.org/zh/docs/latest/api/ipc-renderer\n * \n * 属性/方法\n * ipc.invoke(channel, param) - 发送异步消息（invoke/handle 模型）\n * ipc.sendsync(channel, param) - 发送同步消息（send/on 模型）\n * ipc.on(channel, listener) - 监听 channel, 当新消息到达，调用 listener\n * ipc.once(channel, listener) - 添加一次性 listener 函数\n * ipc.removelistener(channel, listener) - 为特定的 channel 从监听队列中删除特定的 listener 监听者\n * ipc.removealllisteners(channel) - 移除所有的监听器，当指定 channel 时只移除与其相关的所有监听器\n * ipc.send(channel, ...args) - 通过channel向主进程发送异步消息\n * ipc.postmessage(channel, message, [transfer]) - 发送消息到主进程\n * ipc.sendto(webcontentsid, channel, ...args) - 通过 channel 发送消息到带有 webcontentsid 的窗口\n * ipc.sendtohost(channel, ...args) - 消息会被发送到 host 页面上的 <webview> 元素\n */\n\n/**\n * 是否为ee环境\n */\nconst isee = ipc ? true : false;\n\nexport {\n  ipc,\n  isee\n}\n\n\n\n\n# api\n\n\n# ipc\n\n等于electron官方的api\n\n\n# isee\n\n是否为ee环境。可用此属性区别前端页面是在服务器环境还是用户电脑环境。\n\n\n# 旧的api\n\n\n# $ipcinvoke(route, params)\n\n * 介绍：发送异步消息（invoke/handle 模型）\n * 返回：promise\n\n# 回调语法\nhandleinvoke () {\n    this.$ipcinvoke(ipcapiroute.ipcinvokemsg, '异步-回调').then(r => {\n      console.log('r:', r);\n    });\n},\n\n# async/await语法\nasync handleinvoke2 () {\n    const msg = await this.$ipcinvoke(ipcapiroute.ipcinvokemsg, '异步');\n},\n\n\n\n# $ipcsendsync(route, params)\n\n * 介绍：发送同步消息（send/on 模型）\n * 返回：任意类型\n\n# 语法\nconst msg = this.$ipcsendsync(ipcapiroute.ipcsendsyncmsg, '同步');\n\n\n\n# $ipc\n\n * 介绍：全局ipc对象，等价于electron官方提供的 ipcrender\n\n该对象包含如下方法：\non\nonce\nremovelistener\nremovealllisteners\nsend\ninvoke\nsendsync\npostmessage\nsendto\nsendtohost\nipcrendererevent\n\n\n详细说明见：https://www.electronjs.org/zh/docs/latest/api/ipc-renderer#ipcrendereronchannel-listener\n\n\n# $ipc.send(route, params)\n\n * 介绍：ipc的send属性，向主进程发送异步消息，可以发送任意参数。\n * 返回：结果在 $ipc.on()监听的路由中\n\n# 使用\nconst params = {\n  type: 'start',\n  content: '开始'\n}\nthis.$ipc.send(ipcapiroute.ipcsendmsg, params)\n\n\n\n# $ipc.on(route, listener)\n\n * 介绍：ipc的on属性，监听 route；当新消息到达，将调用listener\n * 返回：callback\n\nthis.$ipc.on(ipcapiroute.ipcsendmsg, (event, result) => {\n  console.log('result:', result);\n\n  // 调用后端的另一个接口\n  event.sender.send(ipcapiroute.hello, 'electron-egg');\n})\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"json数据库",frontmatter:{title:"json数据库",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/ad7faa/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/050.%E6%95%B0%E6%8D%AE%E5%BA%93/010.json%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"01.v3/020.基础功能/050.数据库/010.json数据库.md",key:"v-14f32652",path:"/pages/ad7faa/",headers:[{level:3,title:"基础",slug:"基础",normalizedTitle:"基础",charIndex:51},{level:3,title:"特点",slug:"特点",normalizedTitle:"特点",charIndex:58},{level:3,title:"数据文件位置",slug:"数据文件位置",normalizedTitle:"数据文件位置",charIndex:111},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:400},{level:3,title:"更多语法",slug:"更多语法",normalizedTitle:"更多语法",charIndex:2440},{level:3,title:"Storage对象文档",slug:"storage对象文档",normalizedTitle:"storage对象文档",charIndex:2449},{level:3,title:"lodash文档",slug:"lodash文档",normalizedTitle:"lodash文档",charIndex:2473}],headersStr:"基础 特点 数据文件位置 示例 更多语法 Storage对象文档 lodash文档",content:"> ee-core: v1.2.8\n\n> ee-core: v2.0.3 重写json数据库\n\n\n# 基础\n\n\n# 特点\n\n * 小数据量: 0~100M(单库)\n * json数据库\n * 兼容lodash语法\n\n\n# 数据文件位置\n\n打包前：项目根目录\n\nelectron-egg/data/xxx.json\n\n\n打包后：软件缓存目录\n\n# windows (例子)\nC:\\Users\\Administrator\\AppData\\Roaming\\软件名(如：ee)\\data\\xxx.json\n\n# macOS (例子)\nUsers/apple/Library/Application Support/软件名(如：ee)/data/xxx.json\n\n# Linux (例子)\n$XDG_CONFIG_HOME or ~/.config/软件名(如：ee)/data/xxx.json\n\n\n\n# 示例\n\n * 连接数据\n\n'use strict';\n\nconst { Service } = require('ee-core');\n// 框架提供的数据库对象\n// ee-core:v2.0.1\nconst Storage = require('ee-core/storage'); \nconst _ = require('lodash');\n\n/**\n * 数据存储\n * @class\n */\nclass StorageService extends Service {\n\n  constructor (ctx) {\n    super(ctx);\n    \n    // jsondb数据库\n    \n    // ee-core所使用的库\n    this.systemDB = Storage.connection('system');\n    \n    // demo库\n    let jsondbOptions = {\n      driver: 'jsondb'\n    }\n    this.demoDB = Storage.connection('demo', jsondbOptions);  \n  }\n}\n\nmodule.exports = StorageService;\n\n\n * 增加数据\n\n/*\n* 增 Test data\n*/\nasync addTestData(user) {\n  const key = this.demoDBKey.test_data;\n  if (!this.demoDB.db.has(key).value()) {\n    this.demoDB.db.set(key, []).write();\n  }\n  \n  const data = this.demoDB.db\n    .get(key)\n    .push(user)\n    .write();\n  \n  return data;\n}\n\n\n * 删除数据\n\n/*\n* 删 Test data\n*/\nasync delTestData(name = '') {\n  const key = this.demoDBKey.test_data;\n  const data = this.demoDB.db\n    .get(key)\n    .remove({name: name})\n    .write();\n  \n  return data;\n}\n\n\n * 修改数据\n\n/*\n* 改 Test data\n*/\nasync updateTestData(name= '', age = 0) {\n  const key = this.demoDBKey.test_data;\n  const data = this.demoDB.db\n    .get(key)\n    .find({name: name}) // 修改找到的第一个数据，貌似无法批量修改 todo\n    .assign({age: age})\n    .write();\n  \n  return data;\n}\n\n\n * 查找数据\n\n/*\n* 查 Test data\n*/\nasync getTestData(age = 0) {\n  const key = this.demoDBKey.test_data;\n  let data = this.demoDB.db\n    .get(key)\n    //.find({age: age}) 查找单个\n    .filter(function(o) {\n      let isHas = true;\n      isHas = age === o.age ? true : false;\n      return isHas;\n    })\n    //.orderBy(['age'], ['name']) 排序\n    //.slice(0, 10) 分页\n    .value();\n  \n  if (_.isEmpty(data)) {\n    data = []\n  }\n  \n  return data;\n}\n\n/*\n* all Test data\n*/\nasync getAllTestData() {\n  const key = this.demoDBKey.test_data;\n  if (!this.demoDB.db.has(key).value()) {\n    this.demoDB.db.set(key, []).write();\n  }\n  let data = this.demoDB.db\n    .get(key)\n    .value();\n  \n  if (_.isEmpty(data)) {\n    data = []\n  }\n  \n  return data;\n}\n\n\n\n# 更多语法\n\n\n# Storage对象文档\n\n请查看：文档\n\n\n# lodash文档\n\n请查看：文档",normalizedContent:"> ee-core: v1.2.8\n\n> ee-core: v2.0.3 重写json数据库\n\n\n# 基础\n\n\n# 特点\n\n * 小数据量: 0~100m(单库)\n * json数据库\n * 兼容lodash语法\n\n\n# 数据文件位置\n\n打包前：项目根目录\n\nelectron-egg/data/xxx.json\n\n\n打包后：软件缓存目录\n\n# windows (例子)\nc:\\users\\administrator\\appdata\\roaming\\软件名(如：ee)\\data\\xxx.json\n\n# macos (例子)\nusers/apple/library/application support/软件名(如：ee)/data/xxx.json\n\n# linux (例子)\n$xdg_config_home or ~/.config/软件名(如：ee)/data/xxx.json\n\n\n\n# 示例\n\n * 连接数据\n\n'use strict';\n\nconst { service } = require('ee-core');\n// 框架提供的数据库对象\n// ee-core:v2.0.1\nconst storage = require('ee-core/storage'); \nconst _ = require('lodash');\n\n/**\n * 数据存储\n * @class\n */\nclass storageservice extends service {\n\n  constructor (ctx) {\n    super(ctx);\n    \n    // jsondb数据库\n    \n    // ee-core所使用的库\n    this.systemdb = storage.connection('system');\n    \n    // demo库\n    let jsondboptions = {\n      driver: 'jsondb'\n    }\n    this.demodb = storage.connection('demo', jsondboptions);  \n  }\n}\n\nmodule.exports = storageservice;\n\n\n * 增加数据\n\n/*\n* 增 test data\n*/\nasync addtestdata(user) {\n  const key = this.demodbkey.test_data;\n  if (!this.demodb.db.has(key).value()) {\n    this.demodb.db.set(key, []).write();\n  }\n  \n  const data = this.demodb.db\n    .get(key)\n    .push(user)\n    .write();\n  \n  return data;\n}\n\n\n * 删除数据\n\n/*\n* 删 test data\n*/\nasync deltestdata(name = '') {\n  const key = this.demodbkey.test_data;\n  const data = this.demodb.db\n    .get(key)\n    .remove({name: name})\n    .write();\n  \n  return data;\n}\n\n\n * 修改数据\n\n/*\n* 改 test data\n*/\nasync updatetestdata(name= '', age = 0) {\n  const key = this.demodbkey.test_data;\n  const data = this.demodb.db\n    .get(key)\n    .find({name: name}) // 修改找到的第一个数据，貌似无法批量修改 todo\n    .assign({age: age})\n    .write();\n  \n  return data;\n}\n\n\n * 查找数据\n\n/*\n* 查 test data\n*/\nasync gettestdata(age = 0) {\n  const key = this.demodbkey.test_data;\n  let data = this.demodb.db\n    .get(key)\n    //.find({age: age}) 查找单个\n    .filter(function(o) {\n      let ishas = true;\n      ishas = age === o.age ? true : false;\n      return ishas;\n    })\n    //.orderby(['age'], ['name']) 排序\n    //.slice(0, 10) 分页\n    .value();\n  \n  if (_.isempty(data)) {\n    data = []\n  }\n  \n  return data;\n}\n\n/*\n* all test data\n*/\nasync getalltestdata() {\n  const key = this.demodbkey.test_data;\n  if (!this.demodb.db.has(key).value()) {\n    this.demodb.db.set(key, []).write();\n  }\n  let data = this.demodb.db\n    .get(key)\n    .value();\n  \n  if (_.isempty(data)) {\n    data = []\n  }\n  \n  return data;\n}\n\n\n\n# 更多语法\n\n\n# storage对象文档\n\n请查看：文档\n\n\n# lodash文档\n\n请查看：文档",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"sqlite数据库",frontmatter:{title:"sqlite数据库",date:"2023-06-14T11:12:20.000Z",permalink:"/pages/c547b1/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/050.%E6%95%B0%E6%8D%AE%E5%BA%93/020.sqlite%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"01.v3/020.基础功能/050.数据库/020.sqlite数据库.md",key:"v-50e0c421",path:"/pages/c547b1/",headers:[{level:3,title:"特点",slug:"特点",normalizedTitle:"特点",charIndex:85},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:134},{level:3,title:"better-sqlite3 问题",slug:"better-sqlite3-问题",normalizedTitle:"better-sqlite3 问题",charIndex:487},{level:3,title:"框架历史使用的版本",slug:"框架历史使用的版本",normalizedTitle:"框架历史使用的版本",charIndex:670},{level:3,title:"数据文件位置",slug:"数据文件位置",normalizedTitle:"数据文件位置",charIndex:892},{level:3,title:"连接数据库",slug:"连接数据库",normalizedTitle:"连接数据库",charIndex:1173},{level:4,title:"options 说明",slug:"options-说明",normalizedTitle:"options 说明",charIndex:1735},{level:3,title:"简单操作：增删改查",slug:"简单操作-增删改查",normalizedTitle:"简单操作：增删改查",charIndex:2358},{level:3,title:"图形化数据（Navicat）",slug:"图形化数据-navicat",normalizedTitle:"图形化数据（navicat）",charIndex:4757},{level:3,title:"更多语法",slug:"更多语法",normalizedTitle:"更多语法",charIndex:4833},{level:3,title:"Storage对象API文档",slug:"storage对象api文档",normalizedTitle:"storage对象api文档",charIndex:4842},{level:3,title:"better-sqlite3",slug:"better-sqlite3",normalizedTitle:"better-sqlite3",charIndex:63}],headersStr:"特点 安装 better-sqlite3 问题 框架历史使用的版本 数据文件位置 连接数据库 options 说明 简单操作：增删改查 图形化数据（Navicat） 更多语法 Storage对象API文档 better-sqlite3",content:"> ee-core: v1.2.8\n\nsqlite数据库（可选）\n\n如果不需要sqlite，请删除package.json中的better-sqlite3依赖包\n\n\n# 特点\n\n * 大数据量: 0-1024GB(单库)\n * 高性能\n * 类mysql语法\n\n\n# 安装\n\n准备：需要python3环境 (macos安装Python)\n\n# 安装 node-gyp\nnpm i node-gyp -g\n\n# 安装 构建工具\nnpm install --save-dev @electron/rebuild\n\n# （必须）重新构建适合当前操作系统的sqlite\nnpm run re-sqlite\n\n# 如果sqlite报错 ...tools之类的\nnpm --vs2015 i -g --production windows-build-tools\n# 或\nnpm i -g --production windows-build-tools\n\n# 或 删除整个node_modules，重新安装\n# 或 重新安装 Visual Studio Community\n\n\n\n# better-sqlite3 问题\n\n请查看：better-sqlite3 官方安装问题文档\n\n注：ee < 2.1.6的版本需要在package.json的 scripts 对象加入\n\n\"scripts\": {\n  \"re-sqlite\": \"electron-rebuild -f -w better-sqlite3\"\n}\n\n\n安装失败？查看：常见问题\n\n\n# 框架历史使用的版本\n\n 1. node.js: v16.20.0 | electron: v21.4.4 | (better-sqlite3: v8.4.0)\n 2. node.js: v14.21.1 | electron: v13.6.9 | (better-sqlite3: v7.6.0)\n 3. node.js: v12.22.0 | electron: v12.2.3 | (better-sqlite3: v7.6.0)\n\n\n# 数据文件位置\n\n打包前：项目根目录\n\nelectron-egg/data/xxx.db\n\n\n打包后：软件缓存目录\n\n# windows (例子)\nC:\\Users\\Administrator\\AppData\\Roaming\\软件名(如：ee)\\data\\xxx.db\n\n# macOS (例子)\nUsers/apple/Library/Application Support/软件名(如：ee)/data/xxx.db\n\n# Linux (例子)\n$XDG_CONFIG_HOME or ~/.config/软件名(如：ee)/data/xxx.db\n\n\n\n# 连接数据库\n\n'use strict';\n\nconst { Service } = require('ee-core');\n// 框架提供的数据库对象\n// ee-core:v2.0.3\nconst Storage = require('ee-core/storage'); \nconst _ = require('lodash');\n\n/**\n * 数据存储\n * @class\n */\nclass StorageService extends Service {\n\n  constructor (ctx) {\n    super(ctx);\n    \n    // sqlite数据库\n    let sqliteOptions = {\n      driver: 'sqlite',\n      default: {\n        timeout: 6000,\n        verbose: console.log // 打印sql语法\n      }\n    }\n    this.demoSqliteDB = Storage.connection('sqlite-demo.db', sqliteOptions);\n  }\n \n}\n\nmodule.exports = StorageService;\n\n\n# options 说明\n\nlet sqliteOptions = {\n  driver: 'sqlite', // 驱动：jsondb、sqlite\n  default: {\n    timeout: 6000,\n    verbose: console.log // 打印sql语法\n  }\n}\n\n# default对象\n\ndefault.readonly: false\n以只读模式打开数据库连接 (默认: false).\n\ndefault.fileMustExist: false\n如果数据库不存在, 将引发错误，而不是创建新文件. 对于内存中、临时或只读数据库连接，忽略此选项 (默认: false).\n\ndefault.timeout: 5000\n在锁定的数据库上执行查询时，在引发 SQLITE_BUSY 错误之前等待的毫秒数 (默认: 5000).\n\ndefault.verbose: null\n提供一个函数，该函数使用数据库连接执行的每个SQL字符串进行调用 (默认: null).\n\ndefault.nativeBinding: \n如果您使用的是移动、转换或连接JS文件的复杂构建系统, better-sqlite3 可能无法定位其本机 C++ addon (better_sqlite3.node). \n如果你遇到这样的错误, 您可以通过使用此选项提供 better_sqlite3.node (相对于当前工作目录).\n\n\n\n# 简单操作：增删改查\n\n * 检查表是否存在，如果不存在则创建\n\n/*\n* 检查并创建表 (sqlite)\n*/\nasync checkAndCreateTableSqlite(tableName = '') {\n  if (_.isEmpty(tableName)) {\n    throw new Error(`table name is required`);\n  }\n  // 检查表是否存在\n  const userTable = this.demoSqliteDB.db.prepare('SELECT * FROM sqlite_master WHERE type=? AND name = ?');\n  const result = userTable.get('table', tableName);\n  //console.log('result:', result);\n  if (result) {\n    return;\n  }\n  \n  // 创建表\n  const create_table_user =\n    `CREATE TABLE ${tableName}\n    (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      name CHAR(50) NOT NULL,\n      age INT\n    );`\n  this.demoSqliteDB.db.exec(create_table_user);\n}\n\n\n * 增加数据\n\n/*\n* 增 Test data (sqlite)\n*/\nasync addTestDataSqlite(data) {\n  //console.log(\"add data:\", data);\n\n  let table = 'user';\n  await this.checkAndCreateTableSqlite(table);\n  \n  const insert = this.demoSqliteDB.db.prepare(`INSERT INTO ${table} (name, age) VALUES (@name, @age)`);\n  insert.run(data);\n  \n  return true;\n}\n\n\n * 删除数据\n\n/*\n* 删 Test data (sqlite)\n*/\nasync delTestDataSqlite(name = '') {\n  //console.log(\"delete name:\", name);\n\n  let table = 'user';\n  await this.checkAndCreateTableSqlite(table);\n  \n  const delUser = this.demoSqliteDB.db.prepare(`DELETE FROM ${table} WHERE name = ?`);\n  delUser.run(name);\n  \n  return true;\n}\n\n\n * 修改数据\n\n/*\n* 改 Test data (sqlite)\n*/\nasync updateTestDataSqlite(name= '', age = 0) {\n  //console.log(\"update :\", {name, age});\n  \n  let table = 'user';\n  await this.checkAndCreateTableSqlite(table);\n  \n  const updateUser = this.demoSqliteDB.db.prepare(`UPDATE ${table} SET age = ? WHERE name = ?`);\n  updateUser.run(age, name);\n  \n  return true;\n} \n\n\n * 查数据\n\n/*\n* 查 Test data (sqlite)\n*/\nasync getTestDataSqlite(age = 0) {\n  //console.log(\"select :\", {age});\n  \n  let table = 'user';\n  await this.checkAndCreateTableSqlite(table);\n  \n  const selectUser = this.demoSqliteDB.db.prepare(`SELECT * FROM ${table} WHERE age = @age`);\n  const users = selectUser.all({age: age});\n  //console.log(\"select users:\", users);\n  return users;\n}  \n  \n/*\n* all Test data (sqlite)\n*/\nasync getAllTestDataSqlite() {\n   //console.log(\"select all user\");\n\n   let table = 'user';\n   await this.checkAndCreateTableSqlite(table);\n\n   const selectAllUser = this.demoSqliteDB.db.prepare(`SELECT * FROM ${table} `);\n   const allUser =  selectAllUser.all();\n   //console.log(\"select allUser:\", allUser);\n   return allUser;\n} \n\n\n\n# 图形化数据（Navicat）\n\n * 连接本地sqlite-demo.db文件\n\n\n\n * 表数据\n\n\n\n * Mac显示资源库Library\n\n\n# 更多语法\n\n\n# Storage对象API文档\n\n请查看：Storage文档\n\n\n# better-sqlite3\n\n请查看：better-sqlite3 文档",normalizedContent:"> ee-core: v1.2.8\n\nsqlite数据库（可选）\n\n如果不需要sqlite，请删除package.json中的better-sqlite3依赖包\n\n\n# 特点\n\n * 大数据量: 0-1024gb(单库)\n * 高性能\n * 类mysql语法\n\n\n# 安装\n\n准备：需要python3环境 (macos安装python)\n\n# 安装 node-gyp\nnpm i node-gyp -g\n\n# 安装 构建工具\nnpm install --save-dev @electron/rebuild\n\n# （必须）重新构建适合当前操作系统的sqlite\nnpm run re-sqlite\n\n# 如果sqlite报错 ...tools之类的\nnpm --vs2015 i -g --production windows-build-tools\n# 或\nnpm i -g --production windows-build-tools\n\n# 或 删除整个node_modules，重新安装\n# 或 重新安装 visual studio community\n\n\n\n# better-sqlite3 问题\n\n请查看：better-sqlite3 官方安装问题文档\n\n注：ee < 2.1.6的版本需要在package.json的 scripts 对象加入\n\n\"scripts\": {\n  \"re-sqlite\": \"electron-rebuild -f -w better-sqlite3\"\n}\n\n\n安装失败？查看：常见问题\n\n\n# 框架历史使用的版本\n\n 1. node.js: v16.20.0 | electron: v21.4.4 | (better-sqlite3: v8.4.0)\n 2. node.js: v14.21.1 | electron: v13.6.9 | (better-sqlite3: v7.6.0)\n 3. node.js: v12.22.0 | electron: v12.2.3 | (better-sqlite3: v7.6.0)\n\n\n# 数据文件位置\n\n打包前：项目根目录\n\nelectron-egg/data/xxx.db\n\n\n打包后：软件缓存目录\n\n# windows (例子)\nc:\\users\\administrator\\appdata\\roaming\\软件名(如：ee)\\data\\xxx.db\n\n# macos (例子)\nusers/apple/library/application support/软件名(如：ee)/data/xxx.db\n\n# linux (例子)\n$xdg_config_home or ~/.config/软件名(如：ee)/data/xxx.db\n\n\n\n# 连接数据库\n\n'use strict';\n\nconst { service } = require('ee-core');\n// 框架提供的数据库对象\n// ee-core:v2.0.3\nconst storage = require('ee-core/storage'); \nconst _ = require('lodash');\n\n/**\n * 数据存储\n * @class\n */\nclass storageservice extends service {\n\n  constructor (ctx) {\n    super(ctx);\n    \n    // sqlite数据库\n    let sqliteoptions = {\n      driver: 'sqlite',\n      default: {\n        timeout: 6000,\n        verbose: console.log // 打印sql语法\n      }\n    }\n    this.demosqlitedb = storage.connection('sqlite-demo.db', sqliteoptions);\n  }\n \n}\n\nmodule.exports = storageservice;\n\n\n# options 说明\n\nlet sqliteoptions = {\n  driver: 'sqlite', // 驱动：jsondb、sqlite\n  default: {\n    timeout: 6000,\n    verbose: console.log // 打印sql语法\n  }\n}\n\n# default对象\n\ndefault.readonly: false\n以只读模式打开数据库连接 (默认: false).\n\ndefault.filemustexist: false\n如果数据库不存在, 将引发错误，而不是创建新文件. 对于内存中、临时或只读数据库连接，忽略此选项 (默认: false).\n\ndefault.timeout: 5000\n在锁定的数据库上执行查询时，在引发 sqlite_busy 错误之前等待的毫秒数 (默认: 5000).\n\ndefault.verbose: null\n提供一个函数，该函数使用数据库连接执行的每个sql字符串进行调用 (默认: null).\n\ndefault.nativebinding: \n如果您使用的是移动、转换或连接js文件的复杂构建系统, better-sqlite3 可能无法定位其本机 c++ addon (better_sqlite3.node). \n如果你遇到这样的错误, 您可以通过使用此选项提供 better_sqlite3.node (相对于当前工作目录).\n\n\n\n# 简单操作：增删改查\n\n * 检查表是否存在，如果不存在则创建\n\n/*\n* 检查并创建表 (sqlite)\n*/\nasync checkandcreatetablesqlite(tablename = '') {\n  if (_.isempty(tablename)) {\n    throw new error(`table name is required`);\n  }\n  // 检查表是否存在\n  const usertable = this.demosqlitedb.db.prepare('select * from sqlite_master where type=? and name = ?');\n  const result = usertable.get('table', tablename);\n  //console.log('result:', result);\n  if (result) {\n    return;\n  }\n  \n  // 创建表\n  const create_table_user =\n    `create table ${tablename}\n    (\n      id integer primary key autoincrement,\n      name char(50) not null,\n      age int\n    );`\n  this.demosqlitedb.db.exec(create_table_user);\n}\n\n\n * 增加数据\n\n/*\n* 增 test data (sqlite)\n*/\nasync addtestdatasqlite(data) {\n  //console.log(\"add data:\", data);\n\n  let table = 'user';\n  await this.checkandcreatetablesqlite(table);\n  \n  const insert = this.demosqlitedb.db.prepare(`insert into ${table} (name, age) values (@name, @age)`);\n  insert.run(data);\n  \n  return true;\n}\n\n\n * 删除数据\n\n/*\n* 删 test data (sqlite)\n*/\nasync deltestdatasqlite(name = '') {\n  //console.log(\"delete name:\", name);\n\n  let table = 'user';\n  await this.checkandcreatetablesqlite(table);\n  \n  const deluser = this.demosqlitedb.db.prepare(`delete from ${table} where name = ?`);\n  deluser.run(name);\n  \n  return true;\n}\n\n\n * 修改数据\n\n/*\n* 改 test data (sqlite)\n*/\nasync updatetestdatasqlite(name= '', age = 0) {\n  //console.log(\"update :\", {name, age});\n  \n  let table = 'user';\n  await this.checkandcreatetablesqlite(table);\n  \n  const updateuser = this.demosqlitedb.db.prepare(`update ${table} set age = ? where name = ?`);\n  updateuser.run(age, name);\n  \n  return true;\n} \n\n\n * 查数据\n\n/*\n* 查 test data (sqlite)\n*/\nasync gettestdatasqlite(age = 0) {\n  //console.log(\"select :\", {age});\n  \n  let table = 'user';\n  await this.checkandcreatetablesqlite(table);\n  \n  const selectuser = this.demosqlitedb.db.prepare(`select * from ${table} where age = @age`);\n  const users = selectuser.all({age: age});\n  //console.log(\"select users:\", users);\n  return users;\n}  \n  \n/*\n* all test data (sqlite)\n*/\nasync getalltestdatasqlite() {\n   //console.log(\"select all user\");\n\n   let table = 'user';\n   await this.checkandcreatetablesqlite(table);\n\n   const selectalluser = this.demosqlitedb.db.prepare(`select * from ${table} `);\n   const alluser =  selectalluser.all();\n   //console.log(\"select alluser:\", alluser);\n   return alluser;\n} \n\n\n\n# 图形化数据（navicat）\n\n * 连接本地sqlite-demo.db文件\n\n\n\n * 表数据\n\n\n\n * mac显示资源库library\n\n\n# 更多语法\n\n\n# storage对象api文档\n\n请查看：storage文档\n\n\n# better-sqlite3\n\n请查看：better-sqlite3 文档",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"jobs说明",frontmatter:{title:"jobs说明",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/afbfa0/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/060.%E4%BB%BB%E5%8A%A1/010.Jobs%E8%AF%B4%E6%98%8E.html",relativePath:"01.v3/020.基础功能/060.任务/010.Jobs说明.md",key:"v-47347fd0",path:"/pages/afbfa0/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"业务目录",slug:"业务目录",normalizedTitle:"业务目录",charIndex:160}],headersStr:"介绍 业务目录",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\nEE框架的主进程为单进程。优点是开发效率高，但是应对计算密集型业务时，需要开发者自己学会使用 child process 或者封装渲染进程执行脚本，还需要实现通信和加密等功能；对于开发者而言难度较高。\n\n框架提供了封装好的 任务模块，可以轻松实现开发者的需求。\n\n\n# 业务目录\n\n./electron/jobs\n",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\nee框架的主进程为单进程。优点是开发效率高，但是应对计算密集型业务时，需要开发者自己学会使用 child process 或者封装渲染进程执行脚本，还需要实现通信和加密等功能；对于开发者而言难度较高。\n\n框架提供了封装好的 任务模块，可以轻松实现开发者的需求。\n\n\n# 业务目录\n\n./electron/jobs\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"ChildJob",frontmatter:{title:"ChildJob",date:"2023-06-21T11:12:20.000Z",permalink:"/pages/036718/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/060.%E4%BB%BB%E5%8A%A1/020.ChildJob.html",relativePath:"01.v3/020.基础功能/060.任务/020.ChildJob.md",key:"v-2d12da79",path:"/pages/036718/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:258},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:283}],headersStr:"介绍 目录 使用方法",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\nChildJob基于node.js子进程实现。触发任务时才会创建进程，任务执行完毕后，必须调用进程退出的方法：Ps.exit()， 否则进程无法退出，造成资源浪费。\n\n优点：随用随取，用完释放，不过多占用电脑资源。\n\n不足：频繁、大量创建任务时，会有启动进程的开销，业务略微延迟，此类业务推荐使用ChildPoolJob。\n\n> 注意：node.js子进程中无法使用所有涉及electron的api（electron技术本身无法支持），相关业务请写在主进程\n\n\n# 目录\n\n./electron/jobs\n\n\n\n# 使用方法\n\n 1. 编写任务代码\n\n# ./electron/jobs/example/timer.js\n\nconst Job = require('ee-core/jobs/baseJobClass');\nconst Loader = require('ee-core/loader');\nconst Log = require('ee-core/log');\nconst Ps = require('ee-core/ps');\nconst { childMessage } = require('ee-core/message');\nconst Hello = Loader.requireJobsModule('./example/hello');\n\n/**\n * example - TimerJob\n * @class\n */\nclass TimerJob extends Job {\n\n  constructor(params) {\n    super();\n    this.params = params;\n  }\n\n  /**\n   * handle()方法是必要的，且会被自动调用\n   */\n  async handle () {\n    Log.info(\"[child-process] TimerJob params: \", this.params);\n\n    // 计时器任务\n    let number = 0;\n    let jobId = this.params.jobId;\n    let eventName = 'job-timer-progress-' + jobId;\n    let timer = setInterval(function() {\n      Hello.welcome();\n\n      childMessage.send(eventName, {jobId, number, end: false});\n      number++;\n    }, 1000);\n\n    // 用 setTimeout 模拟任务运行时长\n    setTimeout(() => {\n      // 关闭定时器\n      clearInterval(timer);\n\n      // 任务结束，重置前端显示\n      childMessage.send(eventName, {jobId, number:0, pid:0, end: true});\n\n      // 如果是childJob任务，必须调用 Ps.exit() 方法，让进程退出，否则会常驻内存\n      // 如果是childPoolJob任务，常驻内存，等待下一个业务\n      if (Ps.isChildJob()) {\n        Ps.exit();\n      }\n    }, 10 * 1000)\n  }   \n}\n\nTimerJob.toString = () => '[class TimerJob]';\nmodule.exports = TimerJob;\n\n\n 2. 触发任务\n\n# ./electron/service/example.js\n\n# 引入模块\nconst { ChildJob } = require('ee-core/jobs');\n\n/**\n * 示例服务（service层为单例）\n * @class\n */\nclass ExampleService extends Service {\n\n  constructor(ctx) {\n    super(ctx);\n\n    // 在构造函数中初始化一些变量\n    this.myJob = new ChildJob();\n    this.taskForJob = {};\n  }\n\n  /**\n   * 执行任务\n   */ \n  doJob(jobId, action, event) {\n    let res = {};\n    let oneTask;\n    const channel = 'controller.example.timerJobProgress';\n    if (action == 'create') {\n      // 执行任务及监听进度\n      let eventName = 'job-timer-progress-' + jobId;\n      const timerTask = this.myJob.exec('./jobs/example/timer', {jobId});\n      timerTask.emitter.on(eventName, (data) => {\n        Log.info('[main-process] timerTask, from TimerJob data:', data);\n        // 发送数据到渲染进程\n        event.sender.send(`${channel}`, data)\n      })\n    \n      // 执行任务及监听进度 异步\n      // myjob.execPromise('./jobs/example/timer', {jobId}).then(task => {\n      //   task.emitter.on(eventName, (data) => {\n      //     Log.info('[main-process] timerTask, from TimerJob data:', data);\n      //     // 发送数据到渲染进程\n      //     event.sender.send(`${channel}`, data)\n      //   })\n      // });\n\n      res.pid = timerTask.pid; \n      this.taskForJob[jobId] = timerTask;\n    }\n    if (action == 'close') {\n      oneTask = this.taskForJob[jobId];\n      oneTask.kill();\n      event.sender.send(`${channel}`, {jobId, number:0, pid:0});\n    }    \n\n    return res;\n  }\n}\n\nExampleService.toString = () => '[class ExampleService]';\nmodule.exports = ExampleService;\n",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\nchildjob基于node.js子进程实现。触发任务时才会创建进程，任务执行完毕后，必须调用进程退出的方法：ps.exit()， 否则进程无法退出，造成资源浪费。\n\n优点：随用随取，用完释放，不过多占用电脑资源。\n\n不足：频繁、大量创建任务时，会有启动进程的开销，业务略微延迟，此类业务推荐使用childpooljob。\n\n> 注意：node.js子进程中无法使用所有涉及electron的api（electron技术本身无法支持），相关业务请写在主进程\n\n\n# 目录\n\n./electron/jobs\n\n\n\n# 使用方法\n\n 1. 编写任务代码\n\n# ./electron/jobs/example/timer.js\n\nconst job = require('ee-core/jobs/basejobclass');\nconst loader = require('ee-core/loader');\nconst log = require('ee-core/log');\nconst ps = require('ee-core/ps');\nconst { childmessage } = require('ee-core/message');\nconst hello = loader.requirejobsmodule('./example/hello');\n\n/**\n * example - timerjob\n * @class\n */\nclass timerjob extends job {\n\n  constructor(params) {\n    super();\n    this.params = params;\n  }\n\n  /**\n   * handle()方法是必要的，且会被自动调用\n   */\n  async handle () {\n    log.info(\"[child-process] timerjob params: \", this.params);\n\n    // 计时器任务\n    let number = 0;\n    let jobid = this.params.jobid;\n    let eventname = 'job-timer-progress-' + jobid;\n    let timer = setinterval(function() {\n      hello.welcome();\n\n      childmessage.send(eventname, {jobid, number, end: false});\n      number++;\n    }, 1000);\n\n    // 用 settimeout 模拟任务运行时长\n    settimeout(() => {\n      // 关闭定时器\n      clearinterval(timer);\n\n      // 任务结束，重置前端显示\n      childmessage.send(eventname, {jobid, number:0, pid:0, end: true});\n\n      // 如果是childjob任务，必须调用 ps.exit() 方法，让进程退出，否则会常驻内存\n      // 如果是childpooljob任务，常驻内存，等待下一个业务\n      if (ps.ischildjob()) {\n        ps.exit();\n      }\n    }, 10 * 1000)\n  }   \n}\n\ntimerjob.tostring = () => '[class timerjob]';\nmodule.exports = timerjob;\n\n\n 2. 触发任务\n\n# ./electron/service/example.js\n\n# 引入模块\nconst { childjob } = require('ee-core/jobs');\n\n/**\n * 示例服务（service层为单例）\n * @class\n */\nclass exampleservice extends service {\n\n  constructor(ctx) {\n    super(ctx);\n\n    // 在构造函数中初始化一些变量\n    this.myjob = new childjob();\n    this.taskforjob = {};\n  }\n\n  /**\n   * 执行任务\n   */ \n  dojob(jobid, action, event) {\n    let res = {};\n    let onetask;\n    const channel = 'controller.example.timerjobprogress';\n    if (action == 'create') {\n      // 执行任务及监听进度\n      let eventname = 'job-timer-progress-' + jobid;\n      const timertask = this.myjob.exec('./jobs/example/timer', {jobid});\n      timertask.emitter.on(eventname, (data) => {\n        log.info('[main-process] timertask, from timerjob data:', data);\n        // 发送数据到渲染进程\n        event.sender.send(`${channel}`, data)\n      })\n    \n      // 执行任务及监听进度 异步\n      // myjob.execpromise('./jobs/example/timer', {jobid}).then(task => {\n      //   task.emitter.on(eventname, (data) => {\n      //     log.info('[main-process] timertask, from timerjob data:', data);\n      //     // 发送数据到渲染进程\n      //     event.sender.send(`${channel}`, data)\n      //   })\n      // });\n\n      res.pid = timertask.pid; \n      this.taskforjob[jobid] = timertask;\n    }\n    if (action == 'close') {\n      onetask = this.taskforjob[jobid];\n      onetask.kill();\n      event.sender.send(`${channel}`, {jobid, number:0, pid:0});\n    }    \n\n    return res;\n  }\n}\n\nexampleservice.tostring = () => '[class exampleservice]';\nmodule.exports = exampleservice;\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"ChildPoolJob",frontmatter:{title:"ChildPoolJob",date:"2023-06-21T11:12:20.000Z",permalink:"/pages/2341b1/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/060.%E4%BB%BB%E5%8A%A1/030.ChildPoolJob.html",relativePath:"01.v3/020.基础功能/060.任务/030.ChildPoolJob.md",key:"v-85823422",path:"/pages/2341b1/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:166},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:191}],headersStr:"介绍 目录 使用方法",content:"> ee-core：v2.1.0\n\n\n# 介绍\n\nChildPoolJob基于node.js子进程实现。可以创建一批进程常驻内存，传递任务后直接执行，没有创建、销毁进程的性能开销，延迟低。\n\n> 注意：node.js子进程中无法使用所有涉及electron的api（electron技术本身无法支持），相关业务请写在主进程\n\n\n# 目录\n\n./electron/jobs\n\n\n\n# 使用方法\n\n 1. 编写任务代码\n\nconst Job = require('ee-core/jobs/baseJobClass');\nconst Loader = require('ee-core/loader');\nconst Log = require('ee-core/log');\nconst Ps = require('ee-core/ps');\nconst { childMessage } = require('ee-core/message');\nconst Hello = Loader.requireJobsModule('./example/hello');\n\n/**\n * example - TimerJob\n * @class\n */\nclass TimerJob extends Job {\n\n  constructor(params) {\n    super();\n    this.params = params;\n  }\n\n  /**\n   * handle()方法是必要的，且会被自动调用\n   */\n  async handle () {\n    Log.info(\"[child-process] TimerJob params: \", this.params);\n\n    // 计时器任务\n    let number = 0;\n    let jobId = this.params.jobId;\n    let eventName = 'job-timer-progress-' + jobId;\n    let timer = setInterval(function() {\n      Hello.welcome();\n\n      childMessage.send(eventName, {jobId, number, end: false});\n      number++;\n    }, 1000);\n\n    // 用 setTimeout 模拟任务运行时长\n    setTimeout(() => {\n      // 关闭定时器\n      clearInterval(timer);\n\n      // 任务结束，重置前端显示\n      childMessage.send(eventName, {jobId, number:0, pid:0, end: true});\n\n      // 如果是childJob任务，必须调用 Ps.exit() 方法，让进程退出，否则会常驻内存\n      // 如果是childPoolJob任务，常驻内存，等待下一个业务\n      if (Ps.isChildJob()) {\n        Ps.exit();\n      }\n    }, 10 * 1000)\n  }   \n}\n\nTimerJob.toString = () => '[class TimerJob]';\nmodule.exports = TimerJob;\n\n\n\n 2. 触发任务\n\n# ./electron/service/example.js\n\n# 引入模块\nconst { ChildPoolJob } = require('ee-core/jobs');\n\n/**\n * 示例服务（service层为单例）\n * @class\n */\nclass ExampleService extends Service {\n\n  constructor(ctx) {\n    super(ctx);\n\n    // 在构造函数中初始化一些变量\n    this.myJobPool = new ChildPoolJob();\n  }\n\n  /**\n   * 创建pool\n   */ \n  doCreatePool(num, event) {\n    const channel = 'controller.example.createPoolNotice';\n    this.myJobPool.create(num).then(pids => {\n      event.reply(`${channel}`, pids);\n    });\n  }\n\n  /**\n   * 通过进程池执行任务\n   */ \n  doJobByPool(jobId, action, event) {\n    let res = {};\n    const channel = 'controller.example.timerJobProgress';\n    if (action == 'run') {\n      // 异步-执行任务及监听进度\n      this.myJobPool.runPromise('./jobs/example/timer', {jobId}).then(task => {\n        \n        // 监听器名称唯一，否则会出现重复监听。\n        // 任务完成时，需要移除监听器，防止内存泄漏\n        let eventName = 'job-timer-progress-' + jobId;\n        task.emitter.on(eventName, (data) => {\n          Log.info('[main-process] [ChildPoolJob] timerTask, from TimerJob data:', data);\n  \n          // 发送数据到渲染进程\n          event.sender.send(`${channel}`, data)\n\n          // 如果收到任务完成的消息，移除监听器\n          if (data.end) {\n            task.emitter.removeAllListeners(eventName);\n          }\n        });\n        res.pid = task.pid; \n      });\n    }\n    return res;\n  }\n}\n\nExampleService.toString = () => '[class ExampleService]';\nmodule.exports = ExampleService;\n",normalizedContent:"> ee-core：v2.1.0\n\n\n# 介绍\n\nchildpooljob基于node.js子进程实现。可以创建一批进程常驻内存，传递任务后直接执行，没有创建、销毁进程的性能开销，延迟低。\n\n> 注意：node.js子进程中无法使用所有涉及electron的api（electron技术本身无法支持），相关业务请写在主进程\n\n\n# 目录\n\n./electron/jobs\n\n\n\n# 使用方法\n\n 1. 编写任务代码\n\nconst job = require('ee-core/jobs/basejobclass');\nconst loader = require('ee-core/loader');\nconst log = require('ee-core/log');\nconst ps = require('ee-core/ps');\nconst { childmessage } = require('ee-core/message');\nconst hello = loader.requirejobsmodule('./example/hello');\n\n/**\n * example - timerjob\n * @class\n */\nclass timerjob extends job {\n\n  constructor(params) {\n    super();\n    this.params = params;\n  }\n\n  /**\n   * handle()方法是必要的，且会被自动调用\n   */\n  async handle () {\n    log.info(\"[child-process] timerjob params: \", this.params);\n\n    // 计时器任务\n    let number = 0;\n    let jobid = this.params.jobid;\n    let eventname = 'job-timer-progress-' + jobid;\n    let timer = setinterval(function() {\n      hello.welcome();\n\n      childmessage.send(eventname, {jobid, number, end: false});\n      number++;\n    }, 1000);\n\n    // 用 settimeout 模拟任务运行时长\n    settimeout(() => {\n      // 关闭定时器\n      clearinterval(timer);\n\n      // 任务结束，重置前端显示\n      childmessage.send(eventname, {jobid, number:0, pid:0, end: true});\n\n      // 如果是childjob任务，必须调用 ps.exit() 方法，让进程退出，否则会常驻内存\n      // 如果是childpooljob任务，常驻内存，等待下一个业务\n      if (ps.ischildjob()) {\n        ps.exit();\n      }\n    }, 10 * 1000)\n  }   \n}\n\ntimerjob.tostring = () => '[class timerjob]';\nmodule.exports = timerjob;\n\n\n\n 2. 触发任务\n\n# ./electron/service/example.js\n\n# 引入模块\nconst { childpooljob } = require('ee-core/jobs');\n\n/**\n * 示例服务（service层为单例）\n * @class\n */\nclass exampleservice extends service {\n\n  constructor(ctx) {\n    super(ctx);\n\n    // 在构造函数中初始化一些变量\n    this.myjobpool = new childpooljob();\n  }\n\n  /**\n   * 创建pool\n   */ \n  docreatepool(num, event) {\n    const channel = 'controller.example.createpoolnotice';\n    this.myjobpool.create(num).then(pids => {\n      event.reply(`${channel}`, pids);\n    });\n  }\n\n  /**\n   * 通过进程池执行任务\n   */ \n  dojobbypool(jobid, action, event) {\n    let res = {};\n    const channel = 'controller.example.timerjobprogress';\n    if (action == 'run') {\n      // 异步-执行任务及监听进度\n      this.myjobpool.runpromise('./jobs/example/timer', {jobid}).then(task => {\n        \n        // 监听器名称唯一，否则会出现重复监听。\n        // 任务完成时，需要移除监听器，防止内存泄漏\n        let eventname = 'job-timer-progress-' + jobid;\n        task.emitter.on(eventname, (data) => {\n          log.info('[main-process] [childpooljob] timertask, from timerjob data:', data);\n  \n          // 发送数据到渲染进程\n          event.sender.send(`${channel}`, data)\n\n          // 如果收到任务完成的消息，移除监听器\n          if (data.end) {\n            task.emitter.removealllisteners(eventname);\n          }\n        });\n        res.pid = task.pid; \n      });\n    }\n    return res;\n  }\n}\n\nexampleservice.tostring = () => '[class exampleservice]';\nmodule.exports = exampleservice;\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"渲染进程",frontmatter:{title:"渲染进程",date:"2023-06-19T11:12:20.000Z",permalink:"/pages/bd2084/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/060.%E4%BB%BB%E5%8A%A1/040.RenderJob.html",relativePath:"01.v3/020.基础功能/060.任务/040.RenderJob.md",key:"v-53d7913d",path:"/pages/bd2084/",headersStr:null,content:"# 渲染进程\n\nTodo 似乎和childjob差别不大，待验证......",normalizedContent:"# 渲染进程\n\ntodo 似乎和childjob差别不大，待验证......",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"日志",frontmatter:{title:"日志",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/0d08b1/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/072.%E6%97%A5%E5%BF%97.html",relativePath:"01.v3/020.基础功能/072.日志.md",key:"v-56d35d64",path:"/pages/0d08b1/",headers:[{level:3,title:"记录日志",slug:"记录日志",normalizedTitle:"记录日志",charIndex:22},{level:3,title:"日志位置",slug:"日志位置",normalizedTitle:"日志位置",charIndex:255},{level:3,title:"打包前：项目根目录",slug:"打包前-项目根目录",normalizedTitle:"打包前：项目根目录",charIndex:264},{level:3,title:"打包后：软件缓存目录",slug:"打包后-软件缓存目录",normalizedTitle:"打包后：软件缓存目录",charIndex:298},{level:3,title:"自定义日志位置",slug:"自定义日志位置",normalizedTitle:"自定义日志位置",charIndex:512},{level:3,title:"json格式的日志文件",slug:"json格式的日志文件",normalizedTitle:"json格式的日志文件",charIndex:621}],headersStr:"记录日志 日志位置 打包前：项目根目录 打包后：软件缓存目录 自定义日志位置 json格式的日志文件",content:"> ee-core: v2.0.3\n\n\n# 记录日志\n\nconst Log = require('ee-core/log');\n\nLog.info()\nLog.error()\nLog.debug()\nLog.warn()\nLog.logger.info()\nLog.logger.error()\nLog.logger.debug()\nLog.logger.warn()\n\n# 高级语法，占位符\n%s：字符串\n%d：整数\n%i：整数\n%f：浮点数\n%o：obj对象\n%O：obj对象\n%c：CSS样式\n\n\n\n# 日志位置\n\n\n# 打包前：项目根目录\n\nelectron-egg/logs\n\n\n\n# 打包后：软件缓存目录\n\n# windows (例子)\nC:\\Users\\Administrator\\AppData\\Roaming\\软件名(如：ee)\\logs\n\n# macOS (例子)\nUsers/apple/Library/Application Support/软件名(如：ee)/logs\n\n# Linux (例子)\n$XDG_CONFIG_HOME or ~/.config/软件名(如：ee)/logs\n\n\n\n# 自定义日志位置\n\n# 编辑config.default.js文件\nconfig.logger = {\n  dir: path.join(appInfo.execDir, 'logs'), // 日志目录\n}\n\n\n\n# json格式的日志文件\n\n# 编辑config.default.js文件\nconfig.logger = {\n  outputJSON: true,\n}\n",normalizedContent:"> ee-core: v2.0.3\n\n\n# 记录日志\n\nconst log = require('ee-core/log');\n\nlog.info()\nlog.error()\nlog.debug()\nlog.warn()\nlog.logger.info()\nlog.logger.error()\nlog.logger.debug()\nlog.logger.warn()\n\n# 高级语法，占位符\n%s：字符串\n%d：整数\n%i：整数\n%f：浮点数\n%o：obj对象\n%o：obj对象\n%c：css样式\n\n\n\n# 日志位置\n\n\n# 打包前：项目根目录\n\nelectron-egg/logs\n\n\n\n# 打包后：软件缓存目录\n\n# windows (例子)\nc:\\users\\administrator\\appdata\\roaming\\软件名(如：ee)\\logs\n\n# macos (例子)\nusers/apple/library/application support/软件名(如：ee)/logs\n\n# linux (例子)\n$xdg_config_home or ~/.config/软件名(如：ee)/logs\n\n\n\n# 自定义日志位置\n\n# 编辑config.default.js文件\nconfig.logger = {\n  dir: path.join(appinfo.execdir, 'logs'), // 日志目录\n}\n\n\n\n# json格式的日志文件\n\n# 编辑config.default.js文件\nconfig.logger = {\n  outputjson: true,\n}\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"额外资源目录",frontmatter:{title:"额外资源目录",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/7fe540/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/074.%E9%A2%9D%E5%A4%96%E8%B5%84%E6%BA%90%E7%9B%AE%E5%BD%95.html",relativePath:"01.v3/020.基础功能/074.额外资源目录.md",key:"v-0f0fa256",path:"/pages/7fe540/",headers:[{level:3,title:"额外资源位置",slug:"额外资源位置",normalizedTitle:"额外资源位置",charIndex:2},{level:3,title:"打包前：项目根目录",slug:"打包前-项目根目录",normalizedTitle:"打包前：项目根目录",charIndex:13},{level:3,title:"打包后：软件安装目录",slug:"打包后-软件安装目录",normalizedTitle:"打包后：软件安装目录",charIndex:63}],headersStr:"额外资源位置 打包前：项目根目录 打包后：软件安装目录",content:"# 额外资源位置\n\n\n# 打包前：项目根目录\n\nelectron-egg/build/extraResources\n\n\n\n# 打包后：软件安装目录\n\n# windows (例子)\nD:\\test\\ee\\resources\\extraResources\n\n# macOS (例子)\n/Applications/ee.app/Contents/Resources/extraResources\n\n# Linux (例子)\n...\n",normalizedContent:"# 额外资源位置\n\n\n# 打包前：项目根目录\n\nelectron-egg/build/extraresources\n\n\n\n# 打包后：软件安装目录\n\n# windows (例子)\nd:\\test\\ee\\resources\\extraresources\n\n# macos (例子)\n/applications/ee.app/contents/resources/extraresources\n\n# linux (例子)\n...\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"调试",frontmatter:{title:"调试",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/64001c/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/076.%E8%B0%83%E8%AF%95.html",relativePath:"01.v3/020.基础功能/076.调试.md",key:"v-2e0ff7c7",path:"/pages/64001c/",headers:[{level:3,title:"开发者工具栏",slug:"开发者工具栏",normalizedTitle:"开发者工具栏",charIndex:2},{level:3,title:"主进程",slug:"主进程",normalizedTitle:"主进程",charIndex:236},{level:3,title:"运行调试",slug:"运行调试",normalizedTitle:"运行调试",charIndex:707}],headersStr:"开发者工具栏 主进程 运行调试",content:'# 开发者工具栏\n\n配置文件 config.default.js\n\n/**\n * 应用程序顶部菜单\n *\n * false - 关闭\n * true - 打开\n * \'dev-show\' - dev环境打开，prod环境关闭\n */\nconfig.openAppMenu = true;\n\n\n在启动的应用程序界面，菜单中找到 view -> toggle developer tool ，点击打开：控制台工具。\n\n如果软件运行异常，可以通过该方式检查是否有报错。\n\n\n# 主进程\n\n使用VSCode调试\n\n菜单栏点击运行->添加配置->Node.js\n\n{\n  "version": "0.2.0",\n  "configurations": [\n    {\n      "name": "EE框架-local模式-本地",\n      "type": "node",\n      "request": "launch",\n      "cwd": "${workspaceFolder}",\n      "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron",\n      "windows": {\n        "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron.cmd"\n      },\n      "args": [\n        ".",\n        "--env=local"\n      ]\n    }\n  ]\n}\n\n\n\n# 运行调试\n\n',normalizedContent:'# 开发者工具栏\n\n配置文件 config.default.js\n\n/**\n * 应用程序顶部菜单\n *\n * false - 关闭\n * true - 打开\n * \'dev-show\' - dev环境打开，prod环境关闭\n */\nconfig.openappmenu = true;\n\n\n在启动的应用程序界面，菜单中找到 view -> toggle developer tool ，点击打开：控制台工具。\n\n如果软件运行异常，可以通过该方式检查是否有报错。\n\n\n# 主进程\n\n使用vscode调试\n\n菜单栏点击运行->添加配置->node.js\n\n{\n  "version": "0.2.0",\n  "configurations": [\n    {\n      "name": "ee框架-local模式-本地",\n      "type": "node",\n      "request": "launch",\n      "cwd": "${workspacefolder}",\n      "runtimeexecutable": "${workspacefolder}/node_modules/.bin/electron",\n      "windows": {\n        "runtimeexecutable": "${workspacefolder}/node_modules/.bin/electron.cmd"\n      },\n      "args": [\n        ".",\n        "--env=local"\n      ]\n    }\n  ]\n}\n\n\n\n# 运行调试\n\n',charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"脚本工具",frontmatter:{title:"脚本工具",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/c0859e/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/078.%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7.html",relativePath:"01.v3/020.基础功能/078.脚本工具.md",key:"v-1a1e4140",path:"/pages/c0859e/",headers:[{level:3,title:"位置",slug:"位置",normalizedTitle:"位置",charIndex:2},{level:3,title:"命令列表",slug:"命令列表",normalizedTitle:"命令列表",charIndex:44},{level:3,title:"rd",slug:"rd",normalizedTitle:"rd",charIndex:53},{level:3,title:"encrypt",slug:"encrypt",normalizedTitle:"encrypt",charIndex:111},{level:3,title:"clean",slug:"clean",normalizedTitle:"clean",charIndex:183},{level:3,title:"compress（废弃）",slug:"compress-废弃",normalizedTitle:"compress（废弃）",charIndex:221},{level:3,title:"restore（废弃）",slug:"restore-废弃",normalizedTitle:"restore（废弃）",charIndex:252}],headersStr:"位置 命令列表 rd encrypt clean compress（废弃） restore（废弃）",content:"# 位置\n\n./node_modules/ee-core/bin/tools\n\n\n\n# 命令列表\n\n\n# rd\n\n说明：移动前端资源\n参数：\n--dist_dir 指定目录，默认 ./frontend/dist\n\n\n\n# encrypt\n\n说明：代码加密\n参数：--type=\n● bytecode  字节码加密\n● confusion  压缩混淆加密 \n\n\n\n# clean\n\n> ee-core: v2.1.0\n\n清除加密的代码\n\n\n# compress（废弃）\n\n说明：混淆压缩项目代码\n\n\n\n# restore（废弃）\n\n说明：还原项目代码\n",normalizedContent:"# 位置\n\n./node_modules/ee-core/bin/tools\n\n\n\n# 命令列表\n\n\n# rd\n\n说明：移动前端资源\n参数：\n--dist_dir 指定目录，默认 ./frontend/dist\n\n\n\n# encrypt\n\n说明：代码加密\n参数：--type=\n● bytecode  字节码加密\n● confusion  压缩混淆加密 \n\n\n\n# clean\n\n> ee-core: v2.1.0\n\n清除加密的代码\n\n\n# compress（废弃）\n\n说明：混淆压缩项目代码\n\n\n\n# restore（废弃）\n\n说明：还原项目代码\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"DLL使用",frontmatter:{title:"DLL使用",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/e13483/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/081.dll%E4%BD%BF%E7%94%A8.html",relativePath:"01.v3/020.基础功能/081.dll使用.md",key:"v-760f3a82",path:"/pages/e13483/",headers:[{level:3,title:"准备环境",slug:"准备环境",normalizedTitle:"准备环境",charIndex:80},{level:3,title:"测试代码",slug:"测试代码",normalizedTitle:"测试代码",charIndex:537},{level:3,title:"测试使用的dll文件位置：",slug:"测试使用的dll文件位置",normalizedTitle:"测试使用的dll文件位置：",charIndex:2204}],headersStr:"准备环境 测试代码 测试使用的dll文件位置：",content:"Dll文件是动态链接库，桌面软件中经常需要使用。\n\n因为该库的调用，涉及许多工具的安装，因此不集成到框架中；但本文提供完整的安装使用说明，供大家参考。\n\n\n# 准备环境\n\n# 编译工具\nnpm i -g node-gyp\n\n# C++构建工具\n1. 管理员模式打开PowerShell\n2. npm --vs2015 i -g --production windows-build-tools\n   或者 npm i -g --production windows-build-tools \n   \n# 外部接口调用库\n1. npm install ref-napi         // 基本类型\n2. npm install ref-array-napi   // 数组类型\n3. npm install ref-struct-napi  // 结构体类型\n4. npm install ffi-napi         // 连接c代码和js代码\n\n# 编译 ref-napi 库\n1. cd ./node_modules/ref-napi\n2. node-gyp configure  // 配置\n3. node-gyp build      // 编译\n\n\n\n# 测试代码\n\nconst ffi = require('ffi-napi');\nvar ref = require('ref-napi');\nvar ArrayType = require('ref-array-napi');\n    \n/**\n * exec dll file\n */\nasync execDll () {\n  // 资源路径\n  let dllPath = '';\n  const dllFile = 'myDllDemo.dll';\n  if (electronApp.isPackaged) {\n    // 打包后  \n    dllPath = path.join(this.app.config.execDir, \"resources\", \"extraResources\", \"dll\", dllFile);\n  } else {\n    // 打包前\n    dllPath = path.join(this.app.config.execDir, \"build\", \"extraResources\", \"dll\", dllFile);\n  }\n\n  // 映射到C语言 int数组类型\n  var IntArray = ArrayType(ref.types.int);\n\n  // 加载 DLL文件,无需写扩展名,将DLL中的函数映射成JS方法\n  const MyDellDemo = new ffi.Library(dllPath, {\n    // 方法名必须与C函数名一致\n    add: [\n      'int', // 对应 C函数返回类型\n      ['int', 'int'] // C函数参数列表\n    ],\n    // 使用 ffi中内置类型的简写类型\n    addPtr: ['void', ['int', 'int', 'int*']],\n    // IntArray 是上面通过 ArrayType 构建出来的类型\n    initArray: ['void', [IntArray, 'int']]\n  });\n\n  // 调用add 方法\n  const res = MyDellDemo.add(1, 2);\n  console.log(`add method result of 1 + 2 is: ` + res);\n\n  // 调用addPtr 方法\n  // 使用Buffer类在C代码和JS代码之间实现了内存共享，让Buffer成为了C语言当中的指针。\n  // C函数使用指针操作函数外部的内存，所以首先需要 分配一个int类型的内存空间 第一个参数为 C语言数据类型，第二个参数为 默认值\n  var intBuf = ref.alloc(ref.types.int, 100);\n  console.log('addPtr 调用前数据>>', ref.deref(intBuf)); //获取指向的内容\n  MyDellDemo.addPtr(2, 2, intBuf); // 调用函数，传递指针\n  console.log('addPtr 调用后数据>>', ref.deref(intBuf));\n\n  // 调用initArray 方法\n  // IntArray 是前面使用ref-napi 和 ref-array-napi 库创建的数据类型,数组的长度为 8\n  // 这里一定要分配内存空间，否则 函数内的指针无法操作内存\n  let myArray = new IntArray(8);\n  MyDellDemo.initArray(myArray, 8);\n  console.log('初始化数组执行结果:');\n  for (var i = 0; i < myArray.length; i++) {\n    console.log(myArray[i]);\n  }\n\n  return true;\n} \n\n\n\n# 测试使用的dll文件位置：\n\n./build/extraResources/dll/myDllDemo.dll\n\n\n注：引用 https://blog.csdn.net/paopao_wu/article/details/107507225",normalizedContent:"dll文件是动态链接库，桌面软件中经常需要使用。\n\n因为该库的调用，涉及许多工具的安装，因此不集成到框架中；但本文提供完整的安装使用说明，供大家参考。\n\n\n# 准备环境\n\n# 编译工具\nnpm i -g node-gyp\n\n# c++构建工具\n1. 管理员模式打开powershell\n2. npm --vs2015 i -g --production windows-build-tools\n   或者 npm i -g --production windows-build-tools \n   \n# 外部接口调用库\n1. npm install ref-napi         // 基本类型\n2. npm install ref-array-napi   // 数组类型\n3. npm install ref-struct-napi  // 结构体类型\n4. npm install ffi-napi         // 连接c代码和js代码\n\n# 编译 ref-napi 库\n1. cd ./node_modules/ref-napi\n2. node-gyp configure  // 配置\n3. node-gyp build      // 编译\n\n\n\n# 测试代码\n\nconst ffi = require('ffi-napi');\nvar ref = require('ref-napi');\nvar arraytype = require('ref-array-napi');\n    \n/**\n * exec dll file\n */\nasync execdll () {\n  // 资源路径\n  let dllpath = '';\n  const dllfile = 'mydlldemo.dll';\n  if (electronapp.ispackaged) {\n    // 打包后  \n    dllpath = path.join(this.app.config.execdir, \"resources\", \"extraresources\", \"dll\", dllfile);\n  } else {\n    // 打包前\n    dllpath = path.join(this.app.config.execdir, \"build\", \"extraresources\", \"dll\", dllfile);\n  }\n\n  // 映射到c语言 int数组类型\n  var intarray = arraytype(ref.types.int);\n\n  // 加载 dll文件,无需写扩展名,将dll中的函数映射成js方法\n  const mydelldemo = new ffi.library(dllpath, {\n    // 方法名必须与c函数名一致\n    add: [\n      'int', // 对应 c函数返回类型\n      ['int', 'int'] // c函数参数列表\n    ],\n    // 使用 ffi中内置类型的简写类型\n    addptr: ['void', ['int', 'int', 'int*']],\n    // intarray 是上面通过 arraytype 构建出来的类型\n    initarray: ['void', [intarray, 'int']]\n  });\n\n  // 调用add 方法\n  const res = mydelldemo.add(1, 2);\n  console.log(`add method result of 1 + 2 is: ` + res);\n\n  // 调用addptr 方法\n  // 使用buffer类在c代码和js代码之间实现了内存共享，让buffer成为了c语言当中的指针。\n  // c函数使用指针操作函数外部的内存，所以首先需要 分配一个int类型的内存空间 第一个参数为 c语言数据类型，第二个参数为 默认值\n  var intbuf = ref.alloc(ref.types.int, 100);\n  console.log('addptr 调用前数据>>', ref.deref(intbuf)); //获取指向的内容\n  mydelldemo.addptr(2, 2, intbuf); // 调用函数，传递指针\n  console.log('addptr 调用后数据>>', ref.deref(intbuf));\n\n  // 调用initarray 方法\n  // intarray 是前面使用ref-napi 和 ref-array-napi 库创建的数据类型,数组的长度为 8\n  // 这里一定要分配内存空间，否则 函数内的指针无法操作内存\n  let myarray = new intarray(8);\n  mydelldemo.initarray(myarray, 8);\n  console.log('初始化数组执行结果:');\n  for (var i = 0; i < myarray.length; i++) {\n    console.log(myarray[i]);\n  }\n\n  return true;\n} \n\n\n\n# 测试使用的dll文件位置：\n\n./build/extraresources/dll/mydlldemo.dll\n\n\n注：引用 https://blog.csdn.net/paopao_wu/article/details/107507225",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"调用第三方程序",frontmatter:{title:"调用第三方程序",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/0b76fb/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/082.%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E7%A8%8B%E5%BA%8F.html",relativePath:"01.v3/020.基础功能/082.调用第三方程序.md",key:"v-4aa8813c",path:"/pages/0b76fb/",headers:[{level:3,title:"额外资源目录",slug:"额外资源目录",normalizedTitle:"额外资源目录",charIndex:44},{level:4,title:"内部逻辑",slug:"内部逻辑",normalizedTitle:"内部逻辑",charIndex:79},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:165},{level:3,title:"示例说明",slug:"示例说明",normalizedTitle:"示例说明",charIndex:661}],headersStr:"额外资源目录 内部逻辑 使用 示例说明",content:'在项目中，通常需要调用（打开）第三方软件，如exe、bash脚本、dll库等；\n\n\n# 额外资源目录\n\n./build/extraResources\n\n\n# 内部逻辑\n\n * 生成软件时，将 额外资源目录 一起打进软件安装包\n * 软件安装后，将资源解压到：软件安装位置/resources/extraResources\n\n\n# 使用\n\n# 打包前后资源路径不同\n# Ps.getExtraResourcesDir()会自动判断当前是打包前，还是打包后\nlet softwarePath = \'\';\nsoftwarePath = path.join(Ps.getExtraResourcesDir(), softName);\n\n# 旧语法\nif (electronApp.isPackaged) {\n  // 打包后\n  // execDir为 应用程序 exe\\dmg\\dep\\类库 等，所在目录\n  softwarePath = path.join(Ps.execDir(), "resources", "extraResources", softName);\n} else {\n  // 打包前\n  softwarePath = path.join(Ps.execDir(), "build", "extraResources", softName);\n}\n\n# demo已经在项目中，请查看\n/**\n * 调用其它程序\n */\nopenSoftware (softName) {\n  .......\n}\n\n\n\n# 示例说明\n\ndemo中powershell.exe 软件位置\n\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\n# 把它放到 ./build/extraResources 资源目录中，并测试\n',normalizedContent:'在项目中，通常需要调用（打开）第三方软件，如exe、bash脚本、dll库等；\n\n\n# 额外资源目录\n\n./build/extraresources\n\n\n# 内部逻辑\n\n * 生成软件时，将 额外资源目录 一起打进软件安装包\n * 软件安装后，将资源解压到：软件安装位置/resources/extraresources\n\n\n# 使用\n\n# 打包前后资源路径不同\n# ps.getextraresourcesdir()会自动判断当前是打包前，还是打包后\nlet softwarepath = \'\';\nsoftwarepath = path.join(ps.getextraresourcesdir(), softname);\n\n# 旧语法\nif (electronapp.ispackaged) {\n  // 打包后\n  // execdir为 应用程序 exe\\dmg\\dep\\类库 等，所在目录\n  softwarepath = path.join(ps.execdir(), "resources", "extraresources", softname);\n} else {\n  // 打包前\n  softwarepath = path.join(ps.execdir(), "build", "extraresources", softname);\n}\n\n# demo已经在项目中，请查看\n/**\n * 调用其它程序\n */\nopensoftware (softname) {\n  .......\n}\n\n\n\n# 示例说明\n\ndemo中powershell.exe 软件位置\n\nc:\\windows\\system32\\windowspowershell\\v1.0\\powershell.exe\n\n# 把它放到 ./build/extraresources 资源目录中，并测试\n',charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"远程模式",frontmatter:{title:"远程模式",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/c9eed1/",article:!1},regularPath:"/01.v3/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/090.%E8%BF%9C%E7%A8%8B%E6%A8%A1%E5%BC%8F.html",relativePath:"01.v3/020.基础功能/090.远程模式.md",key:"v-5328f47d",path:"/pages/c9eed1/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"使用场景",slug:"使用场景",normalizedTitle:"使用场景",charIndex:36},{level:3,title:"官方demo",slug:"官方demo",normalizedTitle:"官方demo",charIndex:77},{level:3,title:"开始一个项目",slug:"开始一个项目",normalizedTitle:"开始一个项目",charIndex:267},{level:3,title:"开发环境",slug:"开发环境",normalizedTitle:"开发环境",charIndex:278},{level:3,title:"生产环境",slug:"生产环境",normalizedTitle:"生产环境",charIndex:522},{level:3,title:"构建软件",slug:"构建软件",normalizedTitle:"构建软件",charIndex:727},{level:3,title:"一套前端代码多端使用",slug:"一套前端代码多端使用",normalizedTitle:"一套前端代码多端使用",charIndex:853},{level:3,title:"发挥你的想象",slug:"发挥你的想象",normalizedTitle:"发挥你的想象",charIndex:1020}],headersStr:"介绍 使用场景 官方demo 开始一个项目 开发环境 生产环境 构建软件 一套前端代码多端使用 发挥你的想象",content:"# 介绍\n\n该模式可加载web地址，而且可以使用框架中的功能。\n\n\n# 使用场景\n\n对于web项目，并且希望拥有软件客户端的用户来说，十分有用。\n\n\n# 官方demo\n\ndemo地址：http://electron-egg.kaka996.com/\n\n/**\n * 远程模式-web地址\n */    \nconfig.remoteUrl = {\n  enable: true,\n  url: 'http://electron-egg.kaka996.com/'\n};\n\n\n运行软件查看效果\n\nnpm run start\n\n\n\n\n\n# 开始一个项目\n\n\n# 开发环境\n\n 1. 启动前端\n\n# 进入【前端目录】\ncd frontend \n\n# 安装依赖\nnpm install\n\n# 启动服务\nnpm run serve\n\n\n 2. 配置\n\n// config.default.js\n\n/**\n * 远程模式-web地址\n */\nconfig.remoteUrl = {\n  enable: true,\n  url: '前端服务地址，如：http://localhost:8080/'\n};\n\n\n 3. 启动\n\nnpm run dev\n\n\n\n# 生产环境\n\n将前端构建后的资源放到你自己的服务器上，并配置nginx服务，域名。配置prod：\n\n// config.prod.js\n\n/**\n * 远程模式-web地址\n */\nexports.remoteUrl = {\n  enable: true,\n  url: '你的项目域名'\n};\n\n# 说明\nremoteUrl对象会覆盖 config.default.js 中 remoteUrl对象\n\n\n\n# 构建软件\n\n见 生成软件 ，直接从第二步开始。\n\n说明：因为加载的资源是远程服务，因此不会使用本地的前端资源，所以直接从第二步开始。\n\n注：如果配置没有生效，请删除 ./public/electron文件夹（它是加密后的文件，数据可能是旧的）\n\n\n# 一套前端代码多端使用\n\n可以用以下代码，判断当前（前端）页面环境是在服务器，还是用户电脑。\n\nconst isEE = (window.require && window.require('electron')) ? true : false;\n\n\n注：demo中并没有区分环境，浏览器访问时会有部分报错，请开发者自行处理。\n\n\n# 发挥你的想象\n\n虽然它是一个远程地址，但是它却可以发消息到主进程，发挥你的想象，创造出有趣软件。",normalizedContent:"# 介绍\n\n该模式可加载web地址，而且可以使用框架中的功能。\n\n\n# 使用场景\n\n对于web项目，并且希望拥有软件客户端的用户来说，十分有用。\n\n\n# 官方demo\n\ndemo地址：http://electron-egg.kaka996.com/\n\n/**\n * 远程模式-web地址\n */    \nconfig.remoteurl = {\n  enable: true,\n  url: 'http://electron-egg.kaka996.com/'\n};\n\n\n运行软件查看效果\n\nnpm run start\n\n\n\n\n\n# 开始一个项目\n\n\n# 开发环境\n\n 1. 启动前端\n\n# 进入【前端目录】\ncd frontend \n\n# 安装依赖\nnpm install\n\n# 启动服务\nnpm run serve\n\n\n 2. 配置\n\n// config.default.js\n\n/**\n * 远程模式-web地址\n */\nconfig.remoteurl = {\n  enable: true,\n  url: '前端服务地址，如：http://localhost:8080/'\n};\n\n\n 3. 启动\n\nnpm run dev\n\n\n\n# 生产环境\n\n将前端构建后的资源放到你自己的服务器上，并配置nginx服务，域名。配置prod：\n\n// config.prod.js\n\n/**\n * 远程模式-web地址\n */\nexports.remoteurl = {\n  enable: true,\n  url: '你的项目域名'\n};\n\n# 说明\nremoteurl对象会覆盖 config.default.js 中 remoteurl对象\n\n\n\n# 构建软件\n\n见 生成软件 ，直接从第二步开始。\n\n说明：因为加载的资源是远程服务，因此不会使用本地的前端资源，所以直接从第二步开始。\n\n注：如果配置没有生效，请删除 ./public/electron文件夹（它是加密后的文件，数据可能是旧的）\n\n\n# 一套前端代码多端使用\n\n可以用以下代码，判断当前（前端）页面环境是在服务器，还是用户电脑。\n\nconst isee = (window.require && window.require('electron')) ? true : false;\n\n\n注：demo中并没有区分环境，浏览器访问时会有部分报错，请开发者自行处理。\n\n\n# 发挥你的想象\n\n虽然它是一个远程地址，但是它却可以发消息到主进程，发挥你的想象，创造出有趣软件。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"构建",frontmatter:{title:"构建",date:"2023-06-14T11:12:20.000Z",permalink:"/pages/ad838d/",article:!1},regularPath:"/01.v3/030.%E7%94%9F%E6%88%90%E8%BD%AF%E4%BB%B6/010.%E6%9E%84%E5%BB%BA.html",relativePath:"01.v3/030.生成软件/010.构建.md",key:"v-7eda8506",path:"/pages/ad838d/",headers:[{level:3,title:"生成exe、dmg、deb可执行文件",slug:"生成exe、dmg、deb可执行文件",normalizedTitle:"生成exe、dmg、deb可执行文件",charIndex:2},{level:3,title:"准备",slug:"准备",normalizedTitle:"准备",charIndex:25},{level:3,title:"第一步：移动前端资源文件",slug:"第一步-移动前端资源文件",normalizedTitle:"第一步：移动前端资源文件",charIndex:148},{level:3,title:"第二步：代码加密 （必看）",slug:"第二步-代码加密-必看",normalizedTitle:"第二步：代码加密 （必看）",charIndex:369},{level:4,title:"不加密",slug:"不加密",normalizedTitle:"不加密",charIndex:386},{level:4,title:"加密",slug:"加密",normalizedTitle:"加密",charIndex:102},{level:3,title:"第三步：打包",slug:"第三步-打包",normalizedTitle:"第三步：打包",charIndex:693},{level:4,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:703},{level:4,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:273},{level:3,title:"第四步：找到程序",slug:"第四步-找到程序",normalizedTitle:"第四步：找到程序",charIndex:1631},{level:3,title:"2. 其它修改",slug:"_2-其它修改",normalizedTitle:"2. 其它修改",charIndex:1841}],headersStr:"生成exe、dmg、deb可执行文件 准备 第一步：移动前端资源文件 第二步：代码加密 （必看） 不加密 加密 第三步：打包 配置 命令 第四步：找到程序 2. 其它修改",content:"# 生成exe、dmg、deb可执行文件\n\n\n# 准备\n\n * 在 对应操作系统 下打包，比如：在windows下构建 xxx.exe，在MacOS下，构建xxx.dmg\n * 如果使用 bytecode加密，window区分32和64位，无法兼容运行；没有使用bytecode则忽略。\n\n\n# 第一步：移动前端资源文件\n\n# 操作如下\n1：构建资源，如vue前端项目中npm run build\n\n2：根目录：npm run rd\n\n# 预发布模式，测试一下功能是否正常 （prod环境）\n3：npm run start \n\n# 解释说明\nrd命令会把 frontend/dist 复制到 /public/dist ; 服务最终加载的是 /public/dist前端资源。\nfrontend目录代码不会被打包，防止源码泄露。\n\n\n\n# 第二步：代码加密 （必看）\n\n# 不加密\n\n未使用加密，请 删除 \"!electron/\" 。具体操作请查看：代码加密文档 中第一步。\n\n# 加密\n\n如果执行过加密，会生成加密代码：/public/electron ，框架优先读取它，源代码则不生效。\n\n开发阶段如果发现编写的代码不生效，请记得删除加密文件。\n\n> ee-core: v1.2.10\n\n# 加密\n# 说明：encrypt命令会把 electron/ 复制到 /public/electron ; 然后对其加密。\n# electron目录代码不会被打包，防止源码泄露。\nnpm run encrypt\n\n# 清除加密的代码\nnpm run clean\n\n\n详细说明：代码加密\n\n\n# 第三步：打包\n\n# 配置\n\n> electron-egg: v3.4.0 查看 builder.json\n\n注意\n\n1：请尽量让项目名唯一（electron-egg/package.json中name属性），防止和别人软件名称冲突\n\n2：打包失败，请查看常见问题。\n\n# 命令\n\n# 准备，设置国内镜像\n# 如果第一次构建长时间卡住，尝试删除 C:\\Users\\本机用户名\\AppData\\Local\\electron\\Cache 把这个目录清空，并重试\nnpm config set electron_builder_binaries_mirror=https://registry.npmmirror.com/-/binary/electron-builder-binaries/\n\n# 打包 （windows版）\nnpm run build-w\nnpm run build-w-32 (32位)\nnpm run build-w-64 (64位)\nnpm run build-w-arm64 (arm64)\n\n# 打包 （windows 免安装版）\n# ee > v2.2.1\nnpm run build-wz\nnpm run build-wz-32 (32位)\nnpm run build-wz-64 (64位)\nnpm run build-wz-arm64 (arm64)\n\n# 打包 （mac版）\nnpm run build-m\nnpm run build-m-arm64 (m1芯片架构)\n\n# 打包 （linux版）\n# ee > v2.2.1\nnpm run build-l (32位 deb包)\nnpm run build-l-64 (64位 deb包)\nnpm run build-l-arm64 (64位 deb包 arm64)\nnpm run build-l-armv7l (64位 deb包 armv7l)\nnpm run build-lr-64 (64位 rpm包)\nnpm run build-lp-64 (64位 pacman包)\n\n\n注释：如果你想了解更多平台打包功能，请参照：https://www.electron.build/\n\n\n# 第四步：找到程序\n\n# 这种是临时文件，无法使用，忽略它。\n临时文件：out/win-unpacked\n\n# 程序\n目录：electron-egg/out\nWindows安装包：out/electron-egg-windows-2.0.3.exe  \nWindows免安装包：out/ee-win-3.0.1-ia32.7z\nMac软件包：out/xxxx.dmg\nLinux软件包：out/xxx.deb \n\n\n\n# 2. 其它修改\n\n 1. 修改应用名称\n\n# 修改 ./package.json 中属性\nname：项目名称（英文）\n\n# electron-egg:v3.4.0版本，将构建配置，独立为./electron/config/builder.json 文件\nproductName: 可执行程序名称（英文）\nappId：软件id\nshortcutName：桌面快捷方式名称\n\n# 软件运行时头部名称\n# 修改 ./electron/config/config.default.js\nwindowsOption.title=  'ee框架'\n# 前端html的title标签也会影响该值，且优先级最高\n\n\n 2. 修改桌面logo\n\n# 路径\n./build/icons/256x256.png (名称和尺寸必须一致)(windows或者Linux)\n./build/icons/512x512.png (名称和尺寸必须一致)(windows或者Linux)\n./build/icons/icon.ico (macOs)\n\n\n 3. 修改最小化托盘logo\n\n# 路径\n./public/images/tray_logo.png (建议 32x32 或 16x16 )\n\n\n 4. 修改左上角logo\n\n# 代码位置\n./electron/config/config.default.js\nwindowsOption.icon= path.join(appInfo.home, 'public', 'images', 'logo-32.png'),\n# 图片位置\n./public/images/logo-32.png\n",normalizedContent:"# 生成exe、dmg、deb可执行文件\n\n\n# 准备\n\n * 在 对应操作系统 下打包，比如：在windows下构建 xxx.exe，在macos下，构建xxx.dmg\n * 如果使用 bytecode加密，window区分32和64位，无法兼容运行；没有使用bytecode则忽略。\n\n\n# 第一步：移动前端资源文件\n\n# 操作如下\n1：构建资源，如vue前端项目中npm run build\n\n2：根目录：npm run rd\n\n# 预发布模式，测试一下功能是否正常 （prod环境）\n3：npm run start \n\n# 解释说明\nrd命令会把 frontend/dist 复制到 /public/dist ; 服务最终加载的是 /public/dist前端资源。\nfrontend目录代码不会被打包，防止源码泄露。\n\n\n\n# 第二步：代码加密 （必看）\n\n# 不加密\n\n未使用加密，请 删除 \"!electron/\" 。具体操作请查看：代码加密文档 中第一步。\n\n# 加密\n\n如果执行过加密，会生成加密代码：/public/electron ，框架优先读取它，源代码则不生效。\n\n开发阶段如果发现编写的代码不生效，请记得删除加密文件。\n\n> ee-core: v1.2.10\n\n# 加密\n# 说明：encrypt命令会把 electron/ 复制到 /public/electron ; 然后对其加密。\n# electron目录代码不会被打包，防止源码泄露。\nnpm run encrypt\n\n# 清除加密的代码\nnpm run clean\n\n\n详细说明：代码加密\n\n\n# 第三步：打包\n\n# 配置\n\n> electron-egg: v3.4.0 查看 builder.json\n\n注意\n\n1：请尽量让项目名唯一（electron-egg/package.json中name属性），防止和别人软件名称冲突\n\n2：打包失败，请查看常见问题。\n\n# 命令\n\n# 准备，设置国内镜像\n# 如果第一次构建长时间卡住，尝试删除 c:\\users\\本机用户名\\appdata\\local\\electron\\cache 把这个目录清空，并重试\nnpm config set electron_builder_binaries_mirror=https://registry.npmmirror.com/-/binary/electron-builder-binaries/\n\n# 打包 （windows版）\nnpm run build-w\nnpm run build-w-32 (32位)\nnpm run build-w-64 (64位)\nnpm run build-w-arm64 (arm64)\n\n# 打包 （windows 免安装版）\n# ee > v2.2.1\nnpm run build-wz\nnpm run build-wz-32 (32位)\nnpm run build-wz-64 (64位)\nnpm run build-wz-arm64 (arm64)\n\n# 打包 （mac版）\nnpm run build-m\nnpm run build-m-arm64 (m1芯片架构)\n\n# 打包 （linux版）\n# ee > v2.2.1\nnpm run build-l (32位 deb包)\nnpm run build-l-64 (64位 deb包)\nnpm run build-l-arm64 (64位 deb包 arm64)\nnpm run build-l-armv7l (64位 deb包 armv7l)\nnpm run build-lr-64 (64位 rpm包)\nnpm run build-lp-64 (64位 pacman包)\n\n\n注释：如果你想了解更多平台打包功能，请参照：https://www.electron.build/\n\n\n# 第四步：找到程序\n\n# 这种是临时文件，无法使用，忽略它。\n临时文件：out/win-unpacked\n\n# 程序\n目录：electron-egg/out\nwindows安装包：out/electron-egg-windows-2.0.3.exe  \nwindows免安装包：out/ee-win-3.0.1-ia32.7z\nmac软件包：out/xxxx.dmg\nlinux软件包：out/xxx.deb \n\n\n\n# 2. 其它修改\n\n 1. 修改应用名称\n\n# 修改 ./package.json 中属性\nname：项目名称（英文）\n\n# electron-egg:v3.4.0版本，将构建配置，独立为./electron/config/builder.json 文件\nproductname: 可执行程序名称（英文）\nappid：软件id\nshortcutname：桌面快捷方式名称\n\n# 软件运行时头部名称\n# 修改 ./electron/config/config.default.js\nwindowsoption.title=  'ee框架'\n# 前端html的title标签也会影响该值，且优先级最高\n\n\n 2. 修改桌面logo\n\n# 路径\n./build/icons/256x256.png (名称和尺寸必须一致)(windows或者linux)\n./build/icons/512x512.png (名称和尺寸必须一致)(windows或者linux)\n./build/icons/icon.ico (macos)\n\n\n 3. 修改最小化托盘logo\n\n# 路径\n./public/images/tray_logo.png (建议 32x32 或 16x16 )\n\n\n 4. 修改左上角logo\n\n# 代码位置\n./electron/config/config.default.js\nwindowsoption.icon= path.join(appinfo.home, 'public', 'images', 'logo-32.png'),\n# 图片位置\n./public/images/logo-32.png\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"代码加密",frontmatter:{title:"代码加密",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/383ba6/",article:!1},regularPath:"/01.v3/030.%E7%94%9F%E6%88%90%E8%BD%AF%E4%BB%B6/020.%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%AF%86.html",relativePath:"01.v3/030.生成软件/020.代码加密.md",key:"v-ec7d88d8",path:"/pages/383ba6/",headers:[{level:3,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:61},{level:3,title:"打包时，过滤源代码",slug:"打包时-过滤源代码",normalizedTitle:"打包时，过滤源代码",charIndex:118},{level:3,title:"加密配置文件",slug:"加密配置文件",normalizedTitle:"加密配置文件",charIndex:506},{level:4,title:"type",slug:"type",normalizedTitle:"type",charIndex:587},{level:4,title:"directory",slug:"directory",normalizedTitle:"directory",charIndex:671},{level:4,title:"files",slug:"files",normalizedTitle:"files",charIndex:200},{level:4,title:"confusionOptions",slug:"confusionoptions",normalizedTitle:"confusionoptions",charIndex:920},{level:3,title:"加密后文件位置",slug:"加密后文件位置",normalizedTitle:"加密后文件位置",charIndex:1547},{level:3,title:"方式一：字节码加密 - bytecode",slug:"方式一-字节码加密-bytecode",normalizedTitle:"方式一：字节码加密 - bytecode",charIndex:1684},{level:4,title:"代码要求",slug:"代码要求",normalizedTitle:"代码要求",charIndex:1775},{level:4,title:"构建要求",slug:"构建要求",normalizedTitle:"构建要求",charIndex:2020},{level:3,title:"方式二：压缩混淆加密 - confusion",slug:"方式二-压缩混淆加密-confusion",normalizedTitle:"方式二：压缩混淆加密 - confusion",charIndex:2276},{level:4,title:"代码要求",slug:"代码要求-2",normalizedTitle:"代码要求",charIndex:1775},{level:4,title:"构建要求",slug:"构建要求-2",normalizedTitle:"构建要求",charIndex:2020},{level:3,title:"方式三：压缩混淆加密 strict",slug:"方式三-压缩混淆加密-strict",normalizedTitle:"方式三：压缩混淆加密 strict",charIndex:2751}],headersStr:"命令 打包时，过滤源代码 加密配置文件 type directory files confusionOptions 加密后文件位置 方式一：字节码加密 - bytecode 代码要求 构建要求 方式二：压缩混淆加密 - confusion 代码要求 构建要求 方式三：压缩混淆加密 strict",content:"要求：ee-core: v1.2.10 及以上\n\n目前框架支持两种代码加密，分别为 字节码加密 和 压缩混淆加密\n\n\n# 命令\n\n# 代码加密\nnpm run encrypt\n\n# 清除加密的代码\nnpm run clean\n\n\n\n# 打包时，过滤源代码\n\n注意\n\n未使用加密，请删除 \"!electron/\" 。\n\n打开package.json 或 builder.json文件，修改 build.files 数组属性，添加 \"!electron/\"，如下：\n\n// electron-egg: v3.4.0版本，将构建配置，独立为./electron/config/builder.json 文件\n\n\"build\": {\n  ......\n  \"asar\": true,\n  \"files\": [\n    \"**/*\",\n    \"!frontend/\", // 过滤前端源码\n    \"!run/\",\n    \"!logs/\",\n    \"!data/\",\n    \"!electron/\" // 过滤electron文件夹；如果没有使用加密功能，请删除\n  ],\n    ......\n}  \n\n\n\n# 加密配置文件\n\n> ee-core: v1.3.2\n\n文件 ./electron/config/encrypt.js\n\nmodule.exports = {\n  type: 'bytecode', // 加密类型：bytecode | confusion | strict\n  // 需要加密的目录，将废弃，用files替代\n  directory: [\t\t\t\n    'electron'      \n  ],\n  // 替代 directory属性，更强大的文件匹配\n  files: [\n    'electron/**/*.(js|json)',\n    '!electron/config/encrypt.js',\n    '!electron/config/nodemon.json',\n    '!electron/config/builder.json',\n  ],\n  fileExt: ['.js'],\n  confusionOptions: {}\n};\n\n\n# type\n\n * bytecode 字节码加密\n * confusion 压缩混淆加密\n * strict 先混淆加密，然后字节码加密\n\n# directory\n\n需要加密的目录，将废弃，用files替代\n\n# files\n\n> ee-core: v2.1.0\n\n需要加密的文件匹配，功能更强，说明：\n\nfiles: [\n  'electron/**/*.(js|json)', // 匹配 electron 目录下的 js|json文件\n  '!electron/config/encrypt.js', // 过滤 electron/config/encrypt.js 文件\n  '!electron/config/nodemon.json' // 过滤 electron/config/nodemon.json 文件\n],\n\n\n# confusionOptions\n\n * compact [Boolean] - 压缩成一行\n * stringArray [Boolean] - 删除字符串文字并将其放置在一个特殊数组中\n * stringArrayEncoding [Array] - 对stringArray的所有字符串文字进行编码，值：'none' | 'base64' | 'rc4'\n * deadCodeInjection [Boolean] - 注入死代码，注：影响性能\n\n\n# 加密后文件位置\n\n加密后，文件在 ./public/electron 里面，请注意业务代码中，文件引入路径。\n\n注意\n\ndev环境（或 未使用加密功能的prod环境）使用 ./electron 代码；\n\nprod环境使用 ./public/electron 代码。\n\n\n# 方式一：字节码加密 - bytecode\n\n什么是字节码加密？\n\n字节码是一种源码编译后的中间表示，类似汇编，是虚拟机执行的指令。逆向（反）编译的难度和传统编译型语言差不多。\n\n# 代码要求\n\n控制器controller和服务层service代码要求加入toString()方法，用来识别加密后的 .jsc （class）模块。\n\n如：ExampleController 控制器\n\n# 添加 toString() 方法，返回内容为 类的字符串表示\nExampleController.toString = () => '[class ExampleController]';\n\n# 导出模块\nmodule.exports = ExampleController;\n\n\n# 构建要求\n\n * 如果交叉构建的软件运行报错，那么在对应平台构建，操作如下\n * 在windows-32-bit 操作系统上构建：npm run build-w (32位)\n * 在windows-64-bit 操作系统上构建：npm run build-w-64 (64位)\n * 在MacOS-amd 操作系统上构建：npm run build-m\n * 在MacOS-arm 操作系统上构建：npm run build-m-arm64 (m1芯片架构)\n * Linux平台分发版较多，请自行测试\n\n\n# 方式二：压缩混淆加密 - confusion\n\n> ee-core: v1.4.1\n\n配置\n\n# electron/config/encrypt.js\n\nconfusionOptions: {\n  compact: true, // 将代码压缩为1行        \n    stringArray: true, // 删除字符串文本并将其放置在特殊数组中\n    stringArrayEncoding: ['none'], // 对stringArray编码 'none', 'base64', 'rc4'，增加安全性\n    deadCodeInjection: false, // 是否注入死代码，代码体积变大。\n}\n\n\n# 代码要求\n\n无\n\n# 构建要求\n\n * 可在windows-64-bit 操作系统上，同时构建 32位 和 64位应用。\n * 其它如上。\n\n注意\n\n如果加密生成的代码无法运行，请多次 执行 npm run encrypt\n\n原因：加密后代码混淆很大，可能触发某些关键字或者字符编码，导致代码无法正常读取。\n\n\n# 方式三：压缩混淆加密 strict\n\n> ee-core: v1.4.0\n\n先 压缩混淆加密，然后 字节码加密，代码更加安全。\n\n注意\n\n问题同上",normalizedContent:"要求：ee-core: v1.2.10 及以上\n\n目前框架支持两种代码加密，分别为 字节码加密 和 压缩混淆加密\n\n\n# 命令\n\n# 代码加密\nnpm run encrypt\n\n# 清除加密的代码\nnpm run clean\n\n\n\n# 打包时，过滤源代码\n\n注意\n\n未使用加密，请删除 \"!electron/\" 。\n\n打开package.json 或 builder.json文件，修改 build.files 数组属性，添加 \"!electron/\"，如下：\n\n// electron-egg: v3.4.0版本，将构建配置，独立为./electron/config/builder.json 文件\n\n\"build\": {\n  ......\n  \"asar\": true,\n  \"files\": [\n    \"**/*\",\n    \"!frontend/\", // 过滤前端源码\n    \"!run/\",\n    \"!logs/\",\n    \"!data/\",\n    \"!electron/\" // 过滤electron文件夹；如果没有使用加密功能，请删除\n  ],\n    ......\n}  \n\n\n\n# 加密配置文件\n\n> ee-core: v1.3.2\n\n文件 ./electron/config/encrypt.js\n\nmodule.exports = {\n  type: 'bytecode', // 加密类型：bytecode | confusion | strict\n  // 需要加密的目录，将废弃，用files替代\n  directory: [\t\t\t\n    'electron'      \n  ],\n  // 替代 directory属性，更强大的文件匹配\n  files: [\n    'electron/**/*.(js|json)',\n    '!electron/config/encrypt.js',\n    '!electron/config/nodemon.json',\n    '!electron/config/builder.json',\n  ],\n  fileext: ['.js'],\n  confusionoptions: {}\n};\n\n\n# type\n\n * bytecode 字节码加密\n * confusion 压缩混淆加密\n * strict 先混淆加密，然后字节码加密\n\n# directory\n\n需要加密的目录，将废弃，用files替代\n\n# files\n\n> ee-core: v2.1.0\n\n需要加密的文件匹配，功能更强，说明：\n\nfiles: [\n  'electron/**/*.(js|json)', // 匹配 electron 目录下的 js|json文件\n  '!electron/config/encrypt.js', // 过滤 electron/config/encrypt.js 文件\n  '!electron/config/nodemon.json' // 过滤 electron/config/nodemon.json 文件\n],\n\n\n# confusionoptions\n\n * compact [boolean] - 压缩成一行\n * stringarray [boolean] - 删除字符串文字并将其放置在一个特殊数组中\n * stringarrayencoding [array] - 对stringarray的所有字符串文字进行编码，值：'none' | 'base64' | 'rc4'\n * deadcodeinjection [boolean] - 注入死代码，注：影响性能\n\n\n# 加密后文件位置\n\n加密后，文件在 ./public/electron 里面，请注意业务代码中，文件引入路径。\n\n注意\n\ndev环境（或 未使用加密功能的prod环境）使用 ./electron 代码；\n\nprod环境使用 ./public/electron 代码。\n\n\n# 方式一：字节码加密 - bytecode\n\n什么是字节码加密？\n\n字节码是一种源码编译后的中间表示，类似汇编，是虚拟机执行的指令。逆向（反）编译的难度和传统编译型语言差不多。\n\n# 代码要求\n\n控制器controller和服务层service代码要求加入tostring()方法，用来识别加密后的 .jsc （class）模块。\n\n如：examplecontroller 控制器\n\n# 添加 tostring() 方法，返回内容为 类的字符串表示\nexamplecontroller.tostring = () => '[class examplecontroller]';\n\n# 导出模块\nmodule.exports = examplecontroller;\n\n\n# 构建要求\n\n * 如果交叉构建的软件运行报错，那么在对应平台构建，操作如下\n * 在windows-32-bit 操作系统上构建：npm run build-w (32位)\n * 在windows-64-bit 操作系统上构建：npm run build-w-64 (64位)\n * 在macos-amd 操作系统上构建：npm run build-m\n * 在macos-arm 操作系统上构建：npm run build-m-arm64 (m1芯片架构)\n * linux平台分发版较多，请自行测试\n\n\n# 方式二：压缩混淆加密 - confusion\n\n> ee-core: v1.4.1\n\n配置\n\n# electron/config/encrypt.js\n\nconfusionoptions: {\n  compact: true, // 将代码压缩为1行        \n    stringarray: true, // 删除字符串文本并将其放置在特殊数组中\n    stringarrayencoding: ['none'], // 对stringarray编码 'none', 'base64', 'rc4'，增加安全性\n    deadcodeinjection: false, // 是否注入死代码，代码体积变大。\n}\n\n\n# 代码要求\n\n无\n\n# 构建要求\n\n * 可在windows-64-bit 操作系统上，同时构建 32位 和 64位应用。\n * 其它如上。\n\n注意\n\n如果加密生成的代码无法运行，请多次 执行 npm run encrypt\n\n原因：加密后代码混淆很大，可能触发某些关键字或者字符编码，导致代码无法正常读取。\n\n\n# 方式三：压缩混淆加密 strict\n\n> ee-core: v1.4.0\n\n先 压缩混淆加密，然后 字节码加密，代码更加安全。\n\n注意\n\n问题同上",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"图标修改",frontmatter:{title:"图标修改",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/801f4c/",article:!1},regularPath:"/01.v3/030.%E7%94%9F%E6%88%90%E8%BD%AF%E4%BB%B6/030.%E5%9B%BE%E6%A0%87%E4%BF%AE%E6%94%B9.html",relativePath:"01.v3/030.生成软件/030.图标修改.md",key:"v-4a59b246",path:"/pages/801f4c/",headers:[{level:3,title:"图标说明",slug:"图标说明",normalizedTitle:"图标说明",charIndex:2},{level:4,title:"桌面和安装图标，修改里面的3个图片（图片名称不要修改）。",slug:"桌面和安装图标-修改里面的3个图片-图片名称不要修改-。",normalizedTitle:"桌面和安装图标，修改里面的3个图片（图片名称不要修改）。",charIndex:10},{level:4,title:"托盘图标",slug:"托盘图标",normalizedTitle:"托盘图标",charIndex:268},{level:4,title:"软件左上角图标",slug:"软件左上角图标",normalizedTitle:"软件左上角图标",charIndex:369},{level:3,title:"桌面图标工具",slug:"桌面图标工具",normalizedTitle:"桌面图标工具",charIndex:635}],headersStr:"图标说明 桌面和安装图标，修改里面的3个图片（图片名称不要修改）。 托盘图标 软件左上角图标 桌面图标工具",content:"# 图标说明\n\n# 桌面和安装图标，修改里面的3个图片（图片名称不要修改）。\n\n# 文件路径\nelectron-egg\\build\\icons\n\n# 图1：256x256.png\n# 分辨率：256 x 256\n# 宽度：256像素\n# 高度：256像素\n# 位深度：32\n\n# 图2：512x512.png\n# 分辨率：512 x 512\n# 宽度：512像素\n# 高度：512像素\n# 位深度：32\n\n# 图3：icon.ico\n# 分辨率：256 x 256\n# 宽度：256像素\n# 高度：256像素\n# 位深度：32\n\n\n# 托盘图标\n\n# 文件路径\nelectron-egg\\public\\images\\tray_logo.png\n\n# 图片要求\n分辨率：16 x 16\n宽度：16像素\n高度：16像素\n位深度：32\n\n\n# 软件左上角图标\n\n# 文件路径\nelectron-egg\\public\\images\\logo-32.png\n\n# 图片要求\n分辨率：32 x 32\n宽度：32像素\n高度：32像素\n位深度：32\n\n# 代码位置\nelectron-egg\\electron\\config\\config.default.js\n\n# config\nconfig.windowsOption = {\n    icon: path.join(appInfo.home, 'public', 'images', 'logo-32.png'),\n};\n\n\n\n# 桌面图标工具\n\n下载地址\n\n * 链接：https://pan.baidu.com/s/134hLHBSLP2YBpHaBopaeaQ?pwd=p3nq\n\n * 提取码：p3nq\n\n注意格式：\n\n\n\n注意：icon.ico的图片大小，尽量小于40kb，太大了会有显示问题。（可以提前将png图片进行多次压缩）",normalizedContent:"# 图标说明\n\n# 桌面和安装图标，修改里面的3个图片（图片名称不要修改）。\n\n# 文件路径\nelectron-egg\\build\\icons\n\n# 图1：256x256.png\n# 分辨率：256 x 256\n# 宽度：256像素\n# 高度：256像素\n# 位深度：32\n\n# 图2：512x512.png\n# 分辨率：512 x 512\n# 宽度：512像素\n# 高度：512像素\n# 位深度：32\n\n# 图3：icon.ico\n# 分辨率：256 x 256\n# 宽度：256像素\n# 高度：256像素\n# 位深度：32\n\n\n# 托盘图标\n\n# 文件路径\nelectron-egg\\public\\images\\tray_logo.png\n\n# 图片要求\n分辨率：16 x 16\n宽度：16像素\n高度：16像素\n位深度：32\n\n\n# 软件左上角图标\n\n# 文件路径\nelectron-egg\\public\\images\\logo-32.png\n\n# 图片要求\n分辨率：32 x 32\n宽度：32像素\n高度：32像素\n位深度：32\n\n# 代码位置\nelectron-egg\\electron\\config\\config.default.js\n\n# config\nconfig.windowsoption = {\n    icon: path.join(appinfo.home, 'public', 'images', 'logo-32.png'),\n};\n\n\n\n# 桌面图标工具\n\n下载地址\n\n * 链接：https://pan.baidu.com/s/134hlhbslp2ybphabopaeaq?pwd=p3nq\n\n * 提取码：p3nq\n\n注意格式：\n\n\n\n注意：icon.ico的图片大小，尽量小于40kb，太大了会有显示问题。（可以提前将png图片进行多次压缩）",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"框架升级",frontmatter:{title:"框架升级",date:"2023-06-14T11:12:20.000Z",permalink:"/pages/bc25c6/",article:!1},regularPath:"/01.v3/040.%E5%8D%87%E7%BA%A7/010.%E6%A1%86%E6%9E%B6%E5%8D%87%E7%BA%A7.html",relativePath:"01.v3/040.升级/010.框架升级.md",key:"v-c6b87b8a",path:"/pages/bc25c6/",headers:[{level:3,title:"框架核心",slug:"框架核心",normalizedTitle:"框架核心",charIndex:2},{level:3,title:"Electron",slug:"electron",normalizedTitle:"electron",charIndex:118},{level:3,title:"electron-egg历史使用的node.js版本",slug:"electron-egg历史使用的node-js版本",normalizedTitle:"electron-egg历史使用的node.js版本",charIndex:243},{level:3,title:"Electron 与 Node.js 对应关系",slug:"electron-与-node-js-对应关系",normalizedTitle:"electron 与 node.js 对应关系",charIndex:401},{level:3,title:"Window 7 系统",slug:"window-7-系统",normalizedTitle:"window 7 系统",charIndex:460},{level:3,title:"慎重选择electron的新版本",slug:"慎重选择electron的新版本",normalizedTitle:"慎重选择electron的新版本",charIndex:582},{level:4,title:"百度翻译",slug:"百度翻译",normalizedTitle:"百度翻译",charIndex:682},{level:4,title:"迅雷",slug:"迅雷",normalizedTitle:"迅雷",charIndex:725},{level:4,title:"ApiPost7",slug:"apipost7",normalizedTitle:"apipost7",charIndex:765},{level:4,title:"语雀",slug:"语雀",normalizedTitle:"语雀",charIndex:812},{level:4,title:"Blibili",slug:"blibili",normalizedTitle:"blibili",charIndex:853},{level:4,title:"抖音",slug:"抖音",normalizedTitle:"抖音",charIndex:899}],headersStr:"框架核心 Electron electron-egg历史使用的node.js版本 Electron 与 Node.js 对应关系 Window 7 系统 慎重选择electron的新版本 百度翻译 迅雷 ApiPost7 语雀 Blibili 抖音",content:"# 框架核心\n\nee-core包含框架的所有功能，您只需升级ee-core。\n\n# 升级到最最新\nnpm install ee-core@latest\n\n# 升级到指定版本\nnpm install ee-core@2.2.3\n\n\n\n# Electron\n\n理论上框架支持electron v12 及以上版本，升级electron时，请注意它与node.js的版本对应关系。\n\n# 升级到指定版本\nnpm install electron@16.13.0 --save-dev\n\n\n\n# electron-egg历史使用的node.js版本\n\n 1. node.js: v16.20.0 | electron: v21.4.4\n 2. node.js: v14.21.1 | electron: v13.6.9\n 3. node.js: v12.22.0 | electron: v12.2.3\n\n\n# Electron 与 Node.js 对应关系\n\n请查阅文档：electron与node.js 版本对应关系\n\n\n# Window 7 系统\n\n微软已经停止对 win7系统支持。需要支持win7的，请使用以下开发环境：\n\n * electron <= 12\n * node.js <= 12\n * electron-builder <= 22.10.5\n\n\n# 慎重选择electron的新版本\n\n请尽量使用框架提供的版本。electron版本迭代较快，新版本bug较多，非资深开发者或大型公司，请勿使用。 下面是一些知名软件客户端在用的版本，仅供参考：\n\n# 百度翻译\n\nnode.js: 12.18.3 electron: 11.1.1\n\n# 迅雷\n\nnode.js: 12.14.1 electron: 9.2.1\n\n# ApiPost7\n\nnode.js: 12.18.3 electron: 11.5.0\n\n# 语雀\n\nnode.js: 16.13.2 electron: 18.3.5\n\n# Blibili\n\nnode.js: 16.16.0 electron: 21.3.3\n\n# 抖音\n\nnode.js: 16.15.0 electron: 20.1.0",normalizedContent:"# 框架核心\n\nee-core包含框架的所有功能，您只需升级ee-core。\n\n# 升级到最最新\nnpm install ee-core@latest\n\n# 升级到指定版本\nnpm install ee-core@2.2.3\n\n\n\n# electron\n\n理论上框架支持electron v12 及以上版本，升级electron时，请注意它与node.js的版本对应关系。\n\n# 升级到指定版本\nnpm install electron@16.13.0 --save-dev\n\n\n\n# electron-egg历史使用的node.js版本\n\n 1. node.js: v16.20.0 | electron: v21.4.4\n 2. node.js: v14.21.1 | electron: v13.6.9\n 3. node.js: v12.22.0 | electron: v12.2.3\n\n\n# electron 与 node.js 对应关系\n\n请查阅文档：electron与node.js 版本对应关系\n\n\n# window 7 系统\n\n微软已经停止对 win7系统支持。需要支持win7的，请使用以下开发环境：\n\n * electron <= 12\n * node.js <= 12\n * electron-builder <= 22.10.5\n\n\n# 慎重选择electron的新版本\n\n请尽量使用框架提供的版本。electron版本迭代较快，新版本bug较多，非资深开发者或大型公司，请勿使用。 下面是一些知名软件客户端在用的版本，仅供参考：\n\n# 百度翻译\n\nnode.js: 12.18.3 electron: 11.1.1\n\n# 迅雷\n\nnode.js: 12.14.1 electron: 9.2.1\n\n# apipost7\n\nnode.js: 12.18.3 electron: 11.5.0\n\n# 语雀\n\nnode.js: 16.13.2 electron: 18.3.5\n\n# blibili\n\nnode.js: 16.16.0 electron: 21.3.3\n\n# 抖音\n\nnode.js: 16.15.0 electron: 20.1.0",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"应用软件自动更新",frontmatter:{title:"应用软件自动更新",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/3152fb/",article:!1},regularPath:"/01.v3/040.%E5%8D%87%E7%BA%A7/020.%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.html",relativePath:"01.v3/040.升级/020.应用软件自动更新.md",key:"v-1d0e27ff",path:"/pages/3152fb/",headers:[{level:3,title:"注：该功能为demo，请开发者自行调试。",slug:"注-该功能为demo-请开发者自行调试。",normalizedTitle:"注：该功能为demo，请开发者自行调试。",charIndex:2},{level:3,title:"证书",slug:"证书",normalizedTitle:"证书",charIndex:27},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:205},{level:3,title:"举例",slug:"举例",normalizedTitle:"举例",charIndex:837},{level:4,title:"url参数",slug:"url参数",normalizedTitle:"url参数",charIndex:925},{level:4,title:"上传文件",slug:"上传文件",normalizedTitle:"上传文件",charIndex:976},{level:3,title:"注意事项",slug:"注意事项",normalizedTitle:"注意事项",charIndex:1419},{level:3,title:"electron-updater",slug:"electron-updater",normalizedTitle:"electron-updater",charIndex:1443}],headersStr:"注：该功能为demo，请开发者自行调试。 证书 配置 举例 url参数 上传文件 注意事项 electron-updater",content:"# 注：该功能为demo，请开发者自行调试。\n\n\n# 证书\n\n> 非必要\n\n如果你的app需要上架windows、Mac应用商店，或者需要额外的一些系统权限，那么需要申请开发者证书。\n\n * Apple Developer Certificate (if targeting macOS)\n * Windows Developer Certificate (if targeting Windows)\n\n\n# 配置\n\n文件：./electron/config.default.js\n\n# 版本\n# electron-egg >= v2.4.0\n# ee-core >= v1.4.1\n\n/**\n * 插件功能\n */\nautoUpdater: {\n  enable: true,\n  windows: false, \n  macOS: false, \n  linux: false,\n  options: {\n    provider: 'generic', \n    url: 'http://kodo.qiniu.com/'\n  },\n  force: false,\n},\n\n\n# 旧版本\n# electron-egg < v2.4.0\n\n/* 应用自动升级 (可选) */\nconfig.autoUpdate = {\n  windows: false, // windows平台\n  macOS: false, // macOs 需要签名验证\n  linux: false, // linux平台\n  options: {\n    provider: 'generic', // or github, s3, bintray\n    url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n  },\n  force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n};\n\n\n\n# 举例\n\noptions: {\n\tprovider: 'generic',\n\turl: 'http://kodo.qiniu.com/electron-egg/' \n}\n\n\n# url参数\n\n是一个可以访问的资源目录（七牛云，GitHub，阿里云oss，腾讯云cos等）。\n\n# 上传文件\n\n我们把打包后的高版本软件，'electron-egg/out/' 目录中 ：\n\n * ee-win-2.4.0-x64.exe 完整安装包\n * ee-win-2.4.0-x64.exe.blockmap 增量块内容\n * latest.yml\n\n三个文件放到七牛云的对象存储中，如下：\n\n# 放置目录：\nhttp://kodo.qiniu.com/electron-egg/\n\n# 放置后如下\n● http://kodo.qiniu.com/electron-egg/ee-win-2.4.0-x64.exe\n● http://kodo.qiniu.com/electron-egg/ee-win-2.4.0-x64.exe.blockmap\n● http://kodo.qiniu.com/electron-egg/latest.yml\n\n\n测试你的三个链接，能否下载（访问）。 如果可以访问，触发升级功能时，会检测是否可以自动升级（可查看 日志 是否有报错）\n\n\n# 注意事项\n\n * dev模式不支持更新\n\n\n# electron-updater\n\n如果想要自定义实现升级功能，请查看文档：electron-updater",normalizedContent:"# 注：该功能为demo，请开发者自行调试。\n\n\n# 证书\n\n> 非必要\n\n如果你的app需要上架windows、mac应用商店，或者需要额外的一些系统权限，那么需要申请开发者证书。\n\n * apple developer certificate (if targeting macos)\n * windows developer certificate (if targeting windows)\n\n\n# 配置\n\n文件：./electron/config.default.js\n\n# 版本\n# electron-egg >= v2.4.0\n# ee-core >= v1.4.1\n\n/**\n * 插件功能\n */\nautoupdater: {\n  enable: true,\n  windows: false, \n  macos: false, \n  linux: false,\n  options: {\n    provider: 'generic', \n    url: 'http://kodo.qiniu.com/'\n  },\n  force: false,\n},\n\n\n# 旧版本\n# electron-egg < v2.4.0\n\n/* 应用自动升级 (可选) */\nconfig.autoupdate = {\n  windows: false, // windows平台\n  macos: false, // macos 需要签名验证\n  linux: false, // linux平台\n  options: {\n    provider: 'generic', // or github, s3, bintray\n    url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n  },\n  force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n};\n\n\n\n# 举例\n\noptions: {\n\tprovider: 'generic',\n\turl: 'http://kodo.qiniu.com/electron-egg/' \n}\n\n\n# url参数\n\n是一个可以访问的资源目录（七牛云，github，阿里云oss，腾讯云cos等）。\n\n# 上传文件\n\n我们把打包后的高版本软件，'electron-egg/out/' 目录中 ：\n\n * ee-win-2.4.0-x64.exe 完整安装包\n * ee-win-2.4.0-x64.exe.blockmap 增量块内容\n * latest.yml\n\n三个文件放到七牛云的对象存储中，如下：\n\n# 放置目录：\nhttp://kodo.qiniu.com/electron-egg/\n\n# 放置后如下\n● http://kodo.qiniu.com/electron-egg/ee-win-2.4.0-x64.exe\n● http://kodo.qiniu.com/electron-egg/ee-win-2.4.0-x64.exe.blockmap\n● http://kodo.qiniu.com/electron-egg/latest.yml\n\n\n测试你的三个链接，能否下载（访问）。 如果可以访问，触发升级功能时，会检测是否可以自动升级（可查看 日志 是否有报错）\n\n\n# 注意事项\n\n * dev模式不支持更新\n\n\n# electron-updater\n\n如果想要自定义实现升级功能，请查看文档：electron-updater",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"更新记录",frontmatter:{title:"更新记录",date:"2023-05-25T11:12:19.000Z",permalink:"/pages/f686cd/",article:!1},regularPath:"/01.v3/050.%E5%85%B6%E5%AE%83/030.%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95.html",relativePath:"01.v3/050.其它/030.更新记录.md",key:"v-5ba972b8",path:"/pages/f686cd/",headers:[{level:3,title:"3.4.0",slug:"_3-4-0",normalizedTitle:"3.4.0",charIndex:11},{level:3,title:"3.3.0",slug:"_3-3-0",normalizedTitle:"3.3.0",charIndex:289},{level:3,title:"3.2.0",slug:"_3-2-0",normalizedTitle:"3.2.0",charIndex:789},{level:3,title:"3.1.0",slug:"_3-1-0",normalizedTitle:"3.1.0",charIndex:1046},{level:3,title:"3.0.0",slug:"_3-0-0",normalizedTitle:"3.0.0",charIndex:1548},{level:3,title:"2.5.0",slug:"_2-5-0",normalizedTitle:"2.5.0",charIndex:2089},{level:3,title:"2.4.0",slug:"_2-4-0",normalizedTitle:"2.4.0",charIndex:2259},{level:3,title:"2.3.0",slug:"_2-3-0",normalizedTitle:"2.3.0",charIndex:2597},{level:3,title:"2.2.1",slug:"_2-2-1",normalizedTitle:"2.2.1",charIndex:2818},{level:3,title:"2.2.0",slug:"_2-2-0",normalizedTitle:"2.2.0",charIndex:2982},{level:3,title:"2.1.9",slug:"_2-1-9",normalizedTitle:"2.1.9",charIndex:3004},{level:3,title:"2.1.8",slug:"_2-1-8",normalizedTitle:"2.1.8",charIndex:3107},{level:3,title:"2.1.7",slug:"_2-1-7",normalizedTitle:"2.1.7",charIndex:3246},{level:3,title:"2.1.6",slug:"_2-1-6",normalizedTitle:"2.1.6",charIndex:3374},{level:3,title:"2.1.5",slug:"_2-1-5",normalizedTitle:"2.1.5",charIndex:3481},{level:3,title:"2.1.4",slug:"_2-1-4",normalizedTitle:"2.1.4",charIndex:3508},{level:3,title:"2.1.2",slug:"_2-1-2",normalizedTitle:"2.1.2",charIndex:3697},{level:3,title:"2.1.1",slug:"_2-1-1",normalizedTitle:"2.1.1",charIndex:3881},{level:3,title:"2.1.0",slug:"_2-1-0",normalizedTitle:"2.1.0",charIndex:3967},{level:3,title:"2.0.6",slug:"_2-0-6",normalizedTitle:"2.0.6",charIndex:4142},{level:3,title:"2.0.5",slug:"_2-0-5",normalizedTitle:"2.0.5",charIndex:4276},{level:3,title:"2.0.3",slug:"_2-0-3",normalizedTitle:"2.0.3",charIndex:4397},{level:3,title:"2.0.0",slug:"_2-0-0",normalizedTitle:"2.0.0",charIndex:4605},{level:3,title:"1.16.3",slug:"_1-16-3",normalizedTitle:"1.16.3",charIndex:4745},{level:3,title:"1.16.2",slug:"_1-16-2",normalizedTitle:"1.16.2",charIndex:4809},{level:3,title:"1.16.1",slug:"_1-16-1",normalizedTitle:"1.16.1",charIndex:4833},{level:3,title:"1.16.0",slug:"_1-16-0",normalizedTitle:"1.16.0",charIndex:4882},{level:3,title:"1.15.0",slug:"_1-15-0",normalizedTitle:"1.15.0",charIndex:4958},{level:3,title:"1.14.0",slug:"_1-14-0",normalizedTitle:"1.14.0",charIndex:5095},{level:3,title:"1.13.0",slug:"_1-13-0",normalizedTitle:"1.13.0",charIndex:5278},{level:3,title:"1.12.0",slug:"_1-12-0",normalizedTitle:"1.12.0",charIndex:5386},{level:3,title:"1.11.0",slug:"_1-11-0",normalizedTitle:"1.11.0",charIndex:5448},{level:3,title:"1.10.0",slug:"_1-10-0",normalizedTitle:"1.10.0",charIndex:5480}],headersStr:"3.4.0 3.3.0 3.2.0 3.1.0 3.0.0 2.5.0 2.4.0 2.3.0 2.2.1 2.2.0 2.1.9 2.1.8 2.1.7 2.1.6 2.1.5 2.1.4 2.1.2 2.1.1 2.1.0 2.0.6 2.0.5 2.0.3 2.0.0 1.16.3 1.16.2 1.16.1 1.16.0 1.15.0 1.14.0 1.13.0 1.12.0 1.11.0 1.10.0",content:"# 更新记录\n\n\n# 3.4.0\n\n 1. 【增加】主进程mainserver支持加载静态资源，支持入口文件配置。\n 2. 【增加】config模块，增加isWebProtocol()/isFileProtocol()。\n 3. 【升级】升级electron到v21.4.4\n 4. 【升级】升级@electron/rebuild到v3.2.13\n 5. 【升级】demo分支，升级better-sqlite3到v8.4.0\n 6. 【修复】修复service多层调用。\n 7. 【优化】将打包配置独立出builder.json文件，精简package.json内容。\n\n\n# 3.3.0\n\n 1. 【增加】新增main模块，支持第三方框架或项目引入ee-core，使用其 100+ API。\n 2. 【增加】新增addon模块，可以在controller、preload、用户自定义模块等，使用addon实例。\n 3. 【增加】新增services模块，可以在controller、preload、用户自定义模块等，使用service实例。\n 4. 【增加】elecron模块，增加 window模块，提供createMainWindow()/restoreMainWindow()。\n 5. 【增加】elecron模块，增加 app模块，提供create()/quit()。\n 6. 【增加】ps模块，增加 initMode()/mode()/verifyMode()/isFrameworkMode()/isModuleMode()。\n 7. 【优化】将main.js中业务移动到electron/index.js中，实现全局代码加密。\n 8. 【优化】demo中所有this.app依赖替换为模块化api。\n 9. 【优化】开发环境加载前端失败，优化错误提示。\n\n\n# 3.2.0\n\n 1. 【优化】新增demo分支，用来展示功能效果。\n 2. 【优化】简化master分支，仅保留必要依赖。\n 3. 【增加】demo分支优化分类（框架、系统、硬件、特效）并增加打印机demo、视频播放demo。\n 4. 【修复】ee-core 日志模块，修复跨天记录异常问题。\n 5. 【增加】ee-core utils模块，增加 machineIdSync() / machineId() 。\n 6. 【增加】ee-core utils/get-port模块，增加 GetPort()。\n\n\n# 3.1.0\n\n 1. 【增加】Utils模块mac功能：getMAC / isMAC\n 2. 【增加】Utils模块IP功能：publicIpv4 / publicIpv6\n 3. 【增加】Job模块childJob功能：createProcess / getPids / execPromise\n 4. 【增加】Job模块childJobPool功能：create / run / runPromise / getChildByPid / getChild / getPids / killAll\n 5. 【增加】exception模块：main/child/renderer进程捕获异常后是否退出\n 6. 【增加】ps模块：getEncryptDir / isEncrypted / exitChildJob / isChildJob / isChildPoolJob\n 7. 【增加】Utils模块：co / deprecate / extend / get-port / time\n 8. 【增加】tools模块：加密文件过滤及匹配\n 9. 【增加】bin模块：clean 清理加密文件\n\n\n# 3.0.0\n\n 1.  框架核心ee-core重构,升级到2.0.1\n 2.  整体架构由 单业务进程&大对象 模型， 转变为：单业务进程&模块化&多任务。\n 3.  ee-core模块划分：\n 4.  addon：插件，不提供api\n 5.  bin：脚本，提供api\n 6.  config：配置，提供api\n 7.  const：常量，提供api\n 8.  controller：控制器类，提供api\n 9.  core：核心，不提供api\n 10. ee：全局对象，提供api\n 11. electron：electron功能，提供api\n 12. exception：异常处理，提供api\n 13. httpclient：curl请求，提供api\n 14. jobs：任务，提供api\n 15. loader：加载器，提供api\n 16. log：日志，提供api\n 17. message：消息，提供api\n 18. oldUtils：旧的类库，提供api\n 19. ps：进程，提供api\n 20. service：服务层类，提供api\n 21. socket：通信，提供api\n 22. tools：工具，提供api\n 23. utils：类库，提供api\n\n\n# 2.5.0\n\n 1. 增加开发模式自定义协议头\n 2. 增加sqlite数据库db文件自定义目录\n 3. 增加sqlite数据库动态切库demo\n 4. 增加远程web使用教程及demo\n 5. 删除loading文件、ci/cd配置文件\n 6. 删除ee-core中无用的constant\n 7. 升级ee-core到1.5.0\n\n\n# 2.4.0\n\n 1. 增加混淆/bytecode加密配置opt,提升安全性\n 2. 增加插件的方式重写托盘、唤醒、升级、安全、扩展等功能\n 3. 增加java服务插件，感谢“zuihou”提供的PR\n 4. 增加jave服务demo，jar等完整用例\n 5. 增加Utils库函数：getEnv/getAppUserDataDir/getHomeDir/getBaseDir/ getRootDir/getAppVersion/getExecDir/getAddonConfig/ getMainServerConfig/getHttpServerConfig/getSocketServerConfig\n 6. 移除多余代码\n 7. 升级ee-core到1.4.1\n\n\n# 2.3.0\n\n 1. 增加addon插件模块，开发者可以自由扩展app对象\n 2. 内置window插件，实现多窗口通信\n 3. 增加上传文件demo\n 4. 增加多窗口通信demo，实现子窗口与主进程通信、子窗口之间互相通信\n 5. 增加插件config配置\n 6. 优化title显示\n 7. 增加更强大obfuscator混淆功能，提供strict类型\n 8. 移除uglify混淆及包\n 9. 升级ee-core到1.4.0\n\n\n# 2.2.1\n\n 1. 增加http服务请求过滤配置\n 2. 优化http服务开启后，浏览器默认请求报错\n 3. 将开发环境热启动配置加入config\n 4. 构建包支持windows免安装版、arm64版\n 5. 构建包支持linux arm64版、armv7l版、rpm包、pacman包\n 6. 关闭上下文隔离配置\n\n\n# 2.2.0\n\n 1. 修复加密配置\n\n\n# 2.1.9\n\n 1. 增加bytecode字节码加密的配置文件\n 2. 增加加密类型、目录、文件后缀可扩展\n 3. sqlite功能可选\n 4. 增加上下文隔离\n 5. 修复win7系统下开发异常\n\n\n# 2.1.8\n\n 1. 安全性更新\n 2. 支持bytecode字节码加密\n 3. 优化压缩混淆加密\n 4. 将废弃compress、restore命令，使用encrypt替代\n 5. mainServer增加option支持\n 6. 限制控制器业务必须为class文件\n\n\n# 2.1.7\n\n 1. 增加ssl，支持https\n 2. 优化http服务的路由写法\n 3. 优化utils部分函数 && 修复错误。\n 4. 优化http返回状态码\n 5. 去除ee-core中延迟加载功能\n 6. 去除ee-core中无效代码\n\n\n# 2.1.6\n\n 1. 增加sqlite数据库\n 2. 增加sqlite增删改查demo\n 3. 增加http服务body，支持表单、文件等\n 4. 修复热重启bug\n 5. 升级ee-core到1.2.8\n\n\n# 2.1.5\n\n 1. 增加ee-core命令\n\n\n# 2.1.4\n\n 1. 增加开发环境代码热重载\n 2. 增加菜单栏配置属性\n 3. 增加配置选项，开启/关闭硬件加速\n 4. 优化启动\n 5. 修复linux系统构建的deb包，安装后图标显示问题\n 6. 升级electron-builder到23.0.3\n 7. 升级ee-core到1.2.6\n 8. 升级electron到13.6.9\n 9. 移除loading页\n\n\n# 2.1.2\n\n 1. ipc通信增加 invoke/handle 模型\n 2. ipcRender增加 invoke异步/sendSync同步方法\n 3. 优化ee-core代码\n 4. 优化storage demo\n 5. 优化ipc通信 同步、异步、双向通信demo\n 6. 替换所有前端ipcCall为ipcInvoke\n 7. 修复ipc并发请求问题\n\n\n# 2.1.1\n\n 1. 修复托盘窗口关闭问题\n 2. 修复ee-core窗口事件\n 3. 优化mac系统应用坞点击显示\n 4. 优化单应用模式\n 5. 优化代码加密\n\n\n# 2.1.0\n\n 1. 增加内置http server服务，支持配置host、端口、跨域等属性\n 2. 增加http服务相关demo\n 3. 增加socket服务相关demo\n 4. 优化内置socket server服务，支持开启/关闭\n 5. 优化前端主菜单、子菜单\n 6. 升级前端组件库\n 7. 升级store包\n 8. 一些代码优化\n\n\n# 2.0.6\n\n 1. 增加socket service options，支持path,connectTimeout,maxHttpBufferSize,cors等属性\n 2. 修复任务栏显示问题\n 3. 修复socket跨域问题\n 4. 修复构建应用失败问题\n\n\n# 2.0.5\n\n 1. 增加生命周期函数 appReady()\n 2. 增加dll调用方法\n 3. 增加Utils工具类方法，获取额外资源目录\n 4. 增加socket.koa属性\n 5. 修复co包异常\n 6. 优化软件调用demo\n\n\n# 2.0.3\n\n 1. 增加html模式，前端支持多个html页面\n 2. 增加socket服务，第三方应用可调用EE应用\n 3. 增加全局config属性: userHome、appVersion、isPackaged、execDir\n 4. 增加Utils工具类方法，获取socket端口，socket频道\n 5. 优化应用创建逻辑\n 6. 优化配置文件\n 7. 优化pkg方法\n 8. 优化动态端口获取\n\n\n# 2.0.0\n\n 1.  框架重构\n 2.  增加控制器\n 3.  增加服务器\n 4.  增加ipc\n 5.  增加socket\n 6.  增加storage\n 7.  增加全局app对象\n 8.  增加预加载\n 9.  增加核心npm包\n 10. 增加....  太多了\n\n\n# 1.16.3\n\n 1. 增加手动更新 和 强制更新\n 2. 修复ipc监听\n 3. 限制一个窗口\n 4. 更新demo\n\n\n# 1.16.2\n\n 1. 忘记更新什么了\n\n\n# 1.16.1\n\n 1. 代码压缩与混淆，增加安全性\n 2. 新logo\n 3. 文档更新\n\n\n# 1.16.0\n\n 1. 增加lowdb数据库实例代码\n 2. 更新npm源\n 3. 更新electron版本\n 4. 打包过滤frontend\n\n\n# 1.15.0\n\n 1. 增加chrome扩展程序（重点）\n 2. 增加web(html)内容嵌入\n 3. 增加多窗口打开\n 4. 增加桌面通知\n 5. 增加电源监控\n 6. 增加获取显示器信息\n 7. 增加系统主题设置\n 8. 修改功能分类\n 9. 删除非必要代码\n\n\n# 1.14.0\n\n 1.  视图样式重构\n 2.  demo增加分类\n 3.  demo界面优化，重新排版\n 4.  增加选择文件夹目录\n 5.  增加ipc通信模块与apis模块语法统一\n 6.  增加路由分类\n 7.  增加ipc支持长通信，服务端持续向页面发消息\n 8.  增加操作系统弹框demo\n 9.  删除非必要代码\n 10. 修复拉伸窗口空白\n\n\n# 1.13.0\n\n 1. 修复自动更新\n 2. 支持将任意网站打包成桌面软件\n 3. 优化启动时白屏问题\n 4. 安全检查，防止inspect debug\n 5. 自动升级支持多平台更新\n 6. 部分代码优化\n\n\n# 1.12.0\n\n 1. 崩溃上报\n 2. 调用第三方软件 及 demo实现\n 3. 名称设置\n 4. 方法注释说明\n\n\n# 1.11.0\n\n 1. 唤醒应用功能\n 2. 优化代码\n\n\n# 1.10.0\n\n 1. 优化代码结构，功能模块更加合理。\n 2. 升级electron核心到12版本。\n 3. 升级electron-builder，支持Mac M1芯片架构。\n 4. 增加快捷键功能模块并提供demo。\n 5. 修复ejs bug。\n 6. 修复引入路径。\n 7. 优化自动升级重复代码、废弃旧的api。",normalizedContent:"# 更新记录\n\n\n# 3.4.0\n\n 1. 【增加】主进程mainserver支持加载静态资源，支持入口文件配置。\n 2. 【增加】config模块，增加iswebprotocol()/isfileprotocol()。\n 3. 【升级】升级electron到v21.4.4\n 4. 【升级】升级@electron/rebuild到v3.2.13\n 5. 【升级】demo分支，升级better-sqlite3到v8.4.0\n 6. 【修复】修复service多层调用。\n 7. 【优化】将打包配置独立出builder.json文件，精简package.json内容。\n\n\n# 3.3.0\n\n 1. 【增加】新增main模块，支持第三方框架或项目引入ee-core，使用其 100+ api。\n 2. 【增加】新增addon模块，可以在controller、preload、用户自定义模块等，使用addon实例。\n 3. 【增加】新增services模块，可以在controller、preload、用户自定义模块等，使用service实例。\n 4. 【增加】elecron模块，增加 window模块，提供createmainwindow()/restoremainwindow()。\n 5. 【增加】elecron模块，增加 app模块，提供create()/quit()。\n 6. 【增加】ps模块，增加 initmode()/mode()/verifymode()/isframeworkmode()/ismodulemode()。\n 7. 【优化】将main.js中业务移动到electron/index.js中，实现全局代码加密。\n 8. 【优化】demo中所有this.app依赖替换为模块化api。\n 9. 【优化】开发环境加载前端失败，优化错误提示。\n\n\n# 3.2.0\n\n 1. 【优化】新增demo分支，用来展示功能效果。\n 2. 【优化】简化master分支，仅保留必要依赖。\n 3. 【增加】demo分支优化分类（框架、系统、硬件、特效）并增加打印机demo、视频播放demo。\n 4. 【修复】ee-core 日志模块，修复跨天记录异常问题。\n 5. 【增加】ee-core utils模块，增加 machineidsync() / machineid() 。\n 6. 【增加】ee-core utils/get-port模块，增加 getport()。\n\n\n# 3.1.0\n\n 1. 【增加】utils模块mac功能：getmac / ismac\n 2. 【增加】utils模块ip功能：publicipv4 / publicipv6\n 3. 【增加】job模块childjob功能：createprocess / getpids / execpromise\n 4. 【增加】job模块childjobpool功能：create / run / runpromise / getchildbypid / getchild / getpids / killall\n 5. 【增加】exception模块：main/child/renderer进程捕获异常后是否退出\n 6. 【增加】ps模块：getencryptdir / isencrypted / exitchildjob / ischildjob / ischildpooljob\n 7. 【增加】utils模块：co / deprecate / extend / get-port / time\n 8. 【增加】tools模块：加密文件过滤及匹配\n 9. 【增加】bin模块：clean 清理加密文件\n\n\n# 3.0.0\n\n 1.  框架核心ee-core重构,升级到2.0.1\n 2.  整体架构由 单业务进程&大对象 模型， 转变为：单业务进程&模块化&多任务。\n 3.  ee-core模块划分：\n 4.  addon：插件，不提供api\n 5.  bin：脚本，提供api\n 6.  config：配置，提供api\n 7.  const：常量，提供api\n 8.  controller：控制器类，提供api\n 9.  core：核心，不提供api\n 10. ee：全局对象，提供api\n 11. electron：electron功能，提供api\n 12. exception：异常处理，提供api\n 13. httpclient：curl请求，提供api\n 14. jobs：任务，提供api\n 15. loader：加载器，提供api\n 16. log：日志，提供api\n 17. message：消息，提供api\n 18. oldutils：旧的类库，提供api\n 19. ps：进程，提供api\n 20. service：服务层类，提供api\n 21. socket：通信，提供api\n 22. tools：工具，提供api\n 23. utils：类库，提供api\n\n\n# 2.5.0\n\n 1. 增加开发模式自定义协议头\n 2. 增加sqlite数据库db文件自定义目录\n 3. 增加sqlite数据库动态切库demo\n 4. 增加远程web使用教程及demo\n 5. 删除loading文件、ci/cd配置文件\n 6. 删除ee-core中无用的constant\n 7. 升级ee-core到1.5.0\n\n\n# 2.4.0\n\n 1. 增加混淆/bytecode加密配置opt,提升安全性\n 2. 增加插件的方式重写托盘、唤醒、升级、安全、扩展等功能\n 3. 增加java服务插件，感谢“zuihou”提供的pr\n 4. 增加jave服务demo，jar等完整用例\n 5. 增加utils库函数：getenv/getappuserdatadir/gethomedir/getbasedir/ getrootdir/getappversion/getexecdir/getaddonconfig/ getmainserverconfig/gethttpserverconfig/getsocketserverconfig\n 6. 移除多余代码\n 7. 升级ee-core到1.4.1\n\n\n# 2.3.0\n\n 1. 增加addon插件模块，开发者可以自由扩展app对象\n 2. 内置window插件，实现多窗口通信\n 3. 增加上传文件demo\n 4. 增加多窗口通信demo，实现子窗口与主进程通信、子窗口之间互相通信\n 5. 增加插件config配置\n 6. 优化title显示\n 7. 增加更强大obfuscator混淆功能，提供strict类型\n 8. 移除uglify混淆及包\n 9. 升级ee-core到1.4.0\n\n\n# 2.2.1\n\n 1. 增加http服务请求过滤配置\n 2. 优化http服务开启后，浏览器默认请求报错\n 3. 将开发环境热启动配置加入config\n 4. 构建包支持windows免安装版、arm64版\n 5. 构建包支持linux arm64版、armv7l版、rpm包、pacman包\n 6. 关闭上下文隔离配置\n\n\n# 2.2.0\n\n 1. 修复加密配置\n\n\n# 2.1.9\n\n 1. 增加bytecode字节码加密的配置文件\n 2. 增加加密类型、目录、文件后缀可扩展\n 3. sqlite功能可选\n 4. 增加上下文隔离\n 5. 修复win7系统下开发异常\n\n\n# 2.1.8\n\n 1. 安全性更新\n 2. 支持bytecode字节码加密\n 3. 优化压缩混淆加密\n 4. 将废弃compress、restore命令，使用encrypt替代\n 5. mainserver增加option支持\n 6. 限制控制器业务必须为class文件\n\n\n# 2.1.7\n\n 1. 增加ssl，支持https\n 2. 优化http服务的路由写法\n 3. 优化utils部分函数 && 修复错误。\n 4. 优化http返回状态码\n 5. 去除ee-core中延迟加载功能\n 6. 去除ee-core中无效代码\n\n\n# 2.1.6\n\n 1. 增加sqlite数据库\n 2. 增加sqlite增删改查demo\n 3. 增加http服务body，支持表单、文件等\n 4. 修复热重启bug\n 5. 升级ee-core到1.2.8\n\n\n# 2.1.5\n\n 1. 增加ee-core命令\n\n\n# 2.1.4\n\n 1. 增加开发环境代码热重载\n 2. 增加菜单栏配置属性\n 3. 增加配置选项，开启/关闭硬件加速\n 4. 优化启动\n 5. 修复linux系统构建的deb包，安装后图标显示问题\n 6. 升级electron-builder到23.0.3\n 7. 升级ee-core到1.2.6\n 8. 升级electron到13.6.9\n 9. 移除loading页\n\n\n# 2.1.2\n\n 1. ipc通信增加 invoke/handle 模型\n 2. ipcrender增加 invoke异步/sendsync同步方法\n 3. 优化ee-core代码\n 4. 优化storage demo\n 5. 优化ipc通信 同步、异步、双向通信demo\n 6. 替换所有前端ipccall为ipcinvoke\n 7. 修复ipc并发请求问题\n\n\n# 2.1.1\n\n 1. 修复托盘窗口关闭问题\n 2. 修复ee-core窗口事件\n 3. 优化mac系统应用坞点击显示\n 4. 优化单应用模式\n 5. 优化代码加密\n\n\n# 2.1.0\n\n 1. 增加内置http server服务，支持配置host、端口、跨域等属性\n 2. 增加http服务相关demo\n 3. 增加socket服务相关demo\n 4. 优化内置socket server服务，支持开启/关闭\n 5. 优化前端主菜单、子菜单\n 6. 升级前端组件库\n 7. 升级store包\n 8. 一些代码优化\n\n\n# 2.0.6\n\n 1. 增加socket service options，支持path,connecttimeout,maxhttpbuffersize,cors等属性\n 2. 修复任务栏显示问题\n 3. 修复socket跨域问题\n 4. 修复构建应用失败问题\n\n\n# 2.0.5\n\n 1. 增加生命周期函数 appready()\n 2. 增加dll调用方法\n 3. 增加utils工具类方法，获取额外资源目录\n 4. 增加socket.koa属性\n 5. 修复co包异常\n 6. 优化软件调用demo\n\n\n# 2.0.3\n\n 1. 增加html模式，前端支持多个html页面\n 2. 增加socket服务，第三方应用可调用ee应用\n 3. 增加全局config属性: userhome、appversion、ispackaged、execdir\n 4. 增加utils工具类方法，获取socket端口，socket频道\n 5. 优化应用创建逻辑\n 6. 优化配置文件\n 7. 优化pkg方法\n 8. 优化动态端口获取\n\n\n# 2.0.0\n\n 1.  框架重构\n 2.  增加控制器\n 3.  增加服务器\n 4.  增加ipc\n 5.  增加socket\n 6.  增加storage\n 7.  增加全局app对象\n 8.  增加预加载\n 9.  增加核心npm包\n 10. 增加....  太多了\n\n\n# 1.16.3\n\n 1. 增加手动更新 和 强制更新\n 2. 修复ipc监听\n 3. 限制一个窗口\n 4. 更新demo\n\n\n# 1.16.2\n\n 1. 忘记更新什么了\n\n\n# 1.16.1\n\n 1. 代码压缩与混淆，增加安全性\n 2. 新logo\n 3. 文档更新\n\n\n# 1.16.0\n\n 1. 增加lowdb数据库实例代码\n 2. 更新npm源\n 3. 更新electron版本\n 4. 打包过滤frontend\n\n\n# 1.15.0\n\n 1. 增加chrome扩展程序（重点）\n 2. 增加web(html)内容嵌入\n 3. 增加多窗口打开\n 4. 增加桌面通知\n 5. 增加电源监控\n 6. 增加获取显示器信息\n 7. 增加系统主题设置\n 8. 修改功能分类\n 9. 删除非必要代码\n\n\n# 1.14.0\n\n 1.  视图样式重构\n 2.  demo增加分类\n 3.  demo界面优化，重新排版\n 4.  增加选择文件夹目录\n 5.  增加ipc通信模块与apis模块语法统一\n 6.  增加路由分类\n 7.  增加ipc支持长通信，服务端持续向页面发消息\n 8.  增加操作系统弹框demo\n 9.  删除非必要代码\n 10. 修复拉伸窗口空白\n\n\n# 1.13.0\n\n 1. 修复自动更新\n 2. 支持将任意网站打包成桌面软件\n 3. 优化启动时白屏问题\n 4. 安全检查，防止inspect debug\n 5. 自动升级支持多平台更新\n 6. 部分代码优化\n\n\n# 1.12.0\n\n 1. 崩溃上报\n 2. 调用第三方软件 及 demo实现\n 3. 名称设置\n 4. 方法注释说明\n\n\n# 1.11.0\n\n 1. 唤醒应用功能\n 2. 优化代码\n\n\n# 1.10.0\n\n 1. 优化代码结构，功能模块更加合理。\n 2. 升级electron核心到12版本。\n 3. 升级electron-builder，支持mac m1芯片架构。\n 4. 增加快捷键功能模块并提供demo。\n 5. 修复ejs bug。\n 6. 修复引入路径。\n 7. 优化自动升级重复代码、废弃旧的api。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"常见问题",frontmatter:{title:"常见问题",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/23649b/",article:!1},regularPath:"/01.v3/060.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html",relativePath:"01.v3/060.常见问题.md",key:"v-c6133784",path:"/pages/23649b/",headers:[{level:3,title:"1：打包时，下载资源超时：",slug:"_1-打包时-下载资源超时",normalizedTitle:"1：打包时，下载资源超时：",charIndex:11},{level:3,title:"2：打包失败（异常）",slug:"_2-打包失败-异常",normalizedTitle:"2：打包失败（异常）",charIndex:55},{level:3,title:"3：打包后，运行闪退 或 报错",slug:"_3-打包后-运行闪退-或-报错",normalizedTitle:"3：打包后，运行闪退 或 报错",charIndex:846},{level:3,title:"4：cmd控制台乱码",slug:"_4-cmd控制台乱码",normalizedTitle:"4：cmd控制台乱码",charIndex:4570},{level:3,title:"5：npm包缺失或异常",slug:"_5-npm包缺失或异常",normalizedTitle:"5：npm包缺失或异常",charIndex:4594},{level:3,title:"6：白屏、api 404、跨越问题",slug:"_6-白屏、api-404、跨越问题",normalizedTitle:"6：白屏、api 404、跨越问题",charIndex:4841},{level:3,title:"7：安装 better-sqlite3 失败",slug:"_7-安装-better-sqlite3-失败",normalizedTitle:"7：安装 better-sqlite3 失败",charIndex:5192},{level:3,title:"8：在浏览器中打开vue启动的服务地址（http://localhost:8080）报错",slug:"_8-在浏览器中打开vue启动的服务地址-http-localhost-8080-报错",normalizedTitle:"8：在浏览器中打开vue启动的服务地址（http://localhost:8080）报错",charIndex:7321},{level:3,title:"10：node module版本不匹配",slug:"_10-node-module版本不匹配",normalizedTitle:"10：node module版本不匹配",charIndex:7510},{level:3,title:"11：macOS系统下，自动更新失败",slug:"_11-macos系统下-自动更新失败",normalizedTitle:"11：macos系统下，自动更新失败",charIndex:7831},{level:3,title:"12：软件黑屏或者卡死",slug:"_12-软件黑屏或者卡死",normalizedTitle:"12：软件黑屏或者卡死",charIndex:7943},{level:3,title:"14：代码不生效",slug:"_14-代码不生效",normalizedTitle:"14：代码不生效",charIndex:8209},{level:3,title:"15：无法识别的class",slug:"_15-无法识别的class",normalizedTitle:"15：无法识别的class",charIndex:8301},{level:3,title:"16：无法使用某些 electron 的api",slug:"_16-无法使用某些-electron-的api",normalizedTitle:"16：无法使用某些 electron 的api",charIndex:9407},{level:3,title:"17：双击exe无反应",slug:"_17-双击exe无反应",normalizedTitle:"17：双击exe无反应",charIndex:10651},{level:3,title:"18：双击exe报错",slug:"_18-双击exe报错",normalizedTitle:"18：双击exe报错",charIndex:10685},{level:3,title:"19：运行rd，encrypt ，clean命令时报错",slug:"_19-运行rd-encrypt-clean命令时报错",normalizedTitle:"19：运行rd，encrypt ，clean命令时报错",charIndex:11515}],headersStr:"1：打包时，下载资源超时： 2：打包失败（异常） 3：打包后，运行闪退 或 报错 4：cmd控制台乱码 5：npm包缺失或异常 6：白屏、api 404、跨越问题 7：安装 better-sqlite3 失败 8：在浏览器中打开vue启动的服务地址（http://localhost:8080）报错 10：node module版本不匹配 11：macOS系统下，自动更新失败 12：软件黑屏或者卡死 14：代码不生效 15：无法识别的class 16：无法使用某些 electron 的api 17：双击exe无反应 18：双击exe报错 19：运行rd，encrypt ，clean命令时报错",content:"# 常见问题\n\n\n# 1：打包时，下载资源超时：\n\n# 使用国内源，参见 安装 或 生成软件 教程\n\n\n\n# 2：打包失败（异常）\n\n错误1：python 。。。。。\n解决：升级构建包，npm install electron-builder@23.0.6\n\n\n错误2：打包报错Fatal error: Unable to commit changes\n原因：\n1. 磁盘是不是满了 ，这个坑也困扰了我半个小时，虽然不长，但是是低级错误\n2. 杀毒软件，我把电脑管家关了就好了，还有mcfee，麦克非那个杀毒等等。\n3. 使用makensis包时，账户名为中文，构建异常。\n解决：\n1. 清理磁盘\n2. 退出杀毒软件\n3. https://www.azimiao.com/6250.html\n\n\n错误3：...resource\\app.asar does not exist ...\n解决：electron-egg/目录中，如果有app目录，则该目录必须是个普通文件目录，不能为项目目录，\n比如，app/目录内，不能有 .git、 package.json、node_modules等文件。\n\n\n错误4：...Need executable 'ar' to convert dir to deb\n原因：fpm 工具需要 ar 命令才能打包deb, 安装binutils\n解决：sudo apt install binutils\n\n\n错误5：...Cannot find module 'fs/promises'\n原因：electron-builder包版本太高，一些语法不兼容\n解决：降低electron-builder版本，重新安装包：electron-builder <= 22.10.5\n\n\n错误6：...ERR! better-sqlite@7.6.2 install ...\n原因：sqlite需要更高版本的node.js\n解决：更新node.js >= 14.21.1\n\n\n\n# 3：打包后，运行闪退 或 报错\n\n> 闪退\n\n# 开发模式正常，打包后运行闪退\n1. 查看日志中是否有报错\n2. 在cmd中运行程序，可看到打包后的程序运行是否有异常错误（日志中没有的）\n如：d:/soft/electron-egg.exe   按“回车”\n\n\n\n> 报错1：代码被过滤\n\nA JavaScript error occurred in the main process \nUncaught Exception: \nAssertionError [ERR ASSERTION]: Directory C:\\Program Files\\ee\\resources\\app.asar\\electron not exists \nat new EeCore (C:\\Program Files\\ee\\resources\\app.asar\\node_modules\\ee-core\\core\\lib\\ee.js:26:5) \nat new BaseApp (C:\\Program Files\\ee\\resources\\app.asar\\node_modules\\ee-core\\lib\\baseApp.js:16:5) \nat new EeApp (C:\\Program Files\\ee\\resources\\app.asar\\node_modules\\ee-core\\lib\\eeApp.js:12:5) \nat new Appliaction (C:\\Program Files\\ee\\resources\\app.asar\\node_modules\\ee-core\\lib\\application.js:67:5) \nat new Main (C:\\Program Files\\ee\\resources\\app.asar\\main.js:6:5) \nat Object.<anonymous> (C:\\Program Files\\ee\\resources\\app.asar\\main.js:48:1) \nat Module. compile (internal/modules/cjs/loader.js:1078:30) \nat Object.Module._extensions..js (internal/modules/cjs/loader.js:1108:10) \nat Module.load (internal/modules/cjs/loader.js:935:32) \nat Modulejoad (internal/modules/cjs/loader.js:776:14) \n\n\n提示： ./app.asar/electron not exits\n\n原因：未使用加密功能，但是把源码过滤了，导致找不到代码。\n\n处理：请查看 代码加密文档\n\n> 报错2：bytecode加密时，代码不规范\n\nA JavaScript error occurred in the main process\nUncaught Exception:\nTypeError:Class constructor ExampleService cannot be invoked without new\nat getExports(C:Program Files ee resources app.asarnode modules ee-core core liblloader\\file.loader..:15)\nat ContextLoader.parse(C:Program Files ee resources app asarnode modules ee-core core liblloader\\file.loader..:23)\nat ContextLoader.load C:\\Program Filesleeresources app.asarnode modules ee-core coreiblloader\\file loader....:24)\nat AppLoader.loadToContext(C:Program Files eeresources app.asarnode modules ee-core coreliblloader'ee loader.j..:28)\nat AppLoader.loadService(C:Prog am Files eeresources app.asarnode modules ee-core corelib\\loader\\mixin){servi..:10)\nat AppLoader.load(C\\Program Files ee resources\\app.asar)node modules ee-core ib\\appLoaderjs:26:10)\nat new BaseApp(C:\\Program Fileseeresources app.asar node modules ee-core ib baseApp.js:28:17)\nat new EeApp(C\\Program Files ee resources app.asarnode modules ee-core ib eeApp.js:12:5)\nat new Appliaction(C:\\Program Fileslee resources app.asar node modules ee-core lib\\applicationjs:67:5)\nat new Main(C:\\Program Files eeresources app.asarmain.js:6:5)\n\n\n显示 TypeError Class constructor ExampleService cannot be invoked withou 'new' at ......\n\n原因：每个加密的class文件，需要添加 toString() 方法\n\n处理：请查看 代码加密文档 中 代码要求\n\n> 报错3：bytecode、strict 加密，要区分系统；比如window-64只能构建64软件，不能构建32位 如下图，用win64构建的32位软件，是无法运行的。\n\nA JavaScript error occurred in the main process\nUncaught Exception:\nError:[egg-core] load file:C:\\Program Fileslee\\resources\\app.asar\\public\\electron\\config config.defaultjsc,\nerror:Invalid Or incompatible cached data(cachedDataRejected)\nat Object.Module.extensions. <computed>[as .jsc](C\\Program Filesleelresourceslapp.asar\\node.modules\\bytenode\\lib\\indexjs:272:11)\nat Module.load(internal/modules/cjs/loaderjs:935:32)\nat Module.load(internal/modules/cjs/loaderjs:776:14)\nat Function.f.load(electron/js2c/asar bundlejs:5:12913)\nat Module.require (internal/modules/cjs/loaderjs:959:19)\nat require(internal/modules/cjs/Herpers.js:88:18)\nat Object.loadFile(C:Program Fileslee\\resources\\app.asarlnode moduleslee-corelcore\\lib\\utils\\indexjs:29:19)\nat AppLoader.requireFile(C:Program Filesleelresourceslapp.asarlnode moduleslee-corelcoreliblloaderlee loaderj.:23)\nat AppLoaderloadFile(C:\\Program\n\n\n> 报错4：windows防火墙，授权electron应用访问网络 可能需要重启电脑\n\nA JavaScript error occurred in the main process\nUncaught Exception:\nError: net::ERR CONNECTION REFUSED at SimpleURLLoaderWrapper.<anonymous> (electron/js2c/browser init.js:105:7068)\n\n\n\n# 4：cmd控制台乱码\n\n参照：中文乱码\n\n\n# 5：npm包缺失或异常\n\n安装异常时，删掉node_modules和package-lock文件\n\n# 1、如：cannot find module 'debug'\n\n解决：npm install debug --save\n\n# 2、npm install安装异常时\n删掉 package-lock.json\n删掉 node_modules文件夹\n重新执行 npm install 或 cnpm install\n\n# 备注\n包问题，都用npm安装，不要用cnpm、pnpm、yarn\n\n\n\n# 6：白屏、api 404、跨越问题\n\n# dev模式白屏\n问题1：先启动前端服务，再启动桌面服务，请查看文档中开发步骤\n\n# 打包后白屏\n可能原因：代码不生效\n如果执行过加密，则会生成加密代码：/public/electron ，框架优先读取它，源代码则不生效。\n如果发现编写的代码不生效，请记得删除加密代码文件。\n\n# 使用了代理\n问题2：代理导致api找不到\n解决方法：\n1：把代理模式，换成 环境变量模式，如：在.env（开发环境、生产环境）文件里定义多个url变量并赋值，代码中的url地址\n用环境变量代替。\n2：设置config.default.json中的windowsOption.webPreferences.webSecurity=true\n\n\n知识点：为什么不能使用代理？\n\n\n# 7：安装 better-sqlite3 失败\n\n不同node.js版本，对应的better-sqlite3版本也不尽相同。请尝试 npm i better-sqlite3@7.6.0\n\n# error 1\n......\nenv: python: No such file or directory\nmake: *** [Release/sqlite3.a] Error 127\nrm ba23eeee118cd63e16015df367567cb043fed872.intermediate\ngyp ERR! build error \ngyp ERR! stack Error: `make` failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/Users/apple/.nvm/versions/node/v14.16.0/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:194:23)\n......\n\n# 原因\n需要python环境，（MacOS高版本，不再提供默认python）\n\n# 解决方案\n如Mac系统（其它系统请自己百度Python安装方法）\n1. brew install python@3.9\n2. vim ~/.zshrc 添加\n# python\nalias python='/usr/local/bin/python3'\nexport PATH=\"/usr/local/opt/python@3.9/libexec/bin:$PATH\"\n3. source ~/.zshrc\n\n\n# error 2\n......\ngyp ERR! build error \ngyp ERR! stack Error: `C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\MSBuild.exe` failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onExit (C:\\nvm\\v14.16.0\\node_modules\\npm\\node_modules\\node-gyp\\lib\\build.js:194:23)\ngyp ERR! stack     at ChildProcess.emit (events.js:315:20)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12)\ngyp ERR! System Windows_NT 10.0.19041\ngyp ERR! command \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\nvm\\\\v14.16.0\\\\node_modules\\\\npm\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js\" \"rebuild\" \"--release\"\ngyp ERR! cwd D:\\www\\xing\\oschina-desktop\\node_modules\\better-sqlite3\n......\n\n\n# 原因\n需要node-gyp工具\n\n# 解决方案\n执行命令：npm i node-gyp -g\n\n\n# 错误3\n......\nwas compiled against a different Node.js version using\nNODE_MODULE_VERSION 83. This version of Node.js requires\nNODE_MODULE_VERSION 89. Please try re-compiling or re-installing\n......\n\n\n# 原因\nsqlite包是用c\\c++写的，下载的可执行程序可能与你的操作系统不一致，因此需要根据源代码重新构建。\n\n# 解决方案\n执行命令：npm run re-sqlite\n\n\n# 错误4\n......\nError: node-gyp failed to reuild ......electron-edge-js\nError: ...BuildTools\\MSBuild\\15.0\\Bin\\...\n......\n\n\n# 原因\n缺少微软构建工具\n\n# 解决方案\n执行命令：npm --vs2015 i -g --production windows-build-tools\n\n\n# 其它错误\n查看 better-sqlite3 文档（Troubleshooting installation）\nhttps://github.com/WiseLibs/better-sqlite3/blob/2194095aa1183e9c21d28eafadeac0d4d4d42625/docs/troubleshooting.md\n\n\n\n\n# 8：在浏览器中打开vue启动的服务地址（http://localhost:8080）报错\n\n错误：Uncaught TypeError: window.require is not a function......\n原因：vue项目中有个demo功能需要访问electron模块，在普通浏览器中是不能解析的。\n处理：尽量在electron启动的窗口中调试前端页面吧。\n\n\n\n# 10：node module版本不匹配\n\n# 错误\n......\nwas compiled against a different Node.js version using\nNODE_MODULE_VERSION 83. This version of Node.js requires\nNODE_MODULE_VERSION 89. Please try re-compiling or re-installing\n......\n\n\n# 原因\n一些npm包是用c\\c++等其它语言写的，下载的可执行程序可能与你的操作系统不一致，因此需要根据源代码重新构建。\n\n# 解决方案\nelectron-rebuild -f -w 模块名\n\n\n\n# 11：macOS系统下，自动更新失败\n\n// 尝试关闭asar功能\n1. 检查确认苹果签名账号\n2. 修改package.json中，build对象asar属性值为false\n3. 使用代码加密功能，以防源码暴露\n\n\n\n# 12：软件黑屏或者卡死\n\n错误： ... ERROR:gpu_memory_buffer_support_x11.cc......\n原因：win7或者Linux系统，不支持gpu加速\n处理：在main.js文件的ready()方法中关闭硬件加速\n伪代码：\nconst isWin7 = os.release().startsWith('6.1');\nconst isLinux = true;\nif (isWin7 || isLinux) {\n  app.disableHardwareAcceleration();\n}\n\n\n\n# 14：代码不生效\n\n如果执行过加密，则会生成加密代码：/public/electron ，框架优先读取它，源代码则不生效。 如果发现编写的代码不生效，请记得删除加密代码文件。\n\n\n# 15：无法识别的class\n\nA JavaScript error occurred in the main process\nUncaught Exception:\nTypeError:Class extends value undefined is not constructor or null\nat Object.anonymous> (C:\\Users\\Administrator)Desktop e lectron areatool web client\\mainjs:3:20)\nat Module compile(internal/modules/cjs/loaderjs:1078:30)\nat Object.Module extensions..js(interna/modules/cjs/loaderjs:108:10)\nat Module.load(interna l/modules/cjs/loaderjs:935:32)\nat Module.load(internal/modules/cjs/loader.js:776:14)\nat Function.f.load(e ectron/js2c/asa bundlejs:5:12913)\nat oadApplicationPackage(C:\\Users\\Administrator Desktop\\electron areatoc web_client\\node modules e...:6\nat Object.<anonymous:(C:}Usersv Administrator\\Deskto p ctron areatoo web client\\node modules el...:9)\nat Module.compile(internal/modules/cjs/oaderjs:1078:30)\nat Object.Module extensions.js(interna l/modules/cjs/loaderjs:1108:10)\n\n\n旧的ee-core包提供的api，单词拼写有误 Application\nconst { Appliaction } = require('ee-core');\n\n# 修改为：\nconst { Application } = require('ee-core');\nconst EE = require('ee-core/ee');\n\nclass Main extends Application {\n......\n}\n\nEE.app = new Main();\n\n\n\n# 16：无法使用某些 electron 的api\n\nelectron的一些api有引入顺序要求，请将它们放在合适的位置。 比如：\n\n2023-05-11 18:31:01,546 ERROR 77836 nodejs.unhandledExceptionError: [ee-core] load file:  \nerror: Cannot create BrowserWindow before app is ready\n    at Object.createWindow (D:\\www\\xing\\electron-egg\\node_modules\\ee-core\\electron\\window.js:21:15)\n    at Object.getMainWindow (D:\\www\\xing\\electron-egg\\node_modules\\ee-core\\electron\\index.js:11:35)\n    at Object.get mainWindow [as mainWindow] (D:\\www\\xing\\electron-egg\\node_modules\\ee-core\\electron\\index.js:21:17)\n    at Object.<anonymous> (D:\\www\\xing\\electron-egg\\electron\\service\\os.js:5:9)\n    at Module._compile (internal/modules/cjs/loader.js:1078:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1108:10)\n    at Module.load (internal/modules/cjs/loader.js:935:32)\n    at Module._load (internal/modules/cjs/loader.js:776:14)\n    at Function.f._load (electron/js2c/asar_bundle.js:5:12913)\n    at Module.require (internal/modules/cjs/loader.js:959:19)\n\n\n解决方案：\n\n# 不要直接导出模块中某个对象，因为项目启动时，框架源码可能并没有加载完。\n\n# 错误写法\nconst { mainWindow } = require('ee-core/electron');\nconst { logger } = require('ee-core/electron');\n\n# 正确写法\nconst Electron = require('ee-core/electron');\nconst Log = require('ee-core/log');\n\n\n\n# 17：双击exe无反应\n\n代码被过滤，请仔细阅读：构建文档\n\n\n# 18：双击exe报错\n\nD:\\test\\electron\\electron-egg\\out\\win-unpacked>\nD:\\test\\electron\\electron-egg\\out\\win-unpacked\\resources\\app.asar\\node_modules\\ee-core\\log\\logger.js:38\nlogger: sysConfig.logger,\n  ^\n\nTypeError: Cannot read property 'logger' of undefined\nat Object.create (D:\\test\\electron\\electron-egg\\out\\win-unpacked\\resources\\app.asar\\node_modules\\ee-core\\log\\logger.js:38:27)\nat Object.get coreLogger [as coreLogger] (D:\\test\\electron\\electron-egg\\out\\win-unpacked\\resources\\app.asar\\node_modules\\ee-core\\log\\index.js:30:32)\nat process. (D:\\test\\electron\\electron-egg\\out\\win-unpacked\\resources\\app.asar\\node_modules\\ee-core\\exception\\index.js:26:9)\nat process.emit (events.js:327:22)\nat process._fatalException (internal/process/execution.js:163:25)\n\n\n# 情况一\n# 这种是临时文件，无法使用，忽略它。\n临时文件：out/win-unpacked\n\n# 情况二\n代码被过滤了，请仔细阅读：构建文档\n\n\n\n# 19：运行rd，encrypt ，clean命令时报错\n\nenv: node\\r: No such file or directory\nerror Command failed with exit code 127.\n\n\n原因：windows系统的换行回车是CRLF，类unix系统下是LF\n\n解决方案：\n\n// 用vs code打开把行尾序列由CRLF改成LF就可以了\nnode_modules/ee-core/bin/tools.js\n",normalizedContent:"# 常见问题\n\n\n# 1：打包时，下载资源超时：\n\n# 使用国内源，参见 安装 或 生成软件 教程\n\n\n\n# 2：打包失败（异常）\n\n错误1：python 。。。。。\n解决：升级构建包，npm install electron-builder@23.0.6\n\n\n错误2：打包报错fatal error: unable to commit changes\n原因：\n1. 磁盘是不是满了 ，这个坑也困扰了我半个小时，虽然不长，但是是低级错误\n2. 杀毒软件，我把电脑管家关了就好了，还有mcfee，麦克非那个杀毒等等。\n3. 使用makensis包时，账户名为中文，构建异常。\n解决：\n1. 清理磁盘\n2. 退出杀毒软件\n3. https://www.azimiao.com/6250.html\n\n\n错误3：...resource\\app.asar does not exist ...\n解决：electron-egg/目录中，如果有app目录，则该目录必须是个普通文件目录，不能为项目目录，\n比如，app/目录内，不能有 .git、 package.json、node_modules等文件。\n\n\n错误4：...need executable 'ar' to convert dir to deb\n原因：fpm 工具需要 ar 命令才能打包deb, 安装binutils\n解决：sudo apt install binutils\n\n\n错误5：...cannot find module 'fs/promises'\n原因：electron-builder包版本太高，一些语法不兼容\n解决：降低electron-builder版本，重新安装包：electron-builder <= 22.10.5\n\n\n错误6：...err! better-sqlite@7.6.2 install ...\n原因：sqlite需要更高版本的node.js\n解决：更新node.js >= 14.21.1\n\n\n\n# 3：打包后，运行闪退 或 报错\n\n> 闪退\n\n# 开发模式正常，打包后运行闪退\n1. 查看日志中是否有报错\n2. 在cmd中运行程序，可看到打包后的程序运行是否有异常错误（日志中没有的）\n如：d:/soft/electron-egg.exe   按“回车”\n\n\n\n> 报错1：代码被过滤\n\na javascript error occurred in the main process \nuncaught exception: \nassertionerror [err assertion]: directory c:\\program files\\ee\\resources\\app.asar\\electron not exists \nat new eecore (c:\\program files\\ee\\resources\\app.asar\\node_modules\\ee-core\\core\\lib\\ee.js:26:5) \nat new baseapp (c:\\program files\\ee\\resources\\app.asar\\node_modules\\ee-core\\lib\\baseapp.js:16:5) \nat new eeapp (c:\\program files\\ee\\resources\\app.asar\\node_modules\\ee-core\\lib\\eeapp.js:12:5) \nat new appliaction (c:\\program files\\ee\\resources\\app.asar\\node_modules\\ee-core\\lib\\application.js:67:5) \nat new main (c:\\program files\\ee\\resources\\app.asar\\main.js:6:5) \nat object.<anonymous> (c:\\program files\\ee\\resources\\app.asar\\main.js:48:1) \nat module. compile (internal/modules/cjs/loader.js:1078:30) \nat object.module._extensions..js (internal/modules/cjs/loader.js:1108:10) \nat module.load (internal/modules/cjs/loader.js:935:32) \nat modulejoad (internal/modules/cjs/loader.js:776:14) \n\n\n提示： ./app.asar/electron not exits\n\n原因：未使用加密功能，但是把源码过滤了，导致找不到代码。\n\n处理：请查看 代码加密文档\n\n> 报错2：bytecode加密时，代码不规范\n\na javascript error occurred in the main process\nuncaught exception:\ntypeerror:class constructor exampleservice cannot be invoked without new\nat getexports(c:program files ee resources app.asarnode modules ee-core core liblloader\\file.loader..:15)\nat contextloader.parse(c:program files ee resources app asarnode modules ee-core core liblloader\\file.loader..:23)\nat contextloader.load c:\\program filesleeresources app.asarnode modules ee-core coreiblloader\\file loader....:24)\nat apploader.loadtocontext(c:program files eeresources app.asarnode modules ee-core coreliblloader'ee loader.j..:28)\nat apploader.loadservice(c:prog am files eeresources app.asarnode modules ee-core corelib\\loader\\mixin){servi..:10)\nat apploader.load(c\\program files ee resources\\app.asar)node modules ee-core ib\\apploaderjs:26:10)\nat new baseapp(c:\\program fileseeresources app.asar node modules ee-core ib baseapp.js:28:17)\nat new eeapp(c\\program files ee resources app.asarnode modules ee-core ib eeapp.js:12:5)\nat new appliaction(c:\\program fileslee resources app.asar node modules ee-core lib\\applicationjs:67:5)\nat new main(c:\\program files eeresources app.asarmain.js:6:5)\n\n\n显示 typeerror class constructor exampleservice cannot be invoked withou 'new' at ......\n\n原因：每个加密的class文件，需要添加 tostring() 方法\n\n处理：请查看 代码加密文档 中 代码要求\n\n> 报错3：bytecode、strict 加密，要区分系统；比如window-64只能构建64软件，不能构建32位 如下图，用win64构建的32位软件，是无法运行的。\n\na javascript error occurred in the main process\nuncaught exception:\nerror:[egg-core] load file:c:\\program fileslee\\resources\\app.asar\\public\\electron\\config config.defaultjsc,\nerror:invalid or incompatible cached data(cacheddatarejected)\nat object.module.extensions. <computed>[as .jsc](c\\program filesleelresourceslapp.asar\\node.modules\\bytenode\\lib\\indexjs:272:11)\nat module.load(internal/modules/cjs/loaderjs:935:32)\nat module.load(internal/modules/cjs/loaderjs:776:14)\nat function.f.load(electron/js2c/asar bundlejs:5:12913)\nat module.require (internal/modules/cjs/loaderjs:959:19)\nat require(internal/modules/cjs/herpers.js:88:18)\nat object.loadfile(c:program fileslee\\resources\\app.asarlnode moduleslee-corelcore\\lib\\utils\\indexjs:29:19)\nat apploader.requirefile(c:program filesleelresourceslapp.asarlnode moduleslee-corelcoreliblloaderlee loaderj.:23)\nat apploaderloadfile(c:\\program\n\n\n> 报错4：windows防火墙，授权electron应用访问网络 可能需要重启电脑\n\na javascript error occurred in the main process\nuncaught exception:\nerror: net::err connection refused at simpleurlloaderwrapper.<anonymous> (electron/js2c/browser init.js:105:7068)\n\n\n\n# 4：cmd控制台乱码\n\n参照：中文乱码\n\n\n# 5：npm包缺失或异常\n\n安装异常时，删掉node_modules和package-lock文件\n\n# 1、如：cannot find module 'debug'\n\n解决：npm install debug --save\n\n# 2、npm install安装异常时\n删掉 package-lock.json\n删掉 node_modules文件夹\n重新执行 npm install 或 cnpm install\n\n# 备注\n包问题，都用npm安装，不要用cnpm、pnpm、yarn\n\n\n\n# 6：白屏、api 404、跨越问题\n\n# dev模式白屏\n问题1：先启动前端服务，再启动桌面服务，请查看文档中开发步骤\n\n# 打包后白屏\n可能原因：代码不生效\n如果执行过加密，则会生成加密代码：/public/electron ，框架优先读取它，源代码则不生效。\n如果发现编写的代码不生效，请记得删除加密代码文件。\n\n# 使用了代理\n问题2：代理导致api找不到\n解决方法：\n1：把代理模式，换成 环境变量模式，如：在.env（开发环境、生产环境）文件里定义多个url变量并赋值，代码中的url地址\n用环境变量代替。\n2：设置config.default.json中的windowsoption.webpreferences.websecurity=true\n\n\n知识点：为什么不能使用代理？\n\n\n# 7：安装 better-sqlite3 失败\n\n不同node.js版本，对应的better-sqlite3版本也不尽相同。请尝试 npm i better-sqlite3@7.6.0\n\n# error 1\n......\nenv: python: no such file or directory\nmake: *** [release/sqlite3.a] error 127\nrm ba23eeee118cd63e16015df367567cb043fed872.intermediate\ngyp err! build error \ngyp err! stack error: `make` failed with exit code: 2\ngyp err! stack     at childprocess.onexit (/users/apple/.nvm/versions/node/v14.16.0/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:194:23)\n......\n\n# 原因\n需要python环境，（macos高版本，不再提供默认python）\n\n# 解决方案\n如mac系统（其它系统请自己百度python安装方法）\n1. brew install python@3.9\n2. vim ~/.zshrc 添加\n# python\nalias python='/usr/local/bin/python3'\nexport path=\"/usr/local/opt/python@3.9/libexec/bin:$path\"\n3. source ~/.zshrc\n\n\n# error 2\n......\ngyp err! build error \ngyp err! stack error: `c:\\program files (x86)\\msbuild\\14.0\\bin\\msbuild.exe` failed with exit code: 1\ngyp err! stack     at childprocess.onexit (c:\\nvm\\v14.16.0\\node_modules\\npm\\node_modules\\node-gyp\\lib\\build.js:194:23)\ngyp err! stack     at childprocess.emit (events.js:315:20)\ngyp err! stack     at process.childprocess._handle.onexit (internal/child_process.js:277:12)\ngyp err! system windows_nt 10.0.19041\ngyp err! command \"c:\\\\program files\\\\nodejs\\\\node.exe\" \"c:\\\\nvm\\\\v14.16.0\\\\node_modules\\\\npm\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js\" \"rebuild\" \"--release\"\ngyp err! cwd d:\\www\\xing\\oschina-desktop\\node_modules\\better-sqlite3\n......\n\n\n# 原因\n需要node-gyp工具\n\n# 解决方案\n执行命令：npm i node-gyp -g\n\n\n# 错误3\n......\nwas compiled against a different node.js version using\nnode_module_version 83. this version of node.js requires\nnode_module_version 89. please try re-compiling or re-installing\n......\n\n\n# 原因\nsqlite包是用c\\c++写的，下载的可执行程序可能与你的操作系统不一致，因此需要根据源代码重新构建。\n\n# 解决方案\n执行命令：npm run re-sqlite\n\n\n# 错误4\n......\nerror: node-gyp failed to reuild ......electron-edge-js\nerror: ...buildtools\\msbuild\\15.0\\bin\\...\n......\n\n\n# 原因\n缺少微软构建工具\n\n# 解决方案\n执行命令：npm --vs2015 i -g --production windows-build-tools\n\n\n# 其它错误\n查看 better-sqlite3 文档（troubleshooting installation）\nhttps://github.com/wiselibs/better-sqlite3/blob/2194095aa1183e9c21d28eafadeac0d4d4d42625/docs/troubleshooting.md\n\n\n\n\n# 8：在浏览器中打开vue启动的服务地址（http://localhost:8080）报错\n\n错误：uncaught typeerror: window.require is not a function......\n原因：vue项目中有个demo功能需要访问electron模块，在普通浏览器中是不能解析的。\n处理：尽量在electron启动的窗口中调试前端页面吧。\n\n\n\n# 10：node module版本不匹配\n\n# 错误\n......\nwas compiled against a different node.js version using\nnode_module_version 83. this version of node.js requires\nnode_module_version 89. please try re-compiling or re-installing\n......\n\n\n# 原因\n一些npm包是用c\\c++等其它语言写的，下载的可执行程序可能与你的操作系统不一致，因此需要根据源代码重新构建。\n\n# 解决方案\nelectron-rebuild -f -w 模块名\n\n\n\n# 11：macos系统下，自动更新失败\n\n// 尝试关闭asar功能\n1. 检查确认苹果签名账号\n2. 修改package.json中，build对象asar属性值为false\n3. 使用代码加密功能，以防源码暴露\n\n\n\n# 12：软件黑屏或者卡死\n\n错误： ... error:gpu_memory_buffer_support_x11.cc......\n原因：win7或者linux系统，不支持gpu加速\n处理：在main.js文件的ready()方法中关闭硬件加速\n伪代码：\nconst iswin7 = os.release().startswith('6.1');\nconst islinux = true;\nif (iswin7 || islinux) {\n  app.disablehardwareacceleration();\n}\n\n\n\n# 14：代码不生效\n\n如果执行过加密，则会生成加密代码：/public/electron ，框架优先读取它，源代码则不生效。 如果发现编写的代码不生效，请记得删除加密代码文件。\n\n\n# 15：无法识别的class\n\na javascript error occurred in the main process\nuncaught exception:\ntypeerror:class extends value undefined is not constructor or null\nat object.anonymous> (c:\\users\\administrator)desktop e lectron areatool web client\\mainjs:3:20)\nat module compile(internal/modules/cjs/loaderjs:1078:30)\nat object.module extensions..js(interna/modules/cjs/loaderjs:108:10)\nat module.load(interna l/modules/cjs/loaderjs:935:32)\nat module.load(internal/modules/cjs/loader.js:776:14)\nat function.f.load(e ectron/js2c/asa bundlejs:5:12913)\nat oadapplicationpackage(c:\\users\\administrator desktop\\electron areatoc web_client\\node modules e...:6\nat object.<anonymous:(c:}usersv administrator\\deskto p ctron areatoo web client\\node modules el...:9)\nat module.compile(internal/modules/cjs/oaderjs:1078:30)\nat object.module extensions.js(interna l/modules/cjs/loaderjs:1108:10)\n\n\n旧的ee-core包提供的api，单词拼写有误 application\nconst { appliaction } = require('ee-core');\n\n# 修改为：\nconst { application } = require('ee-core');\nconst ee = require('ee-core/ee');\n\nclass main extends application {\n......\n}\n\nee.app = new main();\n\n\n\n# 16：无法使用某些 electron 的api\n\nelectron的一些api有引入顺序要求，请将它们放在合适的位置。 比如：\n\n2023-05-11 18:31:01,546 error 77836 nodejs.unhandledexceptionerror: [ee-core] load file:  \nerror: cannot create browserwindow before app is ready\n    at object.createwindow (d:\\www\\xing\\electron-egg\\node_modules\\ee-core\\electron\\window.js:21:15)\n    at object.getmainwindow (d:\\www\\xing\\electron-egg\\node_modules\\ee-core\\electron\\index.js:11:35)\n    at object.get mainwindow [as mainwindow] (d:\\www\\xing\\electron-egg\\node_modules\\ee-core\\electron\\index.js:21:17)\n    at object.<anonymous> (d:\\www\\xing\\electron-egg\\electron\\service\\os.js:5:9)\n    at module._compile (internal/modules/cjs/loader.js:1078:30)\n    at object.module._extensions..js (internal/modules/cjs/loader.js:1108:10)\n    at module.load (internal/modules/cjs/loader.js:935:32)\n    at module._load (internal/modules/cjs/loader.js:776:14)\n    at function.f._load (electron/js2c/asar_bundle.js:5:12913)\n    at module.require (internal/modules/cjs/loader.js:959:19)\n\n\n解决方案：\n\n# 不要直接导出模块中某个对象，因为项目启动时，框架源码可能并没有加载完。\n\n# 错误写法\nconst { mainwindow } = require('ee-core/electron');\nconst { logger } = require('ee-core/electron');\n\n# 正确写法\nconst electron = require('ee-core/electron');\nconst log = require('ee-core/log');\n\n\n\n# 17：双击exe无反应\n\n代码被过滤，请仔细阅读：构建文档\n\n\n# 18：双击exe报错\n\nd:\\test\\electron\\electron-egg\\out\\win-unpacked>\nd:\\test\\electron\\electron-egg\\out\\win-unpacked\\resources\\app.asar\\node_modules\\ee-core\\log\\logger.js:38\nlogger: sysconfig.logger,\n  ^\n\ntypeerror: cannot read property 'logger' of undefined\nat object.create (d:\\test\\electron\\electron-egg\\out\\win-unpacked\\resources\\app.asar\\node_modules\\ee-core\\log\\logger.js:38:27)\nat object.get corelogger [as corelogger] (d:\\test\\electron\\electron-egg\\out\\win-unpacked\\resources\\app.asar\\node_modules\\ee-core\\log\\index.js:30:32)\nat process. (d:\\test\\electron\\electron-egg\\out\\win-unpacked\\resources\\app.asar\\node_modules\\ee-core\\exception\\index.js:26:9)\nat process.emit (events.js:327:22)\nat process._fatalexception (internal/process/execution.js:163:25)\n\n\n# 情况一\n# 这种是临时文件，无法使用，忽略它。\n临时文件：out/win-unpacked\n\n# 情况二\n代码被过滤了，请仔细阅读：构建文档\n\n\n\n# 19：运行rd，encrypt ，clean命令时报错\n\nenv: node\\r: no such file or directory\nerror command failed with exit code 127.\n\n\n原因：windows系统的换行回车是crlf，类unix系统下是lf\n\n解决方案：\n\n// 用vs code打开把行尾序列由crlf改成lf就可以了\nnode_modules/ee-core/bin/tools.js\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"介绍",frontmatter:{title:"介绍",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/96f672/",article:!1},regularPath:"/02.v2/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/010.%E7%AE%80%E4%BB%8B.html",relativePath:"02.v2/010.快速入门/010.简介.md",key:"v-0712ef68",path:"/pages/96f672/",headers:[{level:3,title:"为什么使用",slug:"为什么使用",normalizedTitle:"为什么使用",charIndex:83},{level:3,title:"愿景",slug:"愿景",normalizedTitle:"愿景",charIndex:182},{level:3,title:"简单",slug:"简单",normalizedTitle:"简单",charIndex:60},{level:3,title:"开源",slug:"开源",normalizedTitle:"开源",charIndex:229}],headersStr:"为什么使用 愿景 简单 开源",content:"提示\n\n🎉🎉🎉 electron-egg v3 发布 ! 🎉🎉🎉\n\nelectron-egg框架，是一个入门简单、跨平台、企业级桌面软件开发框架\n\n\n# 为什么使用\n\n桌面软件（办公方向、 个人工具），仍然是未来十几年PC端需求之一，提高工作效率\n\nelectron技术 是流行趋势，百度翻译、阿里网盘、迅雷、有道云笔记、QQ聊天......\n\n\n# 愿景\n\n所有开发者都能学会桌面软件研发\n\n\n# 简单\n\n只需懂 JavaScript\n\n\n# 开源\n\nGitee https://gitee.com/dromara/electron-egg 3000+\n\nGithub https://github.com/dromara/electron-egg 800+",normalizedContent:"提示\n\n🎉🎉🎉 electron-egg v3 发布 ! 🎉🎉🎉\n\nelectron-egg框架，是一个入门简单、跨平台、企业级桌面软件开发框架\n\n\n# 为什么使用\n\n桌面软件（办公方向、 个人工具），仍然是未来十几年pc端需求之一，提高工作效率\n\nelectron技术 是流行趋势，百度翻译、阿里网盘、迅雷、有道云笔记、qq聊天......\n\n\n# 愿景\n\n所有开发者都能学会桌面软件研发\n\n\n# 简单\n\n只需懂 javascript\n\n\n# 开源\n\ngitee https://gitee.com/dromara/electron-egg 3000+\n\ngithub https://github.com/dromara/electron-egg 800+",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"EE框架是什么？",frontmatter:{title:"EE框架是什么？",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/ea6ac8/",article:!1},regularPath:"/02.v2/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/020.electron-egg%E6%98%AF%E4%BB%80%E4%B9%88.html",relativePath:"02.v2/010.快速入门/020.electron-egg是什么.md",key:"v-cd3a654c",path:"/pages/ea6ac8/",headers:[{level:3,title:"一句话介绍",slug:"一句话介绍",normalizedTitle:"一句话介绍",charIndex:2}],headersStr:"一句话介绍",content:"# 一句话介绍\n\nelectron-egg是一个业务框架；就好比 Spring之于java，thinkphp之于php，nuxt.js之于vue；electron只提供了基础的函数和api，但是你写项目的时候，业务和代码工程化是需要自己实现的，EE就提供了这个工程化能力。",normalizedContent:"# 一句话介绍\n\nelectron-egg是一个业务框架；就好比 spring之于java，thinkphp之于php，nuxt.js之于vue；electron只提供了基础的函数和api，但是你写项目的时候，业务和代码工程化是需要自己实现的，ee就提供了这个工程化能力。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"安装",frontmatter:{title:"安装",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/356bca/",article:!1},regularPath:"/02.v2/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/030.%E5%AE%89%E8%A3%85.html",relativePath:"02.v2/010.快速入门/030.安装.md",key:"v-46addefb",path:"/pages/356bca/",headers:[{level:3,title:"为什么使用？",slug:"为什么使用",normalizedTitle:"为什么使用？",charIndex:2},{level:3,title:"准备",slug:"准备",normalizedTitle:"准备",charIndex:13},{level:3,title:"下载",slug:"下载",normalizedTitle:"下载",charIndex:62},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:53},{level:3,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:787},{level:3,title:"window 7 系统",slug:"window-7-系统",normalizedTitle:"window 7 系统",charIndex:1553}],headersStr:"为什么使用？ 准备 下载 安装 常用命令 window 7 系统",content:"# 为什么使用？\n\n\n# 准备\n\n * 推荐 node.js >= 14.21.1\n * node.js 安装教程\n\n\n# 下载\n\n# gitee\ngit clone https://gitee.com/dromara/electron-egg.git\n\n# github\ngit clone https://github.com/dromara/electron-egg.git\n\n\n\n# 安装\n\n有问题先看文档**：**常见问题\n\n# 设置国内镜像源(加速)\nnpm config set registry=https://registry.npmmirror.com\nnpm config set disturl=https://registry.npmmirror.com/-/binary/node\n\n#如果下载electron慢，配置如下（或者挂个VPN）\nnpm config set electron_mirror=https://registry.npmmirror.com/-/binary/electron/\n\n# 进入目录 ./electron-egg/\nnpm install\n\n# 如果还是提示 electron 没安装，进入 node_modules/electron 目录下，再npm install\n\n# 构建sqlite\n# - 需要 python3 环境 （操作系统自带）\n# - 需要 node-gyp\nnpm i node-gyp -g\nnpm run re-sqlite\n\n# 如果sqlite报错 ...tools之类的\nnpm --vs2015 i -g --production windows-build-tools\n或者 \nnpm i -g --production windows-build-tools \n\n\n\n# 常用命令\n\n# 开发者模式\n\t# 1：【进入前端目录】，启动前端服务\n  cd electron-egg/frontend && npm install && npm run serve\n  # 2：【根目录】，启动后端服务\n  npm run dev\n\n# 开发模式（主进程）\nnpm run dev\n\n# 开发模式-热加载（主进程）\nnpm run reload\n\n# 预发布模式（环境变量为：prod）\nnpm run start\n\n# 打包 （windows版）\nnpm run build-w (32位)\nnpm run build-w-64 (64位)\nnpm run build-w-arm64 (arm64)\n\n# 打包 （windows 免安装版）\n# ee > v2.2.1\nnpm run build-wz (32位)\nnpm run build-wz-64 (64位)\nnpm run build-wz-arm64 (arm64)\n\n# 打包 （mac版）\nnpm run build-m\nnpm run build-m-arm64 (m1芯片架构)\n\n# 打包 （linux版）\n# ee > v2.2.1\nnpm run build-l (32位)\nnpm run build-l-64 (64位 deb包)\nnpm run build-l-arm64 (64位 deb包 arm64)\nnpm run build-l-armv7l (64位 deb包 armv7l)\nnpm run build-lr-64 (64位 rpm包)\nnpm run build-lp-64 (64位 pacman包)\n\n# 移动前端静态资源\nnpm run rd\n\n# 代码加密\nnpm run encrypt\n\n\n\n# window 7 系统\n\n微软已经停止对 win7系统支持。需要支持win7的，请使用以下开发环境\n\nelectron <= 12版本\nnode.js <= 12版本\nelectron-builder <= 22.10.5\n",normalizedContent:"# 为什么使用？\n\n\n# 准备\n\n * 推荐 node.js >= 14.21.1\n * node.js 安装教程\n\n\n# 下载\n\n# gitee\ngit clone https://gitee.com/dromara/electron-egg.git\n\n# github\ngit clone https://github.com/dromara/electron-egg.git\n\n\n\n# 安装\n\n有问题先看文档**：**常见问题\n\n# 设置国内镜像源(加速)\nnpm config set registry=https://registry.npmmirror.com\nnpm config set disturl=https://registry.npmmirror.com/-/binary/node\n\n#如果下载electron慢，配置如下（或者挂个vpn）\nnpm config set electron_mirror=https://registry.npmmirror.com/-/binary/electron/\n\n# 进入目录 ./electron-egg/\nnpm install\n\n# 如果还是提示 electron 没安装，进入 node_modules/electron 目录下，再npm install\n\n# 构建sqlite\n# - 需要 python3 环境 （操作系统自带）\n# - 需要 node-gyp\nnpm i node-gyp -g\nnpm run re-sqlite\n\n# 如果sqlite报错 ...tools之类的\nnpm --vs2015 i -g --production windows-build-tools\n或者 \nnpm i -g --production windows-build-tools \n\n\n\n# 常用命令\n\n# 开发者模式\n\t# 1：【进入前端目录】，启动前端服务\n  cd electron-egg/frontend && npm install && npm run serve\n  # 2：【根目录】，启动后端服务\n  npm run dev\n\n# 开发模式（主进程）\nnpm run dev\n\n# 开发模式-热加载（主进程）\nnpm run reload\n\n# 预发布模式（环境变量为：prod）\nnpm run start\n\n# 打包 （windows版）\nnpm run build-w (32位)\nnpm run build-w-64 (64位)\nnpm run build-w-arm64 (arm64)\n\n# 打包 （windows 免安装版）\n# ee > v2.2.1\nnpm run build-wz (32位)\nnpm run build-wz-64 (64位)\nnpm run build-wz-arm64 (arm64)\n\n# 打包 （mac版）\nnpm run build-m\nnpm run build-m-arm64 (m1芯片架构)\n\n# 打包 （linux版）\n# ee > v2.2.1\nnpm run build-l (32位)\nnpm run build-l-64 (64位 deb包)\nnpm run build-l-arm64 (64位 deb包 arm64)\nnpm run build-l-armv7l (64位 deb包 armv7l)\nnpm run build-lr-64 (64位 rpm包)\nnpm run build-lp-64 (64位 pacman包)\n\n# 移动前端静态资源\nnpm run rd\n\n# 代码加密\nnpm run encrypt\n\n\n\n# window 7 系统\n\n微软已经停止对 win7系统支持。需要支持win7的，请使用以下开发环境\n\nelectron <= 12版本\nnode.js <= 12版本\nelectron-builder <= 22.10.5\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"快速开始",frontmatter:{title:"快速开始",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/da8349/",article:!1},regularPath:"/02.v2/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/040.%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html",relativePath:"02.v2/010.快速入门/040.快速开始.md",key:"v-290d4594",path:"/pages/da8349/",headers:[{level:3,title:"框架架构",slug:"框架架构",normalizedTitle:"框架架构",charIndex:2},{level:3,title:"进程",slug:"进程",normalizedTitle:"进程",charIndex:11},{level:3,title:"通信",slug:"通信",normalizedTitle:"通信",charIndex:59},{level:3,title:"本地存储",slug:"本地存储",normalizedTitle:"本地存储",charIndex:149},{level:3,title:"核心包ee-core",slug:"核心包ee-core",normalizedTitle:"核心包ee-core",charIndex:183},{level:3,title:"开发者模式",slug:"开发者模式",normalizedTitle:"开发者模式",charIndex:216},{level:3,title:"软件界面",slug:"软件界面",normalizedTitle:"软件界面",charIndex:48},{level:3,title:"业务逻辑",slug:"业务逻辑",normalizedTitle:"业务逻辑",charIndex:33},{level:3,title:"demo",slug:"demo",normalizedTitle:"demo",charIndex:536}],headersStr:"框架架构 进程 通信 本地存储 核心包ee-core 开发者模式 软件界面 业务逻辑 demo",content:"# 框架架构\n\n\n# 进程\n\n框架有两种进程\n\n * ee主进程：业务逻辑\n * ee渲染进程：软件界面UI\n\n\n# 通信\n\n * ipc：前端 ⇋ 业务层 （双向通信）\n * http： 前端、命令行、浏览器 ⇋ 业务层 （单向通信）\n * socket：前端 ⇋ 业务层 （双向通信）\n\n\n# 本地存储\n\n * json数据库\n * sqlite数据库\n\n\n# 核心包ee-core\n\n框架的实现及api，都由它提供。\n\n\n# 开发者模式\n\n\n# 软件界面\n\n进入“frontend”目录，开发软件界面；支持任意前端技术，如果vue、react、angular、html等\n\n# 进入【前端目录】\ncd frontend \n\n# 安装依赖\nnpm install\n\n# 启动服务\nnpm run serve\n\n\n注：如果启动的前端服务不是：http://localhost:8080/ 请先配置：config 文件中的“开发模式”\n\n\n# 业务逻辑\n\n“electron”目录，业务开发；常规业务逻辑、调用操作系统api、访问远程服务器等 在项目【根目录】启动服务\n\n# 启动后端服务\nnpm run dev\n\n# 热重载模式\nnpm run reload\n\n\n\n# demo\n\n下载的项目中，带有各种功能示例demo，初学者请先简单学习一下，方便快速入门。",normalizedContent:"# 框架架构\n\n\n# 进程\n\n框架有两种进程\n\n * ee主进程：业务逻辑\n * ee渲染进程：软件界面ui\n\n\n# 通信\n\n * ipc：前端 ⇋ 业务层 （双向通信）\n * http： 前端、命令行、浏览器 ⇋ 业务层 （单向通信）\n * socket：前端 ⇋ 业务层 （双向通信）\n\n\n# 本地存储\n\n * json数据库\n * sqlite数据库\n\n\n# 核心包ee-core\n\n框架的实现及api，都由它提供。\n\n\n# 开发者模式\n\n\n# 软件界面\n\n进入“frontend”目录，开发软件界面；支持任意前端技术，如果vue、react、angular、html等\n\n# 进入【前端目录】\ncd frontend \n\n# 安装依赖\nnpm install\n\n# 启动服务\nnpm run serve\n\n\n注：如果启动的前端服务不是：http://localhost:8080/ 请先配置：config 文件中的“开发模式”\n\n\n# 业务逻辑\n\n“electron”目录，业务开发；常规业务逻辑、调用操作系统api、访问远程服务器等 在项目【根目录】启动服务\n\n# 启动后端服务\nnpm run dev\n\n# 热重载模式\nnpm run reload\n\n\n\n# demo\n\n下载的项目中，带有各种功能示例demo，初学者请先简单学习一下，方便快速入门。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"配置",frontmatter:{title:"配置",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/201d62/",article:!1},regularPath:"/02.v2/010.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/050.%E9%85%8D%E7%BD%AE.html",relativePath:"02.v2/010.快速入门/050.配置.md",key:"v-542ed480",path:"/pages/201d62/",headers:[{level:3,title:"基础 config 文件",slug:"基础-config-文件",normalizedTitle:"基础 config 文件",charIndex:2},{level:3,title:"参数：appInfo 对象",slug:"参数-appinfo-对象",normalizedTitle:"参数：appinfo 对象",charIndex:241},{level:3,title:"属性说明",slug:"属性说明",normalizedTitle:"属性说明",charIndex:568},{level:3,title:"开发模式配置",slug:"开发模式配置",normalizedTitle:"开发模式配置",charIndex:577},{level:3,title:"开发者工具",slug:"开发者工具",normalizedTitle:"开发者工具",charIndex:934},{level:3,title:"应用程序顶部菜单",slug:"应用程序顶部菜单",normalizedTitle:"应用程序顶部菜单",charIndex:975},{level:3,title:"主窗口",slug:"主窗口",normalizedTitle:"主窗口",charIndex:1080},{level:3,title:"业务日志",slug:"业务日志",normalizedTitle:"业务日志",charIndex:1686},{level:3,title:"远程web地址 (可选)",slug:"远程web地址-可选",normalizedTitle:"远程web地址 (可选)",charIndex:1838},{level:3,title:"内置socket服务",slug:"内置socket服务",normalizedTitle:"内置socket服务",charIndex:1951},{level:3,title:"内置http服务",slug:"内置http服务",normalizedTitle:"内置http服务",charIndex:2458},{level:3,title:"主进程",slug:"主进程",normalizedTitle:"主进程",charIndex:2952},{level:3,title:"应用自动升级",slug:"应用自动升级",normalizedTitle:"应用自动升级",charIndex:3297},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:3,title:"插件功能",slug:"插件功能",normalizedTitle:"插件功能",charIndex:3344},{level:3,title:"加密配置",slug:"加密配置",normalizedTitle:"加密配置",charIndex:4598}],headersStr:"基础 config 文件 参数：appInfo 对象 属性说明 开发模式配置 开发者工具 应用程序顶部菜单 主窗口 业务日志 远程web地址 (可选) 内置socket服务 内置http服务 主进程 应用自动升级  插件功能 加密配置",content:"# 基础 config 文件\n\n# 位置\n./electron/config/\n\n# 说明\nconfig.default.js // 默认配置文件，开发环境和生产环境都会加载\nconfig.local.js // 开发环境配置文件，追加和覆盖default配置文件\nconfig.prod.js // 生产环境配置文件，追加和覆盖default配置文件\nencrypt.js     // 代码加密的配置\nnodemon.json   // 开发环境，代码（监控）热加载\n\n\n\n# 参数：appInfo 对象\n\n * name 应用名称\n * baseDir 框架中electron目录路径，如果使用加密功能，打包后路径为 ./public/electron\n * env 环境变量，local-本地，prod-生产环境\n * home APP根目录路径\n * root APP在操作系统中的数据目录，根据环境变量而变化\n * appUserDataDir APP在操作系统中的数据目录，与环境变量无关\n * userHome 操作系统用户的home目录\n * appVersion APP版本号\n * isPackaged APP是否已经打包\n * execDir APP安装后，可执行程序（exe、dmg、dep）的根目录\n\n\n# 属性说明\n\n\n# 开发模式配置\n\nconfig.developmentMode = {\n    default: 'vue',\n    mode: {\n      vue: {\n      \tprotocol: 'http://', // 自定义协议头\n        hostname: 'localhost',\n        port: 8080\n      },\n      react: {\n        hostname: 'localhost',\n        port: 3000\n      },\n      html: {\n        hostname: 'localhost',\n        indexPage: 'index.html' // 首页\n      },\n    }\n};\n\n\n\n# 开发者工具\n\nconfig.openDevTools = false;\n\n\n\n# 应用程序顶部菜单\n\n* boolean | string\n* true, false, 'dev-show'(dev环境显示，prod环境隐藏)\nconfig.openAppMenu = true;\n\n\n\n# 主窗口\n\n// 更多属性，见文档：https://www.electronjs.org/zh/docs/latest/api/browser-window#new-browserwindowoptions\nconfig.windowsOption = {\n\ttitle: 'EE框架', // 软件顶部或左上角名称\n  width: 980, // 软件窗口宽度\n  height: 650, // 软件窗口高度\n  minWidth: 800, // 软件窗口最小宽度\n  minHeight: 650, // 软件窗口最小高度\n  webPreferences: {\n    //webSecurity: false, // 如果需要跨域，请打开\n    contextIsolation: false, // 设置此项为false后，才可在渲染进程中使用electron api\n    nodeIntegration: true, // node模块\n \t\t//preload: path.join(appInfo.baseDir, 'preload', 'bridge.js'),\n  },\n  frame: true,\n  show: true, \n\ticon: path.join(appInfo.home, 'public', 'images', 'logo-32.png'),\n};\n\n\n\n# 业务日志\n\nconfig.logger = {\n  appLogName: `ee-${dayjs().format('YYYY-MM-DD')}.log`, \n  errorLogName: `ee-error-${dayjs().format('YYYY-MM-DD')}.log` \n}\n\n\n\n# 远程web地址 (可选)\n\nconfig.remoteUrl = {\n  enable: false, // 是否启用\n  url: 'https://discuz.chat/' // Any web url\n};\n\n\n\n# 内置socket服务\n\n# 第三方软件，可通过socket-client监听端口，与ee框架通信\nconfig.socketServer = {\n  enable: false, // 是否启用\n  port: 7070, // 默认端口\n  isDynamic: false, // 如果值为false，框架默认使用port端口（如果默认端口被使用，则随机获取一个）；如果为true，默认端口无效，框架随机生成\n  path: \"/socket.io/\", // 默认路径名称\n  connectTimeout: 45000, // 客户端连接超时时间\n  pingTimeout: 30000, // 心跳检测超时时间\n  pingInterval: 25000, // 心跳检测间隔\n  maxHttpBufferSize: 1e8, // 每条消息的数据最大值 1M\n  transports: [\"polling\", \"websocket\"], // http轮询和websocket\n  cors: {\n    origin: true, // http协议时，要设置允许跨域\n  }\n};\n\n\n\n# 内置http服务\n\n# 可在前端、浏览器、终端命令中，访问EE程序  \nconfig.httpServer = {\n  enable: false, // 是否启用\n  https: {\n    enable: false, \n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },\n  port: 7071, // 默认端口（如果端口被使用，则随机获取一个）\n  cors: {\n    origin: \"*\" // 跨域\n  },\n  body: {\n    multipart: true,\n    formidable: {\n      keepExtensions: true\n    }\n  },\n  filterRequest: {\n    uris:  [\n      'favicon.ico' // 要过滤的请求uri\n    ],\n    returnData: '' // 任意数据类型\n  }\n};\n\n\n\n# 主进程\n\nconfig.mainServer = {\n  protocol: 'http://', // 或 https://\n  host: '127.0.0.1',\n  port: 7072, // 默认端口（如果端口被使用，则随机获取一个）\n\tssl: {\n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },\n  options: {} // https://www.electronjs.org/zh/docs/latest/api/browser-window#winloadurlurl-options\n}; \n\n\n\n# 应用自动升级\n\n> electron-egg < v2.3.0\n\n// 新版本的该功能已经移到插件功能里面\nconfig.autoUpdate = {\n  windows: false, // windows平台\n  macOS: false, // macOs 需要签名验证\n  linux: false, // linux平台\n  options: {\n    provider: 'generic', // or github, s3, bintray\n    url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n  },\n  force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n};\n\n\n\n#\n\n\n# 插件功能\n\n/**\n * 插件功能\n * @param window 官方内置插件\n * @param tray 托盘插件\n * @param security 安全插件\n * @param awaken 唤醒插件\n * @param autoUpdater 自动升级插件\n * @param javaServer java项目插件\n * @param example demo插件\n */\nconfig.addons = {\n  window: {\n    enable: true,\n  },\n  tray: {\n    enable: true,\n    title: 'EE程序',\n    icon: '/public/images/tray_logo.png'\n  },\n  security: {\n    enable: true,\n  },\n  awaken: {\n    enable: true,\n    protocol: 'ee',\n    args: []\n  },\n  autoUpdater: {\n    enable: true,\n    windows: false, \n    macOS: false, \n    linux: false,\n    options: {\n      provider: 'generic', \n      url: 'http://kodo.qiniu.com/'\n    },\n    force: false,\n  },\n  javaServer: {\n    enable: false,\n    port: 18080,\n    jreVersion: 'jre1.8.0_201',\n    opt: '-server -Xms512M -Xmx512M -Xss512k -Dspring.profiles.active=prod -Dserver.port=${port} -Dlogging.file.path=\"${path}\" ',\n    name: 'java-app.jar'\n  },\n  example: {\n    enable: true,\n  },\n};\n\n\n文档：插件模块\n\n\n# 加密配置\n\n./config/encrypt.js\n\n\n详情见：代码加密",normalizedContent:"# 基础 config 文件\n\n# 位置\n./electron/config/\n\n# 说明\nconfig.default.js // 默认配置文件，开发环境和生产环境都会加载\nconfig.local.js // 开发环境配置文件，追加和覆盖default配置文件\nconfig.prod.js // 生产环境配置文件，追加和覆盖default配置文件\nencrypt.js     // 代码加密的配置\nnodemon.json   // 开发环境，代码（监控）热加载\n\n\n\n# 参数：appinfo 对象\n\n * name 应用名称\n * basedir 框架中electron目录路径，如果使用加密功能，打包后路径为 ./public/electron\n * env 环境变量，local-本地，prod-生产环境\n * home app根目录路径\n * root app在操作系统中的数据目录，根据环境变量而变化\n * appuserdatadir app在操作系统中的数据目录，与环境变量无关\n * userhome 操作系统用户的home目录\n * appversion app版本号\n * ispackaged app是否已经打包\n * execdir app安装后，可执行程序（exe、dmg、dep）的根目录\n\n\n# 属性说明\n\n\n# 开发模式配置\n\nconfig.developmentmode = {\n    default: 'vue',\n    mode: {\n      vue: {\n      \tprotocol: 'http://', // 自定义协议头\n        hostname: 'localhost',\n        port: 8080\n      },\n      react: {\n        hostname: 'localhost',\n        port: 3000\n      },\n      html: {\n        hostname: 'localhost',\n        indexpage: 'index.html' // 首页\n      },\n    }\n};\n\n\n\n# 开发者工具\n\nconfig.opendevtools = false;\n\n\n\n# 应用程序顶部菜单\n\n* boolean | string\n* true, false, 'dev-show'(dev环境显示，prod环境隐藏)\nconfig.openappmenu = true;\n\n\n\n# 主窗口\n\n// 更多属性，见文档：https://www.electronjs.org/zh/docs/latest/api/browser-window#new-browserwindowoptions\nconfig.windowsoption = {\n\ttitle: 'ee框架', // 软件顶部或左上角名称\n  width: 980, // 软件窗口宽度\n  height: 650, // 软件窗口高度\n  minwidth: 800, // 软件窗口最小宽度\n  minheight: 650, // 软件窗口最小高度\n  webpreferences: {\n    //websecurity: false, // 如果需要跨域，请打开\n    contextisolation: false, // 设置此项为false后，才可在渲染进程中使用electron api\n    nodeintegration: true, // node模块\n \t\t//preload: path.join(appinfo.basedir, 'preload', 'bridge.js'),\n  },\n  frame: true,\n  show: true, \n\ticon: path.join(appinfo.home, 'public', 'images', 'logo-32.png'),\n};\n\n\n\n# 业务日志\n\nconfig.logger = {\n  applogname: `ee-${dayjs().format('yyyy-mm-dd')}.log`, \n  errorlogname: `ee-error-${dayjs().format('yyyy-mm-dd')}.log` \n}\n\n\n\n# 远程web地址 (可选)\n\nconfig.remoteurl = {\n  enable: false, // 是否启用\n  url: 'https://discuz.chat/' // any web url\n};\n\n\n\n# 内置socket服务\n\n# 第三方软件，可通过socket-client监听端口，与ee框架通信\nconfig.socketserver = {\n  enable: false, // 是否启用\n  port: 7070, // 默认端口\n  isdynamic: false, // 如果值为false，框架默认使用port端口（如果默认端口被使用，则随机获取一个）；如果为true，默认端口无效，框架随机生成\n  path: \"/socket.io/\", // 默认路径名称\n  connecttimeout: 45000, // 客户端连接超时时间\n  pingtimeout: 30000, // 心跳检测超时时间\n  pinginterval: 25000, // 心跳检测间隔\n  maxhttpbuffersize: 1e8, // 每条消息的数据最大值 1m\n  transports: [\"polling\", \"websocket\"], // http轮询和websocket\n  cors: {\n    origin: true, // http协议时，要设置允许跨域\n  }\n};\n\n\n\n# 内置http服务\n\n# 可在前端、浏览器、终端命令中，访问ee程序  \nconfig.httpserver = {\n  enable: false, // 是否启用\n  https: {\n    enable: false, \n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },\n  port: 7071, // 默认端口（如果端口被使用，则随机获取一个）\n  cors: {\n    origin: \"*\" // 跨域\n  },\n  body: {\n    multipart: true,\n    formidable: {\n      keepextensions: true\n    }\n  },\n  filterrequest: {\n    uris:  [\n      'favicon.ico' // 要过滤的请求uri\n    ],\n    returndata: '' // 任意数据类型\n  }\n};\n\n\n\n# 主进程\n\nconfig.mainserver = {\n  protocol: 'http://', // 或 https://\n  host: '127.0.0.1',\n  port: 7072, // 默认端口（如果端口被使用，则随机获取一个）\n\tssl: {\n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },\n  options: {} // https://www.electronjs.org/zh/docs/latest/api/browser-window#winloadurlurl-options\n}; \n\n\n\n# 应用自动升级\n\n> electron-egg < v2.3.0\n\n// 新版本的该功能已经移到插件功能里面\nconfig.autoupdate = {\n  windows: false, // windows平台\n  macos: false, // macos 需要签名验证\n  linux: false, // linux平台\n  options: {\n    provider: 'generic', // or github, s3, bintray\n    url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n  },\n  force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n};\n\n\n\n#\n\n\n# 插件功能\n\n/**\n * 插件功能\n * @param window 官方内置插件\n * @param tray 托盘插件\n * @param security 安全插件\n * @param awaken 唤醒插件\n * @param autoupdater 自动升级插件\n * @param javaserver java项目插件\n * @param example demo插件\n */\nconfig.addons = {\n  window: {\n    enable: true,\n  },\n  tray: {\n    enable: true,\n    title: 'ee程序',\n    icon: '/public/images/tray_logo.png'\n  },\n  security: {\n    enable: true,\n  },\n  awaken: {\n    enable: true,\n    protocol: 'ee',\n    args: []\n  },\n  autoupdater: {\n    enable: true,\n    windows: false, \n    macos: false, \n    linux: false,\n    options: {\n      provider: 'generic', \n      url: 'http://kodo.qiniu.com/'\n    },\n    force: false,\n  },\n  javaserver: {\n    enable: false,\n    port: 18080,\n    jreversion: 'jre1.8.0_201',\n    opt: '-server -xms512m -xmx512m -xss512k -dspring.profiles.active=prod -dserver.port=${port} -dlogging.file.path=\"${path}\" ',\n    name: 'java-app.jar'\n  },\n  example: {\n    enable: true,\n  },\n};\n\n\n文档：插件模块\n\n\n# 加密配置\n\n./config/encrypt.js\n\n\n详情见：代码加密",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"目录结构",frontmatter:{title:"目录结构",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/ae32b8/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/010.%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.html",relativePath:"02.v2/020.基础功能/010.目录结构.md",key:"v-3d1d1f36",path:"/pages/ae32b8/",headersStr:null,content:"project\n├── package.json npm包配置\n├── bulid 打包用的资源和脚本\n    ├── icons 软件图标（打包用到）\n    ├── extraResources 额外资源目录\n├── electron 主进程服务\n    ├── addon 插件目录\n        ├── example demo插件（代码示例）\n    ├── config 配置文件\n        ├── config.default.js 默认配置，都会加载\n        ├── config.local.js dev环境加载\n        ├── config.prod.js 生产环境加载\n        ├── encrypt.js 加密配置文件\n    ├── controller 控制器\n    ├── service 业务层\n    ├── preload 预加载，在程序启动时加载，如托盘、自动升级等功能要提前加载代码\n    ├── library 一些封装库\n├── frontend 前端目录（demo是用vue编写的）    \n├── out 打包后生成的可执行文件\n    ├── latest.yml 自动升级文件\n    ├── xxx.exe window应用安装包\n    ├── xxx.exe.blockmap window应用增量升级包（未测试过）\n    ├── xxx.dmg mac应用安装包\n    ├── xxx.deb linux应用安装包后缀有多种    \n├── run 一些运行缓存\n├── logs 日志 \n├── main.js 入口文件 \n├── public 资源目录\n    ├── dist 前端资源会移动到这里，生产环境加载\n    ├── electron 业务js加密后的文件\n    ├── html 一些模板\n    ├── images 一些图片\n├── data 内置数据库文件\n    ├── system.json 框架使用的数据库\n    ├── demo.json 示例json数据库\n    ├── sqlite-demo.db 示例sqlite数据库\n",normalizedContent:"project\n├── package.json npm包配置\n├── bulid 打包用的资源和脚本\n    ├── icons 软件图标（打包用到）\n    ├── extraresources 额外资源目录\n├── electron 主进程服务\n    ├── addon 插件目录\n        ├── example demo插件（代码示例）\n    ├── config 配置文件\n        ├── config.default.js 默认配置，都会加载\n        ├── config.local.js dev环境加载\n        ├── config.prod.js 生产环境加载\n        ├── encrypt.js 加密配置文件\n    ├── controller 控制器\n    ├── service 业务层\n    ├── preload 预加载，在程序启动时加载，如托盘、自动升级等功能要提前加载代码\n    ├── library 一些封装库\n├── frontend 前端目录（demo是用vue编写的）    \n├── out 打包后生成的可执行文件\n    ├── latest.yml 自动升级文件\n    ├── xxx.exe window应用安装包\n    ├── xxx.exe.blockmap window应用增量升级包（未测试过）\n    ├── xxx.dmg mac应用安装包\n    ├── xxx.deb linux应用安装包后缀有多种    \n├── run 一些运行缓存\n├── logs 日志 \n├── main.js 入口文件 \n├── public 资源目录\n    ├── dist 前端资源会移动到这里，生产环境加载\n    ├── electron 业务js加密后的文件\n    ├── html 一些模板\n    ├── images 一些图片\n├── data 内置数据库文件\n    ├── system.json 框架使用的数据库\n    ├── demo.json 示例json数据库\n    ├── sqlite-demo.db 示例sqlite数据库\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"入口及生命周期",frontmatter:{title:"入口及生命周期",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/6b9c7a/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/012.%E5%85%A5%E5%8F%A3%E5%8F%8A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",relativePath:"02.v2/020.基础功能/012.入口及生命周期.md",key:"v-8751844c",path:"/pages/6b9c7a/",headers:[{level:3,title:"main.js",slug:"main-js",normalizedTitle:"main.js",charIndex:2}],headersStr:"main.js",content:"# main.js\n\n说明：项目入口文件及生命周期\n\n# 引入框架 Application\nconst Application = require('ee-core').Application;\n\n# main类\nclass Main extends Application {\n\n  constructor() {\n    super();\n    // this对象等于ee框架的全局app对象\n  }\n\n  /**\n   * core app have been loaded\n   * 框架核心功能加载完成\n   */\n  async ready () {\n    // do some things\n  }\n\n  /**\n   * electron app ready\n   * Electron完成初始化，主窗口创建之前\n   */\n  async electronAppReady () {\n    // do some things\n  }\n\n  /**\n   * main window have been loaded\n   * 主窗口创建完成\n   */\n  async windowReady () {\n    // do some things\n\n  }\n\n  /**\n   * before app close\n   * app退出之前\n   */  \n  async beforeClose () {\n    // do some things\n\n  }\n}\n\n",normalizedContent:"# main.js\n\n说明：项目入口文件及生命周期\n\n# 引入框架 application\nconst application = require('ee-core').application;\n\n# main类\nclass main extends application {\n\n  constructor() {\n    super();\n    // this对象等于ee框架的全局app对象\n  }\n\n  /**\n   * core app have been loaded\n   * 框架核心功能加载完成\n   */\n  async ready () {\n    // do some things\n  }\n\n  /**\n   * electron app ready\n   * electron完成初始化，主窗口创建之前\n   */\n  async electronappready () {\n    // do some things\n  }\n\n  /**\n   * main window have been loaded\n   * 主窗口创建完成\n   */\n  async windowready () {\n    // do some things\n\n  }\n\n  /**\n   * before app close\n   * app退出之前\n   */  \n  async beforeclose () {\n    // do some things\n\n  }\n}\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"前端模块",frontmatter:{title:"前端模块",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/3d5da0/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/014.%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97.html",relativePath:"02.v2/020.基础功能/014.前端模块.md",key:"v-5f961103",path:"/pages/3d5da0/",headers:[{level:3,title:"代码目录",slug:"代码目录",normalizedTitle:"代码目录",charIndex:2},{level:3,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:24},{level:3,title:"简单配置",slug:"简单配置",normalizedTitle:"简单配置",charIndex:108},{level:3,title:"只需一个文件：ipcRenderer.js",slug:"只需一个文件-ipcrenderer-js",normalizedTitle:"只需一个文件：ipcrenderer.js",charIndex:566},{level:3,title:"启动",slug:"启动",normalizedTitle:"启动",charIndex:257}],headersStr:"代码目录 说明 简单配置 只需一个文件：ipcRenderer.js 启动",content:"# 代码目录\n\n./frontend\n\n\n\n# 说明\n\n * 可以使用任意前端技术\n * 项目中前端模块只是demo，你可以随意修改或删除\n * vue2、vue3、react、Angular、html等等\n\n\n# 简单配置\n\n打开配置文件：./electron/config.default.js，可修改如下配置：\n  developmentMode: {\n    default: 'vue', // 默认前后端分离，使用vue\n    mode: {\n    \t// 前后端分离，使用vue开发，端口与vue启动的serve一致\n      vue: {\n        hostname: 'localhost',\n        port: 8080\n      },\n      // 前后端分离，使用react开发，端口与react启动的serve一致\n      react: {\n        hostname: 'localhost',\n        port: 3000\n      },\n      html: {\n        hostname: 'localhost',\n        indexPage: 'index.html' // 首页\n      },\n    }\n  },\n\n\n\n# 只需一个文件：ipcRenderer.js\n\n# 你的前端项目需要引入该文件，才能和electron业务层通信\n\n\n\n# 启动\n\n * vue模式【默认】\n\n# 1：【进入前端目录】，启动vue\ncd ./frontend\nnpm run serve\n\n# 2：【根目录】，启动electron服务\nnpm run dev\n\n\n * react模式，同vue\n\n * html模式（不推荐，使用vue和react吧，跟上时代的步伐）\n\n# 1：进入前端目录，并创建dist目录\ncd ./frontend && mkdir dist\n\n# 2: 编写html文件\nindex.html\n\n# 3：【根目录】，启动electron服务\nnpm run dev\n",normalizedContent:"# 代码目录\n\n./frontend\n\n\n\n# 说明\n\n * 可以使用任意前端技术\n * 项目中前端模块只是demo，你可以随意修改或删除\n * vue2、vue3、react、angular、html等等\n\n\n# 简单配置\n\n打开配置文件：./electron/config.default.js，可修改如下配置：\n  developmentmode: {\n    default: 'vue', // 默认前后端分离，使用vue\n    mode: {\n    \t// 前后端分离，使用vue开发，端口与vue启动的serve一致\n      vue: {\n        hostname: 'localhost',\n        port: 8080\n      },\n      // 前后端分离，使用react开发，端口与react启动的serve一致\n      react: {\n        hostname: 'localhost',\n        port: 3000\n      },\n      html: {\n        hostname: 'localhost',\n        indexpage: 'index.html' // 首页\n      },\n    }\n  },\n\n\n\n# 只需一个文件：ipcrenderer.js\n\n# 你的前端项目需要引入该文件，才能和electron业务层通信\n\n\n\n# 启动\n\n * vue模式【默认】\n\n# 1：【进入前端目录】，启动vue\ncd ./frontend\nnpm run serve\n\n# 2：【根目录】，启动electron服务\nnpm run dev\n\n\n * react模式，同vue\n\n * html模式（不推荐，使用vue和react吧，跟上时代的步伐）\n\n# 1：进入前端目录，并创建dist目录\ncd ./frontend && mkdir dist\n\n# 2: 编写html文件\nindex.html\n\n# 3：【根目录】，启动electron服务\nnpm run dev\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"控制器",frontmatter:{title:"控制器",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/c50bb1/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/016.%E6%8E%A7%E5%88%B6%E5%99%A8.html",relativePath:"02.v2/020.基础功能/016.控制器.md",key:"v-46b5a036",path:"/pages/c50bb1/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:47}],headersStr:"介绍 示例",content:"# 介绍\n\n和大多数框架一样，接收前端请求，组织参数及调用Service来处理业务。\n\n\n# 示例\n\nconst Controller = require('ee-core').Controller;\n\n/**\n * 示例控制器\n * @class\n */\nclass ExampleController extends Controller {\n\n  constructor(ctx) {\n    super(ctx);\n  }\n\n  /**\n   * 所有方法接收两个参数\n   * @param args 前端传的参数\n   * @param event - IpcMainEvent 文档：https://www.electronjs.org/docs/latest/api/structures/ipc-main-event\n   */\n\n  /**\n   * test\n   */\n  async test (args, event) {\n  \n  \t// 前端参数\n    const params = args;\n    \n  \t// 调用service\n    const result = await this.service.example.test('ee');\n    \n    // 主动向前端发请求\n    // channel 前端ipc.on()，监听的路由\n    const channel = \"controller.example.something\"\n\t\tevent.reply(channel, {age:21})\n\n\t\t// 返回数据\n    const data = {}\n    return data;\n  }\n}  \n",normalizedContent:"# 介绍\n\n和大多数框架一样，接收前端请求，组织参数及调用service来处理业务。\n\n\n# 示例\n\nconst controller = require('ee-core').controller;\n\n/**\n * 示例控制器\n * @class\n */\nclass examplecontroller extends controller {\n\n  constructor(ctx) {\n    super(ctx);\n  }\n\n  /**\n   * 所有方法接收两个参数\n   * @param args 前端传的参数\n   * @param event - ipcmainevent 文档：https://www.electronjs.org/docs/latest/api/structures/ipc-main-event\n   */\n\n  /**\n   * test\n   */\n  async test (args, event) {\n  \n  \t// 前端参数\n    const params = args;\n    \n  \t// 调用service\n    const result = await this.service.example.test('ee');\n    \n    // 主动向前端发请求\n    // channel 前端ipc.on()，监听的路由\n    const channel = \"controller.example.something\"\n\t\tevent.reply(channel, {age:21})\n\n\t\t// 返回数据\n    const data = {}\n    return data;\n  }\n}  \n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"服务层",frontmatter:{title:"服务层",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/465a58/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/018.%E6%9C%8D%E5%8A%A1%E5%B1%82.html",relativePath:"02.v2/020.基础功能/018.服务层.md",key:"v-77fe27fa",path:"/pages/465a58/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:16}],headersStr:"介绍 示例",content:"# 介绍\n\n业务逻辑层\n\n\n# 示例\n\nconst Service = require('ee-core').Service;\n\n/**\n * 示例服务\n * @class\n */\nclass ExampleService extends Service {\n\n  constructor(ctx) {\n    super(ctx);\n  }\n\n  /**\n   * test\n   */\n  async test (args) {\n    let obj = {\n      status:'ok',\n      params: args\n    }\n\n    return obj;\n  }\n}\n\nmodule.exports = ExampleService;\n",normalizedContent:"# 介绍\n\n业务逻辑层\n\n\n# 示例\n\nconst service = require('ee-core').service;\n\n/**\n * 示例服务\n * @class\n */\nclass exampleservice extends service {\n\n  constructor(ctx) {\n    super(ctx);\n  }\n\n  /**\n   * test\n   */\n  async test (args) {\n    let obj = {\n      status:'ok',\n      params: args\n    }\n\n    return obj;\n  }\n}\n\nmodule.exports = exampleservice;\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"预加载层",frontmatter:{title:"预加载层",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/4d182f/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/020.%E9%A2%84%E5%8A%A0%E8%BD%BD%E5%B1%82.html",relativePath:"02.v2/020.基础功能/020.预加载层.md",key:"v-7581b9fe",path:"/pages/4d182f/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:58}],headersStr:"介绍 示例",content:"# 介绍\n\n桌面应用的一些功能，需要在软件启动时就已经被加载；而控制器层代码，是前端发送请求时，才会执行。\n\n\n# 示例\n\n/*************************************************\n ** preload为预加载模块，该文件将会在程序启动时加载 **\n *************************************************/\n\n/**\n * 预加载模块入口\n * @param {Object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n  //已实现的功能模块，可选择性使用和修改\n  const trayAddon = app.addon.tray;\n  const securityAddon = app.addon.security;\n  const awakenAddon = app.addon.awaken;\n  const autoUpdaterAddon = app.addon.autoUpdater;\n  \n  trayAddon.create();\n  securityAddon.create();\n  awakenAddon.create();\n  autoUpdaterAddon.create();\n}\n\n",normalizedContent:"# 介绍\n\n桌面应用的一些功能，需要在软件启动时就已经被加载；而控制器层代码，是前端发送请求时，才会执行。\n\n\n# 示例\n\n/*************************************************\n ** preload为预加载模块，该文件将会在程序启动时加载 **\n *************************************************/\n\n/**\n * 预加载模块入口\n * @param {object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n  //已实现的功能模块，可选择性使用和修改\n  const trayaddon = app.addon.tray;\n  const securityaddon = app.addon.security;\n  const awakenaddon = app.addon.awaken;\n  const autoupdateraddon = app.addon.autoupdater;\n  \n  trayaddon.create();\n  securityaddon.create();\n  awakenaddon.create();\n  autoupdateraddon.create();\n}\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"插件说明",frontmatter:{title:"插件说明",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/b69355/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/010.%E6%8F%92%E4%BB%B6%E8%AF%B4%E6%98%8E.html",relativePath:"02.v2/020.基础功能/030.插件/010.插件说明.md",key:"v-a89e22a8",path:"/pages/b69355/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:69},{level:3,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:114},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:226}],headersStr:"介绍 目录 示例",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 介绍\n\n将通用业务做成插件，并挂载到 app.addon 对象上，扩展框架能力。\n\n\n# 目录\n\n./electron/addon\n\n\naddon目录下，一个插件一个目录。 如：example/index.js 其中 example 为 插件名，index.js 为 插件入口文件（框架加载这个入口文件）\n\n\n# 示例\n\n 1. 编写插件代码\n\n# example/index.js\n\n/**\n * example插件\n * @class\n */\nclass ExampleAddon {\n\n  # 自动注入 app 对象\n  constructor(app) {\n    this.app = app;\n  }\n\n  /**\n   * hello\n   *\n   * @function \n   * @since 1.0.0\n   */\n  hello () {\n    return 'hello';\n  }  \n}\n\nExampleAddon.toString = () => '[class ExampleAddon]';\nmodule.exports = ExampleAddon;\n\n\n 2. 添加配置\n\n# 打开配置文件 ./electron/config/config.default.js\n\n  /**\n   * 插件功能\n   * window 官方内置插件\n   * example demo插件\n   */\n  config.addons = {\n    window: {\n      enable: true,\n    },\n  \t// 插件名为key，enable 配置启用\n    example: {\n      enable: true, \n    }\n  };\n\n\n 3. 调用插件\n\n# ./electron/controller/example.js\n\nasync test () {\n\t# 获取插件对象，已经被实例化，且为单例\n  const exampleAddon = this.app.addon.example;\n  # 调用 hello 方法\n  const str = exampleAddon.hello();\n  console.log('str:', str);\n\n  return;\n}\n",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 介绍\n\n将通用业务做成插件，并挂载到 app.addon 对象上，扩展框架能力。\n\n\n# 目录\n\n./electron/addon\n\n\naddon目录下，一个插件一个目录。 如：example/index.js 其中 example 为 插件名，index.js 为 插件入口文件（框架加载这个入口文件）\n\n\n# 示例\n\n 1. 编写插件代码\n\n# example/index.js\n\n/**\n * example插件\n * @class\n */\nclass exampleaddon {\n\n  # 自动注入 app 对象\n  constructor(app) {\n    this.app = app;\n  }\n\n  /**\n   * hello\n   *\n   * @function \n   * @since 1.0.0\n   */\n  hello () {\n    return 'hello';\n  }  \n}\n\nexampleaddon.tostring = () => '[class exampleaddon]';\nmodule.exports = exampleaddon;\n\n\n 2. 添加配置\n\n# 打开配置文件 ./electron/config/config.default.js\n\n  /**\n   * 插件功能\n   * window 官方内置插件\n   * example demo插件\n   */\n  config.addons = {\n    window: {\n      enable: true,\n    },\n  \t// 插件名为key，enable 配置启用\n    example: {\n      enable: true, \n    }\n  };\n\n\n 3. 调用插件\n\n# ./electron/controller/example.js\n\nasync test () {\n\t# 获取插件对象，已经被实例化，且为单例\n  const exampleaddon = this.app.addon.example;\n  # 调用 hello 方法\n  const str = exampleaddon.hello();\n  console.log('str:', str);\n\n  return;\n}\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"内置窗口插件",frontmatter:{title:"内置窗口插件",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/7a78f7/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/020.%E7%AA%97%E5%8F%A3%E6%8F%92%E4%BB%B6.html",relativePath:"02.v2/020.基础功能/030.插件/020.窗口插件.md",key:"v-02d3e2da",path:"/pages/7a78f7/",headers:[{level:3,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:69},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:111},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:228},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:42}],headersStr:"说明 配置 代码 使用",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 说明\n\n用来创建多窗口，并实现 窗口/主进程、窗口/子窗口 之间互相通信。\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  window: {\n    enable: true,\n  },\n}\n\n\n\n# 代码\n\n# ee-core/addon/window/index.js\n\n\n\n# 使用\n\n主进程\n\n# electron/controller/example.js\n  \n/**\n * 打开新窗口\n */\ncreateWindow (args) {\n  let content = null;\n  if (args.type == 'html') {\n    content = path.join('file://', electronApp.getAppPath(), args.content)\n  } else if (args.type == 'web') {\n    content = args.content;\n  } else if (args.type == 'vue') {\n    let addr = 'http://localhost:8080'\n    if (this.config.env == 'prod') {\n      const mainServer = this.app.config.mainServer;\n      addr = mainServer.protocol + mainServer.host + ':' + mainServer.port;\n    }\n\n    content = addr + args.content;\n  } else {\n    // some\n  }\n\n\t# 调用窗口插件\n  const addonWindow = this.app.addon.window;\n  let opt = {\n    title: args.windowName || 'new window'\n  }\n  const name = args.windowName || 'window-1';\n  const win = addonWindow.create(name, opt);\n  const winContentsId = win.webContents.id;\n\n  // load page\n  win.loadURL(content);\n\n  return winContentsId\n}\n\n\n# electron/controller/example.js\n\n/**\n * 获取窗口contents id\n */\ngetWCid (args) {\n  const addonWindow = this.app.addon.window;\n\n  // 主窗口的name默认是main，其它窗口name开发者自己定义\n  const name = args;\n  const id = addonWindow.getWCid(name);\n\n  return id;\n}\n\n\n\n前端\n\n# frontend/src/views/base/socket/Ipc.vue\n\n/**\n * 监听通信频道\n */\ninit () {\n  const self = this;\n  // 监听 窗口2 发来的消息\n  this.$ipc.removeAllListeners(specialIpcRoute.window2ToWindow1);\n  this.$ipc.on(specialIpcRoute.window2ToWindow1, (event, arg) => {\n    this.$message.info(arg);\n  })\n},\n\n/**\n * 创建窗口\n */\ncreateWindow (index) {\n  this.$ipcInvoke(ipcApiRoute.createWindow, this.views[index]).then(id => {\n    console.log('[createWindow] id:', id);\n  })\n},\n\n/**\n * 向新窗口发消息\n */\nasync sendTosubWindow () {\n  // 新窗口id\n  this.newWcId = await this.$ipcInvoke(ipcApiRoute.getWCid, this.windowName);\n  this.$ipc.sendTo(this.newWcId, specialIpcRoute.window1ToWindow2, '窗口1通过 sendTo 给窗口2发送消息');\n},\n\n\n# frontend/src/views/base/subwindow/Ipc.vue\n\n/**\n * 监听通信频道\n */\ninit () {\n  const self = this;\n  // 监听主窗口发来的消息\n  this.$ipc.removeAllListeners(specialIpcRoute.window1ToWindow2);\n  this.$ipc.on(specialIpcRoute.window1ToWindow2, (event, arg) => {\n      this.$message.info(arg);\n  })\n},\n\n/**\n * 向主窗口发消息\n */\nsendTosubWindow () {\n  // 获取主窗口id\n  this.$ipcInvoke(ipcApiRoute.getWCid, 'main').then(id => {\n    this.mainWCid = id;\n    this.$ipc.sendTo(this.mainWCid, specialIpcRoute.window2ToWindow1, '窗口2 通过 sendTo 给主窗口发送消息');\n  });\n},\n\n",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 说明\n\n用来创建多窗口，并实现 窗口/主进程、窗口/子窗口 之间互相通信。\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  window: {\n    enable: true,\n  },\n}\n\n\n\n# 代码\n\n# ee-core/addon/window/index.js\n\n\n\n# 使用\n\n主进程\n\n# electron/controller/example.js\n  \n/**\n * 打开新窗口\n */\ncreatewindow (args) {\n  let content = null;\n  if (args.type == 'html') {\n    content = path.join('file://', electronapp.getapppath(), args.content)\n  } else if (args.type == 'web') {\n    content = args.content;\n  } else if (args.type == 'vue') {\n    let addr = 'http://localhost:8080'\n    if (this.config.env == 'prod') {\n      const mainserver = this.app.config.mainserver;\n      addr = mainserver.protocol + mainserver.host + ':' + mainserver.port;\n    }\n\n    content = addr + args.content;\n  } else {\n    // some\n  }\n\n\t# 调用窗口插件\n  const addonwindow = this.app.addon.window;\n  let opt = {\n    title: args.windowname || 'new window'\n  }\n  const name = args.windowname || 'window-1';\n  const win = addonwindow.create(name, opt);\n  const wincontentsid = win.webcontents.id;\n\n  // load page\n  win.loadurl(content);\n\n  return wincontentsid\n}\n\n\n# electron/controller/example.js\n\n/**\n * 获取窗口contents id\n */\ngetwcid (args) {\n  const addonwindow = this.app.addon.window;\n\n  // 主窗口的name默认是main，其它窗口name开发者自己定义\n  const name = args;\n  const id = addonwindow.getwcid(name);\n\n  return id;\n}\n\n\n\n前端\n\n# frontend/src/views/base/socket/ipc.vue\n\n/**\n * 监听通信频道\n */\ninit () {\n  const self = this;\n  // 监听 窗口2 发来的消息\n  this.$ipc.removealllisteners(specialipcroute.window2towindow1);\n  this.$ipc.on(specialipcroute.window2towindow1, (event, arg) => {\n    this.$message.info(arg);\n  })\n},\n\n/**\n * 创建窗口\n */\ncreatewindow (index) {\n  this.$ipcinvoke(ipcapiroute.createwindow, this.views[index]).then(id => {\n    console.log('[createwindow] id:', id);\n  })\n},\n\n/**\n * 向新窗口发消息\n */\nasync sendtosubwindow () {\n  // 新窗口id\n  this.newwcid = await this.$ipcinvoke(ipcapiroute.getwcid, this.windowname);\n  this.$ipc.sendto(this.newwcid, specialipcroute.window1towindow2, '窗口1通过 sendto 给窗口2发送消息');\n},\n\n\n# frontend/src/views/base/subwindow/ipc.vue\n\n/**\n * 监听通信频道\n */\ninit () {\n  const self = this;\n  // 监听主窗口发来的消息\n  this.$ipc.removealllisteners(specialipcroute.window1towindow2);\n  this.$ipc.on(specialipcroute.window1towindow2, (event, arg) => {\n      this.$message.info(arg);\n  })\n},\n\n/**\n * 向主窗口发消息\n */\nsendtosubwindow () {\n  // 获取主窗口id\n  this.$ipcinvoke(ipcapiroute.getwcid, 'main').then(id => {\n    this.mainwcid = id;\n    this.$ipc.sendto(this.mainwcid, specialipcroute.window2towindow1, '窗口2 通过 sendto 给主窗口发送消息');\n  });\n},\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"托盘插件",frontmatter:{title:"托盘插件",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/d155ae/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/030.%E6%89%98%E7%9B%98%E6%8F%92%E4%BB%B6.html",relativePath:"02.v2/020.基础功能/030.插件/030.托盘插件.md",key:"v-e11e3a30",path:"/pages/d155ae/",headers:[{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:69},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:272},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:42}],headersStr:"配置 代码 使用",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n    tray: {\n      enable: true,\n      title: 'EE程序', // 托盘显示标题\n      icon: '/public/images/tray_logo.png' // 托盘图标\n    },\n}\n\n\n\n# 代码\n\n# electron/addon/tray/index.js\n\n\n\n# 使用\n\n托盘功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {Object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n\t// 获取已经实例化的类对象\n  const trayAddon = app.addon.tray;\n\n\t// 调用create方法\n  trayAddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n    tray: {\n      enable: true,\n      title: 'ee程序', // 托盘显示标题\n      icon: '/public/images/tray_logo.png' // 托盘图标\n    },\n}\n\n\n\n# 代码\n\n# electron/addon/tray/index.js\n\n\n\n# 使用\n\n托盘功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n\t// 获取已经实例化的类对象\n  const trayaddon = app.addon.tray;\n\n\t// 调用create方法\n  trayaddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"自动升级插件",frontmatter:{title:"自动升级插件",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/9e6229/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/040.%E8%87%AA%E5%8A%A8%E5%8D%87%E7%BA%A7%E6%8F%92%E4%BB%B6.html",relativePath:"02.v2/020.基础功能/030.插件/040.自动升级插件.md",key:"v-5bcb8ad1",path:"/pages/9e6229/",headers:[{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:69},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:475},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:42}],headersStr:"配置 代码 使用",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  autoUpdater: {\n    enable: true,\n    windows: false, // windows平台\n    macOS: false, // macOs 需要签名验证\n    linux: false, // linux平台\n    options: {\n      provider: 'generic', // or github, s3, bintray\n      url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n    },\n    force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n  }, \n}\n\n\n\n# 代码\n\n# electron/addon/autoUpdater/index.js\n\n\n\n# 使用\n\n自动升级功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {Object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n\t// 获取已经实例化的类对象\n    const autoUpdaterAddon = app.addon.autoUpdater;\n\n\t// 调用create方法\n  autoUpdaterAddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  autoupdater: {\n    enable: true,\n    windows: false, // windows平台\n    macos: false, // macos 需要签名验证\n    linux: false, // linux平台\n    options: {\n      provider: 'generic', // or github, s3, bintray\n      url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n    },\n    force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n  }, \n}\n\n\n\n# 代码\n\n# electron/addon/autoupdater/index.js\n\n\n\n# 使用\n\n自动升级功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n\t// 获取已经实例化的类对象\n    const autoupdateraddon = app.addon.autoupdater;\n\n\t// 调用create方法\n  autoupdateraddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"唤醒插件",frontmatter:{title:"唤醒插件",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/d4ef4d/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/050.%E5%94%A4%E9%86%92%E6%8F%92%E4%BB%B6.html",relativePath:"02.v2/020.基础功能/030.插件/050.唤醒插件.md",key:"v-1f96c428",path:"/pages/d4ef4d/",headers:[{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:69},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:242},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:42}],headersStr:"配置 代码 使用",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  awaken: {\n    enable: true,\n    protocol: 'ee', // 自定义协议名（默认你的应用名称-英文）\n    args: []\n  },\n}\n\n\n\n# 代码\n\n# electron/addon/awaken/index.js\n\n\n\n# 使用\n\n唤醒功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {Object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n\t// 获取已经实例化的类对象\n  const awakenAddon = app.addon.awaken;\n\n\t// 调用create方法\n  awakenAddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  awaken: {\n    enable: true,\n    protocol: 'ee', // 自定义协议名（默认你的应用名称-英文）\n    args: []\n  },\n}\n\n\n\n# 代码\n\n# electron/addon/awaken/index.js\n\n\n\n# 使用\n\n唤醒功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n\t// 获取已经实例化的类对象\n  const awakenaddon = app.addon.awaken;\n\n\t// 调用create方法\n  awakenaddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"安全插件",frontmatter:{title:"安全插件",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/1cdf89/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/060.%E5%AE%89%E5%85%A8%E6%8F%92%E4%BB%B6.html",relativePath:"02.v2/020.基础功能/030.插件/060.安全插件.md",key:"v-6440137f",path:"/pages/1cdf89/",headers:[{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:69},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:188},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:42}],headersStr:"配置 代码 使用",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  security: {\n    enable: true,\n  },\n}\n\n\n\n# 代码\n\n# electron/addon/security/index.js\n\n\n\n# 使用\n\n托盘功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {Object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n\t// 获取已经实例化的类对象\n  const securityAddon = app.addon.security;\n\n\t// 调用create方法\n  securityAddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  security: {\n    enable: true,\n  },\n}\n\n\n\n# 代码\n\n# electron/addon/security/index.js\n\n\n\n# 使用\n\n托盘功能是程序启动时，就要加载的功能，因此需要在预加载模块使用它。\n\n/**\n * 预加载模块入口\n * @param {object} app - 全局app对象\n */\nmodule.exports = async (app) => {\n\n\t// 获取已经实例化的类对象\n  const securityaddon = app.addon.security;\n\n\t// 调用create方法\n  securityaddon.create();\n}\n\n\n开发者可根据自身需求完善它的功能。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"java服务插件",frontmatter:{title:"java服务插件",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/259c1f/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/030.%E6%8F%92%E4%BB%B6/070.java%E6%9C%8D%E5%8A%A1%E6%8F%92%E4%BB%B6.html",relativePath:"02.v2/020.基础功能/030.插件/070.java服务插件.md",key:"v-a9404fc6",path:"/pages/259c1f/",headers:[{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:69},{level:3,title:"安装table-parser包",slug:"安装table-parser包",normalizedTitle:"安装table-parser包",charIndex:470},{level:3,title:"官方下载 jre",slug:"官方下载-jre",normalizedTitle:"官方下载 jre",charIndex:511},{level:3,title:"编译 spring boot 为可执行jar",slug:"编译-spring-boot-为可执行jar",normalizedTitle:"编译 spring boot 为可执行jar",charIndex:574},{level:3,title:"通信",slug:"通信",normalizedTitle:"通信",charIndex:634},{level:3,title:"展示demo",slug:"展示demo",normalizedTitle:"展示demo",charIndex:663}],headersStr:"配置 安装table-parser包 官方下载 jre 编译 spring boot 为可执行jar 通信 展示demo",content:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  javaServer: {\n    enable: true,  // 是否启用\n    port: 18080,    // 默认端口（如果端口被使用，则随机获取一个）\n    jreVersion: 'jre1.8.0_201', // 额外资源目录下 jre 文件夹名称\n    opt: '-server -Xms512M -Xmx512M -Xss512k -Dspring.profiles.active=prod -Dserver.port=${port} -Dlogging.file.path=\"${path}\" ',\n    name: 'java-app.jar' // 额外资源目录下 jar 名称\n  },\n}\n\n\n\n# 安装table-parser包\n\nnpm i table-parser\n\n\n\n# 官方下载 jre\n\n将jre解压到：build/extraResources 目录 下载地址：Oracle java\n\n\n# 编译 spring boot 为可执行jar\n\n将jar放到： build/extraResources 目录\n\n\n# 通信\n\n前端代码发送http请求与jar服务通信\n\n\n# 展示demo\n\n 1. 下载 jre 和 jar\n\nhttps://github.com/wallace5303/electron-egg/releases/tag/v2.4.0 资源：java-res.zip 注意： 请根据你的操作系统，选择正确的jre 并解压\n\n 2. 将资源放到 build/extraResources 目录\n 3. 运行ee程序，菜单->其它->java服务",normalizedContent:"> ee-core: v1.4.0\n\n> ee-core: v2.0.3 版后，尽量使用模块化api，减少对this.app依赖\n\n\n# 配置\n\n# electron/config/config.default.js\n\n/**\n * 插件功能\n */\nconfig.addons = {\n  javaserver: {\n    enable: true,  // 是否启用\n    port: 18080,    // 默认端口（如果端口被使用，则随机获取一个）\n    jreversion: 'jre1.8.0_201', // 额外资源目录下 jre 文件夹名称\n    opt: '-server -xms512m -xmx512m -xss512k -dspring.profiles.active=prod -dserver.port=${port} -dlogging.file.path=\"${path}\" ',\n    name: 'java-app.jar' // 额外资源目录下 jar 名称\n  },\n}\n\n\n\n# 安装table-parser包\n\nnpm i table-parser\n\n\n\n# 官方下载 jre\n\n将jre解压到：build/extraresources 目录 下载地址：oracle java\n\n\n# 编译 spring boot 为可执行jar\n\n将jar放到： build/extraresources 目录\n\n\n# 通信\n\n前端代码发送http请求与jar服务通信\n\n\n# 展示demo\n\n 1. 下载 jre 和 jar\n\nhttps://github.com/wallace5303/electron-egg/releases/tag/v2.4.0 资源：java-res.zip 注意： 请根据你的操作系统，选择正确的jre 并解压\n\n 2. 将资源放到 build/extraresources 目录\n 3. 运行ee程序，菜单->其它->java服务",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"通信介绍",frontmatter:{title:"通信介绍",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/4ed946/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/040.%E9%80%9A%E4%BF%A1/010.%E9%80%9A%E4%BF%A1%E4%BB%8B%E7%BB%8D.html",relativePath:"02.v2/020.基础功能/040.通信/010.通信介绍.md",key:"v-40fe6700",path:"/pages/4ed946/",headers:[{level:2,title:"IPC",slug:"ipc",normalizedTitle:"ipc",charIndex:73},{level:3,title:"单向通信",slug:"单向通信",normalizedTitle:"单向通信",charIndex:110},{level:3,title:"双向通信",slug:"双向通信",normalizedTitle:"双向通信",charIndex:81},{level:3,title:"预加载模块通信",slug:"预加载模块通信",normalizedTitle:"预加载模块通信",charIndex:854},{level:4,title:"ipc通信文档",slug:"ipc通信文档",normalizedTitle:"ipc通信文档",charIndex:1022},{level:2,title:"HTTP/HTTPS",slug:"http-https",normalizedTitle:"http/https",charIndex:1069},{level:3,title:"打开配置文件",slug:"打开配置文件",normalizedTitle:"打开配置文件",charIndex:1175},{level:3,title:"cors属性",slug:"cors属性",normalizedTitle:"cors属性",charIndex:1554},{level:3,title:"body属性",slug:"body属性",normalizedTitle:"body属性",charIndex:2375},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:3884},{level:2,title:"socket",slug:"socket",normalizedTitle:"socket",charIndex:62},{level:3,title:"打开配置文件",slug:"打开配置文件-2",normalizedTitle:"打开配置文件",charIndex:1175},{level:3,title:"使用方法",slug:"使用方法-2",normalizedTitle:"使用方法",charIndex:3884},{level:3,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:4507},{level:3,title:"方法二",slug:"方法二",normalizedTitle:"方法二",charIndex:5203},{level:3,title:"方法三",slug:"方法三",normalizedTitle:"方法三",charIndex:5617}],headersStr:"IPC 单向通信 双向通信 预加载模块通信 ipc通信文档 HTTP/HTTPS 打开配置文件 cors属性 body属性 使用方法 socket 打开配置文件 使用方法 方式一 方法二 方法三",content:"前端 和 **业务层 **通过以下三种方式通信，可根据需求搭配使用\n\n 1. ipc\n 2. http/https\n 3. socket\n\n\n# IPC\n\n优点：双向通信 文件：前端引入ipcRender.js\n\n\n# 单向通信\n\n# 定义通信频道，即路由\nconst ipcApiRoute = {\n  hello: 'controller.example.hello',\n}\n\n# 发送请求\n# 该请求会访问 controller/example.js文件的hello函数\nthis.$ipc.invoke(ipcApiRoute.hello, {name:'张三'}).then(r => {\n\t// r为返回的数据\n  conson.log(r);\n})\n\n\n\n# 双向通信\n\n# 定义通信频道，即路由\nconst ipcApiRoute = {\n  ipcSendMsg: 'controller.example.ipcSendMsg',\n}\n\n// 避免重复监听，或者将 $ipc.on() 功能写到一个统一的地方，只加载一次\nthis.$ipc.removeAllListeners(ipcApiRoute.ipcSendMsg);\n\n// 监听，接收 服务端 event.reply()发送的数据\nthis.$ipc.on(ipcApiRoute.ipcSendMsg, (event, result) => {\n    console.log('[ipcRenderer] [ipcSendMsg] result:', result);\n\n    self.messageString = result;\n    // 调用后端的另一个接口\n    event.sender.send(ipcApiRoute.hello, 'electron-egg');\n})\n\n// 发送请求到服务端\nthis.$ipc.send(ipcApiRoute.ipcSendMsg, '参数')\n\n\n\n# 预加载模块通信\n\n# 向前端发消息  \n// 频道\nconst channel = 'controller.example.ipcSendMsg';\n// 使用主窗口的 webContents.send() 方法\neeApp.mainWindow.webContents.send(channel, {name:'张三'});\n\n\n# ipc通信文档\n\n * ipcMain: 文档\n * ipcRenderer: 文档\n\n\n# HTTP/HTTPS\n\n * 优点：可在前端、浏览器、终端命令（curl）等，跨界访问EE程序\n * 生成ssl证书：https://www.yuque.com/u34495/mivcfg/fppcdv\n\n\n# 打开配置文件\n\n/* 内置http服务 */\nconfig.httpServer = {\n  enable: false, // 是否启用\n  https: {\n    enable: false, \n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },  \n  port: 7071, // 默认端口（如果端口被使用，则随机获取一个）\n  cors: {\n    origin: \"*\" // 跨域\n  },\n  body: {\n    multipart: true,\n    formidable: {\n      keepExtensions: true\n    }\n  }  \n};\n\n\n\n# cors属性\n\n * origin\n\n配置 Access-Control-Allow-Origin CORS header，字符串 或 函数, 它将ctx作为第一个参数\n\n * exposeHeaders\n\n配置 Access-Control-Expose-Headers CORS header，类型：Array\n\n * maxAge\n\n配置 Access-Control-Max-Age CORS header，类型：Number\n\n * credentials\n\n配置 Access-Control-Allow-Credentials CORS header. 类型：Boolean.\n\n * allowMethods\n\n配置 Access-Control-Allow-Methods CORS header. 类型：array ，默认值 ['GET', 'PUT', 'POST', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS']\n\n * allowHeaders\n\n配置 Access-Control-Allow-Headers CORS header. 类型：Array\n\n{\n  origin: function(ctx) {\n    if (ctx.url === '/test') {\n      return false;\n    }\n    return '*';\n  },\n  exposeHeaders: ['WWW-Authenticate', 'Server-Authorization'],\n  maxAge: 5,\n  credentials: true,\n  allowMethods: ['GET', 'POST', 'DELETE'],\n  allowHeaders: ['Content-Type', 'Authorization', 'Accept'],\n}\n\n\n\n# body属性\n\n * patchNode {Boolean} 将请求body修补到Node's ctx.req，默认值：false\n * patchKoa {Boolean} 将请求body修补到 Koa's ctx.request, 默认值：true\n * jsonLimit {String|Integer} JSON body大小限制，默认值：1mb\n * formLimit {String|Integer} form body大小限制，默认值：56kb\n * textLimit {String|Integer} text body大小限制，默认值：56kb\n * encoding {String} 设置传入表单字段的编码，默认值：utf-8\n * multipart {Boolean} 解析 multipart bodies，默认值：false\n * urlencoded {Boolean} 解析 urlencoded bodies，默认值：true\n * text {Boolean} 解析 text bodies，比如 XML，默认值：true\n * json {Boolean} 解析 JSON bodies，默认值：true\n * jsonStrict {Boolean} 切换 co-body 严格模式；如果设为 true - 仅仅解析 arrays 或 objects，默认值：true\n * includeUnparsed {Boolean} 切换 co-body returnRawBody 选项; 如果设为 true, 对于表单编码和JSON请求原始，未解析的 body 使用Symbol 被连接到 ctx.request.body，默认值：false\n * formidable {Object} 见下方\n * onError {Function} 自定义错误句柄，如果抛出错误，可以自定义响应 - onError(error, context), 默认值将抛出\n * strict {Boolean} DEPRECATED If enabled, 不解析 GET, HEAD, DELETE 请求，默认值：true\n * parsedMethods {String[]} 声明将在其中解析实体的HTTP方法，默认值：['POST', 'PUT', 'PATCH']. 替换 strict 选项关于\n\n关于 formidable 对象\n\n * maxFields {Integer} 限制querystring解析器将解码的字段数，默认值：1000\n * maxFieldsSize {Integer} 限制所有字段（文件除外）可以以字节为单位分配的内存量，如果超过此值，一个 'error' 事件将被触发，默认值：2mb (2 * 1024 * 1024)\n * uploadDir {String} 设置用于放置文件上载的目录, 默认值：os.tmpDir()\n * keepExtensions {Boolean} 写入uploadDir的文件将包括原始文件的扩展名，默认值：false\n * hashAlgorithm {String} 如果要计算传入文件的校验和，将其设置为“sha1”或“md5”，默认值：false\n * multiples {Boolean} 是否上载多个文件，默认值：true\n * onFileBegin {Function} 文件开始时的特殊回调。改函数将通过 formidable执行，它可以用于在将文件保存到磁盘之前重命名文件。\n\n\n# 使用方法\n\n# 前端，项目中有demo\n\n# 终端命令，如\ncurl http://127.0.0.1:7071/controller/example/doHttpRequest?id=pictures\n\n# 浏览器\nhttp://127.0.0.1:7071/controller/example/doHttpRequest?id=pictures\n\n\n\n# socket\n\n优点：双向通信\n\n\n# 打开配置文件\n\n/* 内置socket服务 */\nconfig.socketServer = {\n  enable: false, // 是否启用\n  port: 7070, // 默认端口（如果端口被使用，则随机获取一个）\n  path: \"/socket.io/\", // 默认路径名称\n  connectTimeout: 45000, // 客户端连接超时时间\n  pingTimeout: 30000, // 心跳检测超时时间\n  pingInterval: 25000, // 心跳检测间隔\n  maxHttpBufferSize: 1e8, // 每条消息的数据最大值 1M\n  transports: [\"polling\", \"websocket\"], // http轮询和websocket\n  cors: {\n    origin: true, // http协议时，要设置允许跨域\n  }\n};\n\n\n\n# 使用方法\n\n\n# 方式一\n\n在前端调用，访问electron业务层\n\n# vue\nimport { io } from 'socket.io-client'\n\nexport default {\n  data() {\n    return {};\n  },\n  mounted() {\n    // socket支持http协议和websocket协议\n    // 推荐使用websocket\n    const url  = 'ws://127.0.0.1:' + port; // config中配置的端口\n    this.socket = io(url, { transports: [\"websocket\"] });\n    this.socket.on('connect', () => {\n      console.log('connect!!!!!!!!');\n    });\n  },\n  methods: {\n    send() {\n      const channel = 'c1'; // 通信频道固定\n      const method = 'controller.example.hello'; // EE框架中，控制器中的方法\n      this.socket.emit(channel, { cmd: method, params: 1 }, (response) => {\n        // response为返回值\n        console.log('response:', response)\n      });\n    }\n  }\n};\n\n\n\n\n# 方法二\n\n在其它node.js项目中使用socket.io与EE框架通信\n\n# 第三方项目引入socket客户端\nconst Client = require('socket.io-client');\n\n// socket支持http协议和websocket协议\n// 推荐使用websocket\nconst url  = 'http://127.0.0.1:' + port;// config中配置的端口\nconst cObj = Client(url);\n\nconst channel = 'c1'; // 通信频道固定\nconst method = 'controller.example.hello'; // EE框架中，控制器中的方法\ncObj.emit(channel, { cmd: method, params: 1 }, (response) => {\n  // response为返回值\n});\n\n\n\n# 方法三\n\n其它语言的网络模块大同小异，监听通信地址即可",normalizedContent:"前端 和 **业务层 **通过以下三种方式通信，可根据需求搭配使用\n\n 1. ipc\n 2. http/https\n 3. socket\n\n\n# ipc\n\n优点：双向通信 文件：前端引入ipcrender.js\n\n\n# 单向通信\n\n# 定义通信频道，即路由\nconst ipcapiroute = {\n  hello: 'controller.example.hello',\n}\n\n# 发送请求\n# 该请求会访问 controller/example.js文件的hello函数\nthis.$ipc.invoke(ipcapiroute.hello, {name:'张三'}).then(r => {\n\t// r为返回的数据\n  conson.log(r);\n})\n\n\n\n# 双向通信\n\n# 定义通信频道，即路由\nconst ipcapiroute = {\n  ipcsendmsg: 'controller.example.ipcsendmsg',\n}\n\n// 避免重复监听，或者将 $ipc.on() 功能写到一个统一的地方，只加载一次\nthis.$ipc.removealllisteners(ipcapiroute.ipcsendmsg);\n\n// 监听，接收 服务端 event.reply()发送的数据\nthis.$ipc.on(ipcapiroute.ipcsendmsg, (event, result) => {\n    console.log('[ipcrenderer] [ipcsendmsg] result:', result);\n\n    self.messagestring = result;\n    // 调用后端的另一个接口\n    event.sender.send(ipcapiroute.hello, 'electron-egg');\n})\n\n// 发送请求到服务端\nthis.$ipc.send(ipcapiroute.ipcsendmsg, '参数')\n\n\n\n# 预加载模块通信\n\n# 向前端发消息  \n// 频道\nconst channel = 'controller.example.ipcsendmsg';\n// 使用主窗口的 webcontents.send() 方法\neeapp.mainwindow.webcontents.send(channel, {name:'张三'});\n\n\n# ipc通信文档\n\n * ipcmain: 文档\n * ipcrenderer: 文档\n\n\n# http/https\n\n * 优点：可在前端、浏览器、终端命令（curl）等，跨界访问ee程序\n * 生成ssl证书：https://www.yuque.com/u34495/mivcfg/fppcdv\n\n\n# 打开配置文件\n\n/* 内置http服务 */\nconfig.httpserver = {\n  enable: false, // 是否启用\n  https: {\n    enable: false, \n    key: '/public/ssl/localhost+1.key', // key文件\n    cert: '/public/ssl/localhost+1.pem' // cert文件\n  },  \n  port: 7071, // 默认端口（如果端口被使用，则随机获取一个）\n  cors: {\n    origin: \"*\" // 跨域\n  },\n  body: {\n    multipart: true,\n    formidable: {\n      keepextensions: true\n    }\n  }  \n};\n\n\n\n# cors属性\n\n * origin\n\n配置 access-control-allow-origin cors header，字符串 或 函数, 它将ctx作为第一个参数\n\n * exposeheaders\n\n配置 access-control-expose-headers cors header，类型：array\n\n * maxage\n\n配置 access-control-max-age cors header，类型：number\n\n * credentials\n\n配置 access-control-allow-credentials cors header. 类型：boolean.\n\n * allowmethods\n\n配置 access-control-allow-methods cors header. 类型：array ，默认值 ['get', 'put', 'post', 'patch', 'delete', 'head', 'options']\n\n * allowheaders\n\n配置 access-control-allow-headers cors header. 类型：array\n\n{\n  origin: function(ctx) {\n    if (ctx.url === '/test') {\n      return false;\n    }\n    return '*';\n  },\n  exposeheaders: ['www-authenticate', 'server-authorization'],\n  maxage: 5,\n  credentials: true,\n  allowmethods: ['get', 'post', 'delete'],\n  allowheaders: ['content-type', 'authorization', 'accept'],\n}\n\n\n\n# body属性\n\n * patchnode {boolean} 将请求body修补到node's ctx.req，默认值：false\n * patchkoa {boolean} 将请求body修补到 koa's ctx.request, 默认值：true\n * jsonlimit {string|integer} json body大小限制，默认值：1mb\n * formlimit {string|integer} form body大小限制，默认值：56kb\n * textlimit {string|integer} text body大小限制，默认值：56kb\n * encoding {string} 设置传入表单字段的编码，默认值：utf-8\n * multipart {boolean} 解析 multipart bodies，默认值：false\n * urlencoded {boolean} 解析 urlencoded bodies，默认值：true\n * text {boolean} 解析 text bodies，比如 xml，默认值：true\n * json {boolean} 解析 json bodies，默认值：true\n * jsonstrict {boolean} 切换 co-body 严格模式；如果设为 true - 仅仅解析 arrays 或 objects，默认值：true\n * includeunparsed {boolean} 切换 co-body returnrawbody 选项; 如果设为 true, 对于表单编码和json请求原始，未解析的 body 使用symbol 被连接到 ctx.request.body，默认值：false\n * formidable {object} 见下方\n * onerror {function} 自定义错误句柄，如果抛出错误，可以自定义响应 - onerror(error, context), 默认值将抛出\n * strict {boolean} deprecated if enabled, 不解析 get, head, delete 请求，默认值：true\n * parsedmethods {string[]} 声明将在其中解析实体的http方法，默认值：['post', 'put', 'patch']. 替换 strict 选项关于\n\n关于 formidable 对象\n\n * maxfields {integer} 限制querystring解析器将解码的字段数，默认值：1000\n * maxfieldssize {integer} 限制所有字段（文件除外）可以以字节为单位分配的内存量，如果超过此值，一个 'error' 事件将被触发，默认值：2mb (2 * 1024 * 1024)\n * uploaddir {string} 设置用于放置文件上载的目录, 默认值：os.tmpdir()\n * keepextensions {boolean} 写入uploaddir的文件将包括原始文件的扩展名，默认值：false\n * hashalgorithm {string} 如果要计算传入文件的校验和，将其设置为“sha1”或“md5”，默认值：false\n * multiples {boolean} 是否上载多个文件，默认值：true\n * onfilebegin {function} 文件开始时的特殊回调。改函数将通过 formidable执行，它可以用于在将文件保存到磁盘之前重命名文件。\n\n\n# 使用方法\n\n# 前端，项目中有demo\n\n# 终端命令，如\ncurl http://127.0.0.1:7071/controller/example/dohttprequest?id=pictures\n\n# 浏览器\nhttp://127.0.0.1:7071/controller/example/dohttprequest?id=pictures\n\n\n\n# socket\n\n优点：双向通信\n\n\n# 打开配置文件\n\n/* 内置socket服务 */\nconfig.socketserver = {\n  enable: false, // 是否启用\n  port: 7070, // 默认端口（如果端口被使用，则随机获取一个）\n  path: \"/socket.io/\", // 默认路径名称\n  connecttimeout: 45000, // 客户端连接超时时间\n  pingtimeout: 30000, // 心跳检测超时时间\n  pinginterval: 25000, // 心跳检测间隔\n  maxhttpbuffersize: 1e8, // 每条消息的数据最大值 1m\n  transports: [\"polling\", \"websocket\"], // http轮询和websocket\n  cors: {\n    origin: true, // http协议时，要设置允许跨域\n  }\n};\n\n\n\n# 使用方法\n\n\n# 方式一\n\n在前端调用，访问electron业务层\n\n# vue\nimport { io } from 'socket.io-client'\n\nexport default {\n  data() {\n    return {};\n  },\n  mounted() {\n    // socket支持http协议和websocket协议\n    // 推荐使用websocket\n    const url  = 'ws://127.0.0.1:' + port; // config中配置的端口\n    this.socket = io(url, { transports: [\"websocket\"] });\n    this.socket.on('connect', () => {\n      console.log('connect!!!!!!!!');\n    });\n  },\n  methods: {\n    send() {\n      const channel = 'c1'; // 通信频道固定\n      const method = 'controller.example.hello'; // ee框架中，控制器中的方法\n      this.socket.emit(channel, { cmd: method, params: 1 }, (response) => {\n        // response为返回值\n        console.log('response:', response)\n      });\n    }\n  }\n};\n\n\n\n\n# 方法二\n\n在其它node.js项目中使用socket.io与ee框架通信\n\n# 第三方项目引入socket客户端\nconst client = require('socket.io-client');\n\n// socket支持http协议和websocket协议\n// 推荐使用websocket\nconst url  = 'http://127.0.0.1:' + port;// config中配置的端口\nconst cobj = client(url);\n\nconst channel = 'c1'; // 通信频道固定\nconst method = 'controller.example.hello'; // ee框架中，控制器中的方法\ncobj.emit(channel, { cmd: method, params: 1 }, (response) => {\n  // response为返回值\n});\n\n\n\n# 方法三\n\n其它语言的网络模块大同小异，监听通信地址即可",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"通信-ipcRender.js",frontmatter:{title:"通信-ipcRender.js",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/eec975/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/040.%E9%80%9A%E4%BF%A1/020.%E9%80%9A%E4%BF%A1ipcRender.html",relativePath:"02.v2/020.基础功能/040.通信/020.通信ipcRender.md",key:"v-2eb9ca82",path:"/pages/eec975/",headers:[{level:3,title:"ipcRenderer.js",slug:"ipcrenderer-js",normalizedTitle:"ipcrenderer.js",charIndex:21},{level:3,title:"API",slug:"api",normalizedTitle:"api",charIndex:1009},{level:3,title:"ipc",slug:"ipc",normalizedTitle:"ipc",charIndex:11},{level:3,title:"isEE",slug:"isee",normalizedTitle:"isee",charIndex:950},{level:3,title:"旧的API",slug:"旧的api",normalizedTitle:"旧的api",charIndex:1089},{level:3,title:"$ipcInvoke(route, params)",slug:"ipcinvoke-route-params",normalizedTitle:"$ipcinvoke(route, params)",charIndex:1099},{level:3,title:"$ipcSendSync(route, params)",slug:"ipcsendsync-route-params",normalizedTitle:"$ipcsendsync(route, params)",charIndex:1424},{level:3,title:"$ipc",slug:"ipc-2",normalizedTitle:"$ipc",charIndex:1099},{level:3,title:"$ipc.send(route, params)",slug:"ipc-send-route-params",normalizedTitle:"$ipc.send(route, params)",charIndex:1835},{level:3,title:"$ipc.on(route, listener)",slug:"ipc-on-route-listener",normalizedTitle:"$ipc.on(route, listener)",charIndex:2035}],headersStr:"ipcRenderer.js API ipc isEE 旧的API $ipcInvoke(route, params) $ipcSendSync(route, params) $ipc $ipc.send(route, params) $ipc.on(route, listener)",content:"前端与主进程（业务层）ipc通信\n\n\n# ipcRenderer.js\n\n位置：./frontend/src/utils/ipcRenderer.js\n\nconst { ipcRenderer: ipc } = (window.require && window.require('electron')) || window.electron || null;\n\n/**\n * ipc\n * 官方api说明：https://www.electronjs.org/zh/docs/latest/api/ipc-renderer\n * \n * 属性/方法\n * ipc.invoke(channel, param) - 发送异步消息（invoke/handle 模型）\n * ipc.sendSync(channel, param) - 发送同步消息（send/on 模型）\n * ipc.on(channel, listener) - 监听 channel, 当新消息到达，调用 listener\n * ipc.once(channel, listener) - 添加一次性 listener 函数\n * ipc.removeListener(channel, listener) - 为特定的 channel 从监听队列中删除特定的 listener 监听者\n * ipc.removeAllListeners(channel) - 移除所有的监听器，当指定 channel 时只移除与其相关的所有监听器\n * ipc.send(channel, ...args) - 通过channel向主进程发送异步消息\n * ipc.postMessage(channel, message, [transfer]) - 发送消息到主进程\n * ipc.sendTo(webContentsId, channel, ...args) - 通过 channel 发送消息到带有 webContentsId 的窗口\n * ipc.sendToHost(channel, ...args) - 消息会被发送到 host 页面上的 <webview> 元素\n */\n\n/**\n * 是否为EE环境\n */\nconst isEE = ipc ? true : false;\n\nexport {\n  ipc,\n  isEE\n}\n\n\n\n\n# API\n\n\n# ipc\n\n等于electron官方的api\n\n\n# isEE\n\n是否为EE环境。可用此属性区别前端页面是在服务器环境还是用户电脑环境。\n\n\n# 旧的API\n\n\n# $ipcInvoke(route, params)\n\n * 介绍：发送异步消息（invoke/handle 模型）\n * 返回：Promise\n\n# 回调语法\nhandleInvoke () {\n    this.$ipcInvoke(ipcApiRoute.ipcInvokeMsg, '异步-回调').then(r => {\n      console.log('r:', r);\n    });\n},\n\n# async/await语法\nasync handleInvoke2 () {\n    const msg = await this.$ipcInvoke(ipcApiRoute.ipcInvokeMsg, '异步');\n},\n\n\n\n# $ipcSendSync(route, params)\n\n * 介绍：发送同步消息（send/on 模型）\n * 返回：任意类型\n\n# 语法\nconst msg = this.$ipcSendSync(ipcApiRoute.ipcSendSyncMsg, '同步');\n\n\n\n# $ipc\n\n * 介绍：全局ipc对象，等价于electron官方提供的 ipcRender\n\n该对象包含如下方法：\non\nonce\nremoveListener\nremoveAllListeners\nsend\ninvoke\nsendSync\npostMessage\nsendTo\nsendToHost\nIpcRendererEvent\n\n\n详细说明见：https://www.electronjs.org/zh/docs/latest/api/ipc-renderer#ipcrendereronchannel-listener\n\n\n# $ipc.send(route, params)\n\n * 介绍：ipc的send属性，向主进程发送异步消息，可以发送任意参数。\n * 返回：结果在 $ipc.on()监听的路由中\n\n# 使用\nconst params = {\n  type: 'start',\n  content: '开始'\n}\nthis.$ipc.send(ipcApiRoute.ipcSendMsg, params)\n\n\n\n# $ipc.on(route, listener)\n\n * 介绍：ipc的on属性，监听 route；当新消息到达，将调用listener\n * 返回：callback\n\nthis.$ipc.on(ipcApiRoute.ipcSendMsg, (event, result) => {\n  console.log('result:', result);\n\n  // 调用后端的另一个接口\n  event.sender.send(ipcApiRoute.hello, 'electron-egg');\n})\n",normalizedContent:"前端与主进程（业务层）ipc通信\n\n\n# ipcrenderer.js\n\n位置：./frontend/src/utils/ipcrenderer.js\n\nconst { ipcrenderer: ipc } = (window.require && window.require('electron')) || window.electron || null;\n\n/**\n * ipc\n * 官方api说明：https://www.electronjs.org/zh/docs/latest/api/ipc-renderer\n * \n * 属性/方法\n * ipc.invoke(channel, param) - 发送异步消息（invoke/handle 模型）\n * ipc.sendsync(channel, param) - 发送同步消息（send/on 模型）\n * ipc.on(channel, listener) - 监听 channel, 当新消息到达，调用 listener\n * ipc.once(channel, listener) - 添加一次性 listener 函数\n * ipc.removelistener(channel, listener) - 为特定的 channel 从监听队列中删除特定的 listener 监听者\n * ipc.removealllisteners(channel) - 移除所有的监听器，当指定 channel 时只移除与其相关的所有监听器\n * ipc.send(channel, ...args) - 通过channel向主进程发送异步消息\n * ipc.postmessage(channel, message, [transfer]) - 发送消息到主进程\n * ipc.sendto(webcontentsid, channel, ...args) - 通过 channel 发送消息到带有 webcontentsid 的窗口\n * ipc.sendtohost(channel, ...args) - 消息会被发送到 host 页面上的 <webview> 元素\n */\n\n/**\n * 是否为ee环境\n */\nconst isee = ipc ? true : false;\n\nexport {\n  ipc,\n  isee\n}\n\n\n\n\n# api\n\n\n# ipc\n\n等于electron官方的api\n\n\n# isee\n\n是否为ee环境。可用此属性区别前端页面是在服务器环境还是用户电脑环境。\n\n\n# 旧的api\n\n\n# $ipcinvoke(route, params)\n\n * 介绍：发送异步消息（invoke/handle 模型）\n * 返回：promise\n\n# 回调语法\nhandleinvoke () {\n    this.$ipcinvoke(ipcapiroute.ipcinvokemsg, '异步-回调').then(r => {\n      console.log('r:', r);\n    });\n},\n\n# async/await语法\nasync handleinvoke2 () {\n    const msg = await this.$ipcinvoke(ipcapiroute.ipcinvokemsg, '异步');\n},\n\n\n\n# $ipcsendsync(route, params)\n\n * 介绍：发送同步消息（send/on 模型）\n * 返回：任意类型\n\n# 语法\nconst msg = this.$ipcsendsync(ipcapiroute.ipcsendsyncmsg, '同步');\n\n\n\n# $ipc\n\n * 介绍：全局ipc对象，等价于electron官方提供的 ipcrender\n\n该对象包含如下方法：\non\nonce\nremovelistener\nremovealllisteners\nsend\ninvoke\nsendsync\npostmessage\nsendto\nsendtohost\nipcrendererevent\n\n\n详细说明见：https://www.electronjs.org/zh/docs/latest/api/ipc-renderer#ipcrendereronchannel-listener\n\n\n# $ipc.send(route, params)\n\n * 介绍：ipc的send属性，向主进程发送异步消息，可以发送任意参数。\n * 返回：结果在 $ipc.on()监听的路由中\n\n# 使用\nconst params = {\n  type: 'start',\n  content: '开始'\n}\nthis.$ipc.send(ipcapiroute.ipcsendmsg, params)\n\n\n\n# $ipc.on(route, listener)\n\n * 介绍：ipc的on属性，监听 route；当新消息到达，将调用listener\n * 返回：callback\n\nthis.$ipc.on(ipcapiroute.ipcsendmsg, (event, result) => {\n  console.log('result:', result);\n\n  // 调用后端的另一个接口\n  event.sender.send(ipcapiroute.hello, 'electron-egg');\n})\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"json数据库",frontmatter:{title:"json数据库",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/839e74/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/050.%E6%95%B0%E6%8D%AE%E5%BA%93/010.json%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"02.v2/020.基础功能/050.数据库/010.json数据库.md",key:"v-4c3db813",path:"/pages/839e74/",headers:[{level:3,title:"基础",slug:"基础",normalizedTitle:"基础",charIndex:17},{level:3,title:"特点",slug:"特点",normalizedTitle:"特点",charIndex:24},{level:3,title:"数据文件位置",slug:"数据文件位置",normalizedTitle:"数据文件位置",charIndex:77},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:366},{level:3,title:"更多语法",slug:"更多语法",normalizedTitle:"更多语法",charIndex:2416},{level:3,title:"Storage对象文档",slug:"storage对象文档",normalizedTitle:"storage对象文档",charIndex:2425},{level:3,title:"lodash文档",slug:"lodash文档",normalizedTitle:"lodash文档",charIndex:2445}],headersStr:"基础 特点 数据文件位置 示例 更多语法 Storage对象文档 lodash文档",content:"内置了一个json数据库\n\n\n# 基础\n\n\n# 特点\n\n * 小数据量: 0~100M(单库)\n * json数据库\n * 兼容lodash语法\n\n\n# 数据文件位置\n\n打包前：项目根目录\n\nelectron-egg/data/xxx.json\n\n\n打包后：软件缓存目录\n\n# windows (例子)\nC:\\Users\\Administrator\\AppData\\Roaming\\软件名(如：ee)\\data\\xxx.json\n\n# macOS (例子)\nUsers/apple/Library/Application Support/软件名(如：ee)/data/xxx.json\n\n# Linux (例子)\n$XDG_CONFIG_HOME or ~/.config/软件名(如：ee)/data/xxx.json\n\n\n\n# 示例\n\n * 连接数据\n\n'use strict';\n\nconst { Service } = require('ee-core');\n// 框架提供的数据库对象\n// ee-core:v2.0.1\nconst Storage = require('ee-core/storage'); \nconst _ = require('lodash');\n\n/**\n * 数据存储\n * @class\n */\nclass StorageService extends Service {\n\n  constructor (ctx) {\n    super(ctx);\n    \n    // lowdb数据库\n    \n    // ee-core所使用的库\n    this.systemDB = Storage.JsonDB.connection('system');\n    \n    // demo库\n    let lowdbOptions = {\n      driver: 'lowdb'\n    }\n    this.demoDB = Storage.JsonDB.connection('demo', lowdbOptions);  \n  }\n}\n\nmodule.exports = StorageService;\n\n\n * 增加数据\n\n/*\n* 增 Test data\n*/\nasync addTestData(user) {\n  const key = this.demoDBKey.test_data;\n  if (!this.demoDB.db.has(key).value()) {\n    this.demoDB.db.set(key, []).write();\n  }\n  \n  const data = this.demoDB.db\n    .get(key)\n    .push(user)\n    .write();\n  \n  return data;\n}\n\n\n * 删除数据\n\n/*\n* 删 Test data\n*/\nasync delTestData(name = '') {\n  const key = this.demoDBKey.test_data;\n  const data = this.demoDB.db\n    .get(key)\n    .remove({name: name})\n    .write();\n  \n  return data;\n}\n\n\n * 修改数据\n\n/*\n* 改 Test data\n*/\nasync updateTestData(name= '', age = 0) {\n  const key = this.demoDBKey.test_data;\n  const data = this.demoDB.db\n    .get(key)\n    .find({name: name}) // 修改找到的第一个数据，貌似无法批量修改 todo\n    .assign({age: age})\n    .write();\n  \n  return data;\n}\n\n\n * 查找数据\n\n/*\n* 查 Test data\n*/\nasync getTestData(age = 0) {\n  const key = this.demoDBKey.test_data;\n  let data = this.demoDB.db\n    .get(key)\n    //.find({age: age}) 查找单个\n    .filter(function(o) {\n      let isHas = true;\n      isHas = age === o.age ? true : false;\n      return isHas;\n    })\n    //.orderBy(['age'], ['name']) 排序\n    //.slice(0, 10) 分页\n    .value();\n  \n  if (_.isEmpty(data)) {\n    data = []\n  }\n  \n  return data;\n}\n\n/*\n* all Test data\n*/\nasync getAllTestData() {\n  const key = this.demoDBKey.test_data;\n  if (!this.demoDB.db.has(key).value()) {\n    this.demoDB.db.set(key, []).write();\n  }\n  let data = this.demoDB.db\n    .get(key)\n    .value();\n  \n  if (_.isEmpty(data)) {\n    data = []\n  }\n  \n  return data;\n}\n\n\n\n# 更多语法\n\n\n# Storage对象文档\n\n文档\n\n\n# lodash文档\n\nhttps://www.lodashjs.com/",normalizedContent:"内置了一个json数据库\n\n\n# 基础\n\n\n# 特点\n\n * 小数据量: 0~100m(单库)\n * json数据库\n * 兼容lodash语法\n\n\n# 数据文件位置\n\n打包前：项目根目录\n\nelectron-egg/data/xxx.json\n\n\n打包后：软件缓存目录\n\n# windows (例子)\nc:\\users\\administrator\\appdata\\roaming\\软件名(如：ee)\\data\\xxx.json\n\n# macos (例子)\nusers/apple/library/application support/软件名(如：ee)/data/xxx.json\n\n# linux (例子)\n$xdg_config_home or ~/.config/软件名(如：ee)/data/xxx.json\n\n\n\n# 示例\n\n * 连接数据\n\n'use strict';\n\nconst { service } = require('ee-core');\n// 框架提供的数据库对象\n// ee-core:v2.0.1\nconst storage = require('ee-core/storage'); \nconst _ = require('lodash');\n\n/**\n * 数据存储\n * @class\n */\nclass storageservice extends service {\n\n  constructor (ctx) {\n    super(ctx);\n    \n    // lowdb数据库\n    \n    // ee-core所使用的库\n    this.systemdb = storage.jsondb.connection('system');\n    \n    // demo库\n    let lowdboptions = {\n      driver: 'lowdb'\n    }\n    this.demodb = storage.jsondb.connection('demo', lowdboptions);  \n  }\n}\n\nmodule.exports = storageservice;\n\n\n * 增加数据\n\n/*\n* 增 test data\n*/\nasync addtestdata(user) {\n  const key = this.demodbkey.test_data;\n  if (!this.demodb.db.has(key).value()) {\n    this.demodb.db.set(key, []).write();\n  }\n  \n  const data = this.demodb.db\n    .get(key)\n    .push(user)\n    .write();\n  \n  return data;\n}\n\n\n * 删除数据\n\n/*\n* 删 test data\n*/\nasync deltestdata(name = '') {\n  const key = this.demodbkey.test_data;\n  const data = this.demodb.db\n    .get(key)\n    .remove({name: name})\n    .write();\n  \n  return data;\n}\n\n\n * 修改数据\n\n/*\n* 改 test data\n*/\nasync updatetestdata(name= '', age = 0) {\n  const key = this.demodbkey.test_data;\n  const data = this.demodb.db\n    .get(key)\n    .find({name: name}) // 修改找到的第一个数据，貌似无法批量修改 todo\n    .assign({age: age})\n    .write();\n  \n  return data;\n}\n\n\n * 查找数据\n\n/*\n* 查 test data\n*/\nasync gettestdata(age = 0) {\n  const key = this.demodbkey.test_data;\n  let data = this.demodb.db\n    .get(key)\n    //.find({age: age}) 查找单个\n    .filter(function(o) {\n      let ishas = true;\n      ishas = age === o.age ? true : false;\n      return ishas;\n    })\n    //.orderby(['age'], ['name']) 排序\n    //.slice(0, 10) 分页\n    .value();\n  \n  if (_.isempty(data)) {\n    data = []\n  }\n  \n  return data;\n}\n\n/*\n* all test data\n*/\nasync getalltestdata() {\n  const key = this.demodbkey.test_data;\n  if (!this.demodb.db.has(key).value()) {\n    this.demodb.db.set(key, []).write();\n  }\n  let data = this.demodb.db\n    .get(key)\n    .value();\n  \n  if (_.isempty(data)) {\n    data = []\n  }\n  \n  return data;\n}\n\n\n\n# 更多语法\n\n\n# storage对象文档\n\n文档\n\n\n# lodash文档\n\nhttps://www.lodashjs.com/",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"sqlite数据库",frontmatter:{title:"sqlite数据库",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/879ef7/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/050.%E6%95%B0%E6%8D%AE%E5%BA%93/020.sqlite%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"02.v2/020.基础功能/050.数据库/020.sqlite数据库.md",key:"v-41eef0dd",path:"/pages/879ef7/",headers:[{level:3,title:"基础",slug:"基础",normalizedTitle:"基础",charIndex:35},{level:3,title:"特点",slug:"特点",normalizedTitle:"特点",charIndex:42},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:91},{level:3,title:"数据文件位置",slug:"数据文件位置",normalizedTitle:"数据文件位置",charIndex:368},{level:3,title:"连接数据库",slug:"连接数据库",normalizedTitle:"连接数据库",charIndex:649},{level:4,title:"options 说明",slug:"options-说明",normalizedTitle:"options 说明",charIndex:1218},{level:3,title:"简单操作：增删改查",slug:"简单操作-增删改查",normalizedTitle:"简单操作：增删改查",charIndex:1840},{level:3,title:"图形化数据（Navicat）",slug:"图形化数据-navicat",normalizedTitle:"图形化数据（navicat）",charIndex:4239},{level:3,title:"更多语法",slug:"更多语法",normalizedTitle:"更多语法",charIndex:4315},{level:3,title:"Storage对象API文档",slug:"storage对象api文档",normalizedTitle:"storage对象api文档",charIndex:4324},{level:3,title:"better-sqlite3",slug:"better-sqlite3",normalizedTitle:"better-sqlite3",charIndex:331}],headersStr:"基础 特点 安装 数据文件位置 连接数据库 options 说明 简单操作：增删改查 图形化数据（Navicat） 更多语法 Storage对象API文档 better-sqlite3",content:"> ee-core: v1.2.8\n\n支持sqlite数据库\n\n\n# 基础\n\n\n# 特点\n\n * 大数据量: 0-1024GB(单库)\n * 高性能\n * 类mysql语法\n\n\n# 安装\n\n准备：需要python环境 (macos安装Python)\n\n# 安装构建工具（新版本自带，旧版本ee < 2.1.6需安装）\nnpm i electron-rebuild  -D\n\n# （必须）重新构建适合当前操作系统的sqlite\nnpm run re-sqlite\n\n\n注：ee < 2.1.6的版本需要在package.json的 scripts 对象加入\n\n\"scripts\": {\n  \"re-sqlite\": \"electron-rebuild -f -w better-sqlite3\"\n}\n\n\n安装失败？查看：常见问题\n\n\n# 数据文件位置\n\n打包前：项目根目录\n\nelectron-egg/data/xxx.db\n\n\n打包后：软件缓存目录\n\n# windows (例子)\nC:\\Users\\Administrator\\AppData\\Roaming\\软件名(如：ee)\\data\\xxx.db\n\n# macOS (例子)\nUsers/apple/Library/Application Support/软件名(如：ee)/data/xxx.db\n\n# Linux (例子)\n$XDG_CONFIG_HOME or ~/.config/软件名(如：ee)/data/xxx.db\n\n\n\n# 连接数据库\n\n'use strict';\n\nconst { Service } = require('ee-core');\n// 框架提供的数据库对象\n// ee-core:v2.0.3\nconst Storage = require('ee-core/storage'); \nconst _ = require('lodash');\n\n/**\n * 数据存储\n * @class\n */\nclass StorageService extends Service {\n\n  constructor (ctx) {\n    super(ctx);\n    \n    // sqlite数据库\n    let sqliteOptions = {\n      driver: 'sqlite',\n      default: {\n        timeout: 6000,\n        verbose: console.log // 打印sql语法\n      }\n    }\n    this.demoSqliteDB = Storage.JsonDB.connection('sqlite-demo.db', sqliteOptions);\n  }\n \n}\n\nmodule.exports = StorageService;\n\n\n# options 说明\n\nlet sqliteOptions = {\n  driver: 'sqlite', // 驱动：lowdb、sqlite\n  default: {\n    timeout: 6000,\n    verbose: console.log // 打印sql语法\n  }\n}\n\n# default对象\n\ndefault.readonly: false\n以只读模式打开数据库连接 (默认: false).\n\ndefault.fileMustExist: false\n如果数据库不存在, 将引发错误，而不是创建新文件. 对于内存中、临时或只读数据库连接，忽略此选项 (默认: false).\n\ndefault.timeout: 5000\n在锁定的数据库上执行查询时，在引发 SQLITE_BUSY 错误之前等待的毫秒数 (默认: 5000).\n\ndefault.verbose: null\n提供一个函数，该函数使用数据库连接执行的每个SQL字符串进行调用 (默认: null).\n\ndefault.nativeBinding: \n如果您使用的是移动、转换或连接JS文件的复杂构建系统, better-sqlite3 可能无法定位其本机 C++ addon (better_sqlite3.node). \n如果你遇到这样的错误, 您可以通过使用此选项提供 better_sqlite3.node (相对于当前工作目录).\n\n\n\n# 简单操作：增删改查\n\n * 检查表是否存在，如果不存在则创建\n\n/*\n* 检查并创建表 (sqlite)\n*/\nasync checkAndCreateTableSqlite(tableName = '') {\n  if (_.isEmpty(tableName)) {\n    throw new Error(`table name is required`);\n  }\n  // 检查表是否存在\n  const userTable = this.demoSqliteDB.db.prepare('SELECT * FROM sqlite_master WHERE type=? AND name = ?');\n  const result = userTable.get('table', tableName);\n  //console.log('result:', result);\n  if (result) {\n    return;\n  }\n  \n  // 创建表\n  const create_table_user =\n    `CREATE TABLE ${tableName}\n    (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      name CHAR(50) NOT NULL,\n      age INT\n    );`\n  this.demoSqliteDB.db.exec(create_table_user);\n}\n\n\n * 增加数据\n\n/*\n* 增 Test data (sqlite)\n*/\nasync addTestDataSqlite(data) {\n  //console.log(\"add data:\", data);\n\n  let table = 'user';\n  await this.checkAndCreateTableSqlite(table);\n  \n  const insert = this.demoSqliteDB.db.prepare(`INSERT INTO ${table} (name, age) VALUES (@name, @age)`);\n  insert.run(data);\n  \n  return true;\n}\n\n\n * 删除数据\n\n/*\n* 删 Test data (sqlite)\n*/\nasync delTestDataSqlite(name = '') {\n  //console.log(\"delete name:\", name);\n\n  let table = 'user';\n  await this.checkAndCreateTableSqlite(table);\n  \n  const delUser = this.demoSqliteDB.db.prepare(`DELETE FROM ${table} WHERE name = ?`);\n  delUser.run(name);\n  \n  return true;\n}\n\n\n * 修改数据\n\n/*\n* 改 Test data (sqlite)\n*/\nasync updateTestDataSqlite(name= '', age = 0) {\n  //console.log(\"update :\", {name, age});\n  \n  let table = 'user';\n  await this.checkAndCreateTableSqlite(table);\n  \n  const updateUser = this.demoSqliteDB.db.prepare(`UPDATE ${table} SET age = ? WHERE name = ?`);\n  updateUser.run(age, name);\n  \n  return true;\n} \n\n\n * 查数据\n\n/*\n* 查 Test data (sqlite)\n*/\nasync getTestDataSqlite(age = 0) {\n  //console.log(\"select :\", {age});\n  \n  let table = 'user';\n  await this.checkAndCreateTableSqlite(table);\n  \n  const selectUser = this.demoSqliteDB.db.prepare(`SELECT * FROM ${table} WHERE age = @age`);\n  const users = selectUser.all({age: age});\n  //console.log(\"select users:\", users);\n  return users;\n}  \n  \n/*\n* all Test data (sqlite)\n*/\nasync getAllTestDataSqlite() {\n   //console.log(\"select all user\");\n\n   let table = 'user';\n   await this.checkAndCreateTableSqlite(table);\n\n   const selectAllUser = this.demoSqliteDB.db.prepare(`SELECT * FROM ${table} `);\n   const allUser =  selectAllUser.all();\n   //console.log(\"select allUser:\", allUser);\n   return allUser;\n} \n\n\n\n# 图形化数据（Navicat）\n\n * 连接本地sqlite-demo.db文件\n\n\n\n * 表数据\n\n\n\n * Mac显示资源库Library\n\n\n# 更多语法\n\n\n# Storage对象API文档\n\nStorage文档\n\n\n# better-sqlite3\n\nbetter-sqlite3 文档",normalizedContent:"> ee-core: v1.2.8\n\n支持sqlite数据库\n\n\n# 基础\n\n\n# 特点\n\n * 大数据量: 0-1024gb(单库)\n * 高性能\n * 类mysql语法\n\n\n# 安装\n\n准备：需要python环境 (macos安装python)\n\n# 安装构建工具（新版本自带，旧版本ee < 2.1.6需安装）\nnpm i electron-rebuild  -d\n\n# （必须）重新构建适合当前操作系统的sqlite\nnpm run re-sqlite\n\n\n注：ee < 2.1.6的版本需要在package.json的 scripts 对象加入\n\n\"scripts\": {\n  \"re-sqlite\": \"electron-rebuild -f -w better-sqlite3\"\n}\n\n\n安装失败？查看：常见问题\n\n\n# 数据文件位置\n\n打包前：项目根目录\n\nelectron-egg/data/xxx.db\n\n\n打包后：软件缓存目录\n\n# windows (例子)\nc:\\users\\administrator\\appdata\\roaming\\软件名(如：ee)\\data\\xxx.db\n\n# macos (例子)\nusers/apple/library/application support/软件名(如：ee)/data/xxx.db\n\n# linux (例子)\n$xdg_config_home or ~/.config/软件名(如：ee)/data/xxx.db\n\n\n\n# 连接数据库\n\n'use strict';\n\nconst { service } = require('ee-core');\n// 框架提供的数据库对象\n// ee-core:v2.0.3\nconst storage = require('ee-core/storage'); \nconst _ = require('lodash');\n\n/**\n * 数据存储\n * @class\n */\nclass storageservice extends service {\n\n  constructor (ctx) {\n    super(ctx);\n    \n    // sqlite数据库\n    let sqliteoptions = {\n      driver: 'sqlite',\n      default: {\n        timeout: 6000,\n        verbose: console.log // 打印sql语法\n      }\n    }\n    this.demosqlitedb = storage.jsondb.connection('sqlite-demo.db', sqliteoptions);\n  }\n \n}\n\nmodule.exports = storageservice;\n\n\n# options 说明\n\nlet sqliteoptions = {\n  driver: 'sqlite', // 驱动：lowdb、sqlite\n  default: {\n    timeout: 6000,\n    verbose: console.log // 打印sql语法\n  }\n}\n\n# default对象\n\ndefault.readonly: false\n以只读模式打开数据库连接 (默认: false).\n\ndefault.filemustexist: false\n如果数据库不存在, 将引发错误，而不是创建新文件. 对于内存中、临时或只读数据库连接，忽略此选项 (默认: false).\n\ndefault.timeout: 5000\n在锁定的数据库上执行查询时，在引发 sqlite_busy 错误之前等待的毫秒数 (默认: 5000).\n\ndefault.verbose: null\n提供一个函数，该函数使用数据库连接执行的每个sql字符串进行调用 (默认: null).\n\ndefault.nativebinding: \n如果您使用的是移动、转换或连接js文件的复杂构建系统, better-sqlite3 可能无法定位其本机 c++ addon (better_sqlite3.node). \n如果你遇到这样的错误, 您可以通过使用此选项提供 better_sqlite3.node (相对于当前工作目录).\n\n\n\n# 简单操作：增删改查\n\n * 检查表是否存在，如果不存在则创建\n\n/*\n* 检查并创建表 (sqlite)\n*/\nasync checkandcreatetablesqlite(tablename = '') {\n  if (_.isempty(tablename)) {\n    throw new error(`table name is required`);\n  }\n  // 检查表是否存在\n  const usertable = this.demosqlitedb.db.prepare('select * from sqlite_master where type=? and name = ?');\n  const result = usertable.get('table', tablename);\n  //console.log('result:', result);\n  if (result) {\n    return;\n  }\n  \n  // 创建表\n  const create_table_user =\n    `create table ${tablename}\n    (\n      id integer primary key autoincrement,\n      name char(50) not null,\n      age int\n    );`\n  this.demosqlitedb.db.exec(create_table_user);\n}\n\n\n * 增加数据\n\n/*\n* 增 test data (sqlite)\n*/\nasync addtestdatasqlite(data) {\n  //console.log(\"add data:\", data);\n\n  let table = 'user';\n  await this.checkandcreatetablesqlite(table);\n  \n  const insert = this.demosqlitedb.db.prepare(`insert into ${table} (name, age) values (@name, @age)`);\n  insert.run(data);\n  \n  return true;\n}\n\n\n * 删除数据\n\n/*\n* 删 test data (sqlite)\n*/\nasync deltestdatasqlite(name = '') {\n  //console.log(\"delete name:\", name);\n\n  let table = 'user';\n  await this.checkandcreatetablesqlite(table);\n  \n  const deluser = this.demosqlitedb.db.prepare(`delete from ${table} where name = ?`);\n  deluser.run(name);\n  \n  return true;\n}\n\n\n * 修改数据\n\n/*\n* 改 test data (sqlite)\n*/\nasync updatetestdatasqlite(name= '', age = 0) {\n  //console.log(\"update :\", {name, age});\n  \n  let table = 'user';\n  await this.checkandcreatetablesqlite(table);\n  \n  const updateuser = this.demosqlitedb.db.prepare(`update ${table} set age = ? where name = ?`);\n  updateuser.run(age, name);\n  \n  return true;\n} \n\n\n * 查数据\n\n/*\n* 查 test data (sqlite)\n*/\nasync gettestdatasqlite(age = 0) {\n  //console.log(\"select :\", {age});\n  \n  let table = 'user';\n  await this.checkandcreatetablesqlite(table);\n  \n  const selectuser = this.demosqlitedb.db.prepare(`select * from ${table} where age = @age`);\n  const users = selectuser.all({age: age});\n  //console.log(\"select users:\", users);\n  return users;\n}  \n  \n/*\n* all test data (sqlite)\n*/\nasync getalltestdatasqlite() {\n   //console.log(\"select all user\");\n\n   let table = 'user';\n   await this.checkandcreatetablesqlite(table);\n\n   const selectalluser = this.demosqlitedb.db.prepare(`select * from ${table} `);\n   const alluser =  selectalluser.all();\n   //console.log(\"select alluser:\", alluser);\n   return alluser;\n} \n\n\n\n# 图形化数据（navicat）\n\n * 连接本地sqlite-demo.db文件\n\n\n\n * 表数据\n\n\n\n * mac显示资源库library\n\n\n# 更多语法\n\n\n# storage对象api文档\n\nstorage文档\n\n\n# better-sqlite3\n\nbetter-sqlite3 文档",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"日志",frontmatter:{title:"日志",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/508c87/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/072.%E6%97%A5%E5%BF%97.html",relativePath:"02.v2/020.基础功能/072.日志.md",key:"v-01aae38e",path:"/pages/508c87/",headers:[{level:3,title:"记录日志",slug:"记录日志",normalizedTitle:"记录日志",charIndex:2},{level:3,title:"日志位置",slug:"日志位置",normalizedTitle:"日志位置",charIndex:394},{level:3,title:"打包前：项目根目录",slug:"打包前-项目根目录",normalizedTitle:"打包前：项目根目录",charIndex:403},{level:3,title:"打包后：软件缓存目录",slug:"打包后-软件缓存目录",normalizedTitle:"打包后：软件缓存目录",charIndex:437},{level:3,title:"自定义日志位置",slug:"自定义日志位置",normalizedTitle:"自定义日志位置",charIndex:651},{level:3,title:"json格式的日志文件",slug:"json格式的日志文件",normalizedTitle:"json格式的日志文件",charIndex:760}],headersStr:"记录日志 日志位置 打包前：项目根目录 打包后：软件缓存目录 自定义日志位置 json格式的日志文件",content:"# 记录日志\n\n> ee-core: v2.0.1\n\nconst Log = require('ee-core/log');\n\nLog.info()\nLog.error()\nLog.debug()\nLog.warn()\nLog.logger.info()\nLog.logger.error()\nLog.logger.debug()\nLog.logger.warn()\n\n# 高级语法，占位符\n%s：字符串\n%d：整数\n%i：整数\n%f：浮点数\n%o：obj对象\n%O：obj对象\n%c：CSS样式\n\n\n# 使用全局app对象的logger\n\nthis.app.logger.info()\nthis.app.logger.error()\nthis.app.logger.debug()\nthis.app.logger.warn()\nthis.app.logger.write()\n\n\n\n# 日志位置\n\n\n# 打包前：项目根目录\n\nelectron-egg/logs\n\n\n\n# 打包后：软件缓存目录\n\n# windows (例子)\nC:\\Users\\Administrator\\AppData\\Roaming\\软件名(如：ee)\\logs\n\n# macOS (例子)\nUsers/apple/Library/Application Support/软件名(如：ee)/logs\n\n# Linux (例子)\n$XDG_CONFIG_HOME or ~/.config/软件名(如：ee)/logs\n\n\n\n# 自定义日志位置\n\n# 编辑config.default.js文件\nconfig.logger = {\n  dir: path.join(appInfo.execDir, 'logs'), // 日志目录\n}\n\n\n\n# json格式的日志文件\n\n# 编辑config.default.js文件\nconfig.logger = {\n  outputJSON: true,\n}\n",normalizedContent:"# 记录日志\n\n> ee-core: v2.0.1\n\nconst log = require('ee-core/log');\n\nlog.info()\nlog.error()\nlog.debug()\nlog.warn()\nlog.logger.info()\nlog.logger.error()\nlog.logger.debug()\nlog.logger.warn()\n\n# 高级语法，占位符\n%s：字符串\n%d：整数\n%i：整数\n%f：浮点数\n%o：obj对象\n%o：obj对象\n%c：css样式\n\n\n# 使用全局app对象的logger\n\nthis.app.logger.info()\nthis.app.logger.error()\nthis.app.logger.debug()\nthis.app.logger.warn()\nthis.app.logger.write()\n\n\n\n# 日志位置\n\n\n# 打包前：项目根目录\n\nelectron-egg/logs\n\n\n\n# 打包后：软件缓存目录\n\n# windows (例子)\nc:\\users\\administrator\\appdata\\roaming\\软件名(如：ee)\\logs\n\n# macos (例子)\nusers/apple/library/application support/软件名(如：ee)/logs\n\n# linux (例子)\n$xdg_config_home or ~/.config/软件名(如：ee)/logs\n\n\n\n# 自定义日志位置\n\n# 编辑config.default.js文件\nconfig.logger = {\n  dir: path.join(appinfo.execdir, 'logs'), // 日志目录\n}\n\n\n\n# json格式的日志文件\n\n# 编辑config.default.js文件\nconfig.logger = {\n  outputjson: true,\n}\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"额外资源目录",frontmatter:{title:"额外资源目录",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/45e36e/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/074.%E9%A2%9D%E5%A4%96%E8%B5%84%E6%BA%90%E7%9B%AE%E5%BD%95.html",relativePath:"02.v2/020.基础功能/074.额外资源目录.md",key:"v-02bf0215",path:"/pages/45e36e/",headersStr:null,content:"额外资源位置： 打包前：项目根目录\n\nelectron-egg/build/extraResources\n\n\n打包后：软件安装目录\n\n# windows (例子)\nD:\\test\\ee\\resources\\extraResources\n\n# macOS (例子)\n/Applications/ee.app/Contents/Resources/extraResources\n\n# Linux (例子)\n...\n",normalizedContent:"额外资源位置： 打包前：项目根目录\n\nelectron-egg/build/extraresources\n\n\n打包后：软件安装目录\n\n# windows (例子)\nd:\\test\\ee\\resources\\extraresources\n\n# macos (例子)\n/applications/ee.app/contents/resources/extraresources\n\n# linux (例子)\n...\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"调试",frontmatter:{title:"调试",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/a9b338/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/076.%E8%B0%83%E8%AF%95.html",relativePath:"02.v2/020.基础功能/076.调试.md",key:"v-5b248a07",path:"/pages/a9b338/",headers:[{level:2,title:"1.渲染进程",slug:"_1-渲染进程",normalizedTitle:"1.渲染进程",charIndex:2},{level:2,title:"2.主进程",slug:"_2-主进程",normalizedTitle:"2.主进程",charIndex:84}],headersStr:"1.渲染进程 2.主进程",content:'# 1.渲染进程\n\n 1. 开发者工具栏\n\n在启动的应用程序界面，菜单中找到 view -> toggle developer tool\n点击打开：控制台工具\n\n\n# 2.主进程\n\n 1. 使用VSCode调试\n\n菜单栏点击运行->添加配置->Node.js\n\n{\n  "version": "0.2.0",\n  "configurations": [\n    {\n      "name": "EE框架-local模式-本地",\n      "type": "node",\n      "request": "launch",\n      "cwd": "${workspaceFolder}",\n      "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron",\n      "windows": {\n        "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron.cmd"\n      },\n      "args": [\n        ".",\n        "--env=local"\n      ]\n    }\n  ]\n}\n\n\n运行调试',normalizedContent:'# 1.渲染进程\n\n 1. 开发者工具栏\n\n在启动的应用程序界面，菜单中找到 view -> toggle developer tool\n点击打开：控制台工具\n\n\n# 2.主进程\n\n 1. 使用vscode调试\n\n菜单栏点击运行->添加配置->node.js\n\n{\n  "version": "0.2.0",\n  "configurations": [\n    {\n      "name": "ee框架-local模式-本地",\n      "type": "node",\n      "request": "launch",\n      "cwd": "${workspacefolder}",\n      "runtimeexecutable": "${workspacefolder}/node_modules/.bin/electron",\n      "windows": {\n        "runtimeexecutable": "${workspacefolder}/node_modules/.bin/electron.cmd"\n      },\n      "args": [\n        ".",\n        "--env=local"\n      ]\n    }\n  ]\n}\n\n\n运行调试',charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"脚本工具",frontmatter:{title:"脚本工具",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/04a0ff/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/078.%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7.html",relativePath:"02.v2/020.基础功能/078.脚本工具.md",key:"v-0d882400",path:"/pages/04a0ff/",headers:[{level:3,title:"位置：",slug:"位置",normalizedTitle:"位置：",charIndex:2},{level:3,title:"命令列表",slug:"命令列表",normalizedTitle:"命令列表",charIndex:45},{level:3,title:"rd",slug:"rd",normalizedTitle:"rd",charIndex:54},{level:3,title:"encrypt",slug:"encrypt",normalizedTitle:"encrypt",charIndex:112},{level:3,title:"compress（废弃）",slug:"compress-废弃",normalizedTitle:"compress（废弃）",charIndex:184},{level:3,title:"restore（废弃）",slug:"restore-废弃",normalizedTitle:"restore（废弃）",charIndex:215}],headersStr:"位置： 命令列表 rd encrypt compress（废弃） restore（废弃）",content:"# 位置：\n\n./node_modules/ee-core/bin/tools\n\n\n\n# 命令列表\n\n\n# rd\n\n说明：移动前端资源\n参数：\n--dist_dir 指定目录，默认 ./frontend/dist\n\n\n\n# encrypt\n\n说明：代码加密\n参数：--type=\n● bytecode  字节码加密\n● confusion  压缩混淆加密 \n\n\n\n# compress（废弃）\n\n说明：混淆压缩项目代码\n\n\n\n# restore（废弃）\n\n说明：还原项目代码\n",normalizedContent:"# 位置：\n\n./node_modules/ee-core/bin/tools\n\n\n\n# 命令列表\n\n\n# rd\n\n说明：移动前端资源\n参数：\n--dist_dir 指定目录，默认 ./frontend/dist\n\n\n\n# encrypt\n\n说明：代码加密\n参数：--type=\n● bytecode  字节码加密\n● confusion  压缩混淆加密 \n\n\n\n# compress（废弃）\n\n说明：混淆压缩项目代码\n\n\n\n# restore（废弃）\n\n说明：还原项目代码\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"DLL使用",frontmatter:{title:"DLL使用",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/e85f92/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/080.%E5%85%B6%E5%AE%83/010.dll%E4%BD%BF%E7%94%A8.html",relativePath:"02.v2/020.基础功能/080.其它/010.dll使用.md",key:"v-3f395710",path:"/pages/e85f92/",headers:[{level:3,title:"准备环境",slug:"准备环境",normalizedTitle:"准备环境",charIndex:80},{level:3,title:"测试代码",slug:"测试代码",normalizedTitle:"测试代码",charIndex:535},{level:3,title:"测试使用的dll文件位置：",slug:"测试使用的dll文件位置",normalizedTitle:"测试使用的dll文件位置：",charIndex:2202}],headersStr:"准备环境 测试代码 测试使用的dll文件位置：",content:"Dll文件是动态链接库，桌面软件中经常需要使用。\n\n因为该库的调用，涉及许多工具的安装，因此不集成到框架中；但本文提供完整的安装使用说明，供大家参考。\n\n\n# 准备环境\n\n# 编译工具\nnpm i -g node-gyp\n\n# C++构建工具\n1. 管理员模式打开PowerShell\n2. npm --vs2015 i -g --production windows-build-tools\n   或者 npm i -g --production windows-build-tools \n   \n# 外部接口调用库\n1. npm install ref-napi         // 基本类型\n2. npm install ref-array-napi   // 数组类型\n3. npm install ref-struct-napi  // 结构体类型\n4. npm install ffi-napi         // 连接c代码和js代码\n\n# 编译 ref-napi 库\n1. cd ./node_modules/ref-napi\n2. node-gyp configure  // 配置\n3. node-gyp build\t\t\t // 编译\n\n\n\n# 测试代码\n\nconst ffi = require('ffi-napi');\nvar ref = require('ref-napi');\nvar ArrayType = require('ref-array-napi');\n    \n/**\n * exec dll file\n */\nasync execDll () {\n  // 资源路径\n  let dllPath = '';\n  const dllFile = 'myDllDemo.dll';\n  if (electronApp.isPackaged) {\n    // 打包后  \n    dllPath = path.join(this.app.config.execDir, \"resources\", \"extraResources\", \"dll\", dllFile);\n  } else {\n    // 打包前\n    dllPath = path.join(this.app.config.execDir, \"build\", \"extraResources\", \"dll\", dllFile);\n  }\n\n  // 映射到C语言 int数组类型\n  var IntArray = ArrayType(ref.types.int);\n\n  // 加载 DLL文件,无需写扩展名,将DLL中的函数映射成JS方法\n  const MyDellDemo = new ffi.Library(dllPath, {\n    // 方法名必须与C函数名一致\n    add: [\n      'int', // 对应 C函数返回类型\n      ['int', 'int'] // C函数参数列表\n    ],\n    // 使用 ffi中内置类型的简写类型\n    addPtr: ['void', ['int', 'int', 'int*']],\n    // IntArray 是上面通过 ArrayType 构建出来的类型\n    initArray: ['void', [IntArray, 'int']]\n  });\n\n  // 调用add 方法\n  const res = MyDellDemo.add(1, 2);\n  console.log(`add method result of 1 + 2 is: ` + res);\n\n  // 调用addPtr 方法\n  // 使用Buffer类在C代码和JS代码之间实现了内存共享，让Buffer成为了C语言当中的指针。\n  // C函数使用指针操作函数外部的内存，所以首先需要 分配一个int类型的内存空间 第一个参数为 C语言数据类型，第二个参数为 默认值\n  var intBuf = ref.alloc(ref.types.int, 100);\n  console.log('addPtr 调用前数据>>', ref.deref(intBuf)); //获取指向的内容\n  MyDellDemo.addPtr(2, 2, intBuf); // 调用函数，传递指针\n  console.log('addPtr 调用后数据>>', ref.deref(intBuf));\n\n  // 调用initArray 方法\n  // IntArray 是前面使用ref-napi 和 ref-array-napi 库创建的数据类型,数组的长度为 8\n  // 这里一定要分配内存空间，否则 函数内的指针无法操作内存\n  let myArray = new IntArray(8);\n  MyDellDemo.initArray(myArray, 8);\n  console.log('初始化数组执行结果:');\n  for (var i = 0; i < myArray.length; i++) {\n    console.log(myArray[i]);\n  }\n\n  return true;\n} \n\n\n\n# 测试使用的dll文件位置：\n\n./build/extraResources/dll/myDllDemo.dll\n\n\n注：引用 https://blog.csdn.net/paopao_wu/article/details/107507225",normalizedContent:"dll文件是动态链接库，桌面软件中经常需要使用。\n\n因为该库的调用，涉及许多工具的安装，因此不集成到框架中；但本文提供完整的安装使用说明，供大家参考。\n\n\n# 准备环境\n\n# 编译工具\nnpm i -g node-gyp\n\n# c++构建工具\n1. 管理员模式打开powershell\n2. npm --vs2015 i -g --production windows-build-tools\n   或者 npm i -g --production windows-build-tools \n   \n# 外部接口调用库\n1. npm install ref-napi         // 基本类型\n2. npm install ref-array-napi   // 数组类型\n3. npm install ref-struct-napi  // 结构体类型\n4. npm install ffi-napi         // 连接c代码和js代码\n\n# 编译 ref-napi 库\n1. cd ./node_modules/ref-napi\n2. node-gyp configure  // 配置\n3. node-gyp build\t\t\t // 编译\n\n\n\n# 测试代码\n\nconst ffi = require('ffi-napi');\nvar ref = require('ref-napi');\nvar arraytype = require('ref-array-napi');\n    \n/**\n * exec dll file\n */\nasync execdll () {\n  // 资源路径\n  let dllpath = '';\n  const dllfile = 'mydlldemo.dll';\n  if (electronapp.ispackaged) {\n    // 打包后  \n    dllpath = path.join(this.app.config.execdir, \"resources\", \"extraresources\", \"dll\", dllfile);\n  } else {\n    // 打包前\n    dllpath = path.join(this.app.config.execdir, \"build\", \"extraresources\", \"dll\", dllfile);\n  }\n\n  // 映射到c语言 int数组类型\n  var intarray = arraytype(ref.types.int);\n\n  // 加载 dll文件,无需写扩展名,将dll中的函数映射成js方法\n  const mydelldemo = new ffi.library(dllpath, {\n    // 方法名必须与c函数名一致\n    add: [\n      'int', // 对应 c函数返回类型\n      ['int', 'int'] // c函数参数列表\n    ],\n    // 使用 ffi中内置类型的简写类型\n    addptr: ['void', ['int', 'int', 'int*']],\n    // intarray 是上面通过 arraytype 构建出来的类型\n    initarray: ['void', [intarray, 'int']]\n  });\n\n  // 调用add 方法\n  const res = mydelldemo.add(1, 2);\n  console.log(`add method result of 1 + 2 is: ` + res);\n\n  // 调用addptr 方法\n  // 使用buffer类在c代码和js代码之间实现了内存共享，让buffer成为了c语言当中的指针。\n  // c函数使用指针操作函数外部的内存，所以首先需要 分配一个int类型的内存空间 第一个参数为 c语言数据类型，第二个参数为 默认值\n  var intbuf = ref.alloc(ref.types.int, 100);\n  console.log('addptr 调用前数据>>', ref.deref(intbuf)); //获取指向的内容\n  mydelldemo.addptr(2, 2, intbuf); // 调用函数，传递指针\n  console.log('addptr 调用后数据>>', ref.deref(intbuf));\n\n  // 调用initarray 方法\n  // intarray 是前面使用ref-napi 和 ref-array-napi 库创建的数据类型,数组的长度为 8\n  // 这里一定要分配内存空间，否则 函数内的指针无法操作内存\n  let myarray = new intarray(8);\n  mydelldemo.initarray(myarray, 8);\n  console.log('初始化数组执行结果:');\n  for (var i = 0; i < myarray.length; i++) {\n    console.log(myarray[i]);\n  }\n\n  return true;\n} \n\n\n\n# 测试使用的dll文件位置：\n\n./build/extraresources/dll/mydlldemo.dll\n\n\n注：引用 https://blog.csdn.net/paopao_wu/article/details/107507225",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"调用第三方程序",frontmatter:{title:"调用第三方程序",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/b4410e/",article:!1},regularPath:"/02.v2/020.%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/080.%E5%85%B6%E5%AE%83/020.%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E7%A8%8B%E5%BA%8F.html",relativePath:"02.v2/020.基础功能/080.其它/020.调用第三方程序.md",key:"v-520fcb33",path:"/pages/b4410e/",headersStr:null,content:'在项目中，通常需要调用（打开）第三方软件，如exe、bash脚本、dll库等；\n\n框架提供了资源目录：./build/extraResources\n\n原理：\n\n * 生成软件时，将 **资源目录 **一起打进软件安装包\n * 软件安装后，将资源解压到：软件安装位置/resources/extraResources\n\n资源目录：\n\n ./build/extraResources\n\n\n使用：\n\n# 资源路径不同\nlet softwarePath = \'\';\n# 旧语法\nif (electronApp.isPackaged) {\n  // 打包后\n  // execDir为 应用程序 exe\\dmg\\dep\\类库 等，所在目录\n  softwarePath = path.join(this.app.config.execDir, "resources", "extraResources", softName);\n} else {\n  // 打包前\n  softwarePath = path.join(this.app.config.execDir, "build", "extraResources", softName);\n}\n\n# 新语法，getExtraResourcesDir()会自动判断当前是打包前，还是打包后\nsoftwarePath = path.join(Utils.getExtraResourcesDir(), softName);\n\n\n# demo已经在项目中，请查看\n/**\n * 调用其它程序\n */\nopenSoftware (softName) {\n  .......\n}\n\n\n举例：demo中powershell.exe 软件位置\n\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\n# 把它放到 ./build/extraResources 资源目录中，并测试\n',normalizedContent:'在项目中，通常需要调用（打开）第三方软件，如exe、bash脚本、dll库等；\n\n框架提供了资源目录：./build/extraresources\n\n原理：\n\n * 生成软件时，将 **资源目录 **一起打进软件安装包\n * 软件安装后，将资源解压到：软件安装位置/resources/extraresources\n\n资源目录：\n\n ./build/extraresources\n\n\n使用：\n\n# 资源路径不同\nlet softwarepath = \'\';\n# 旧语法\nif (electronapp.ispackaged) {\n  // 打包后\n  // execdir为 应用程序 exe\\dmg\\dep\\类库 等，所在目录\n  softwarepath = path.join(this.app.config.execdir, "resources", "extraresources", softname);\n} else {\n  // 打包前\n  softwarepath = path.join(this.app.config.execdir, "build", "extraresources", softname);\n}\n\n# 新语法，getextraresourcesdir()会自动判断当前是打包前，还是打包后\nsoftwarepath = path.join(utils.getextraresourcesdir(), softname);\n\n\n# demo已经在项目中，请查看\n/**\n * 调用其它程序\n */\nopensoftware (softname) {\n  .......\n}\n\n\n举例：demo中powershell.exe 软件位置\n\nc:\\windows\\system32\\windowspowershell\\v1.0\\powershell.exe\n\n# 把它放到 ./build/extraresources 资源目录中，并测试\n',charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"构建",frontmatter:{title:"构建",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/95a09b/",article:!1},regularPath:"/02.v2/030.%E7%94%9F%E6%88%90%E8%BD%AF%E4%BB%B6/010.%E6%9E%84%E5%BB%BA.html",relativePath:"02.v2/030.生成软件/010.构建.md",key:"v-a821d174",path:"/pages/95a09b/",headers:[{level:2,title:"1. 生成exe、dmg、deb可执行文件",slug:"_1-生成exe、dmg、deb可执行文件",normalizedTitle:"1. 生成exe、dmg、deb可执行文件",charIndex:2},{level:3,title:"准备",slug:"准备",normalizedTitle:"准备",charIndex:28},{level:3,title:"第零步：预发布模式，测试一下功能是否正常",slug:"第零步-预发布模式-测试一下功能是否正常",normalizedTitle:"第零步：预发布模式，测试一下功能是否正常",charIndex:140},{level:3,title:"第一步：移动前端资源文件",slug:"第一步-移动前端资源文件",normalizedTitle:"第一步：移动前端资源文件",charIndex:191},{level:3,title:"第二步：代码加密 （必看）",slug:"第二步-代码加密-必看",normalizedTitle:"第二步：代码加密 （必看）",charIndex:366},{level:3,title:"第三步：执行打包命令",slug:"第三步-执行打包命令",normalizedTitle:"第三步：执行打包命令",charIndex:635},{level:3,title:"第四步：找到程序",slug:"第四步-找到程序",normalizedTitle:"第四步：找到程序",charIndex:1461},{level:3,title:"2. 其它修改",slug:"_2-其它修改",normalizedTitle:"2. 其它修改",charIndex:1550}],headersStr:"1. 生成exe、dmg、deb可执行文件 准备 第零步：预发布模式，测试一下功能是否正常 第一步：移动前端资源文件 第二步：代码加密 （必看） 第三步：执行打包命令 第四步：找到程序 2. 其它修改",content:"# 1. 生成exe、dmg、deb可执行文件\n\n\n# 准备\n\n * 在对应操作系统下打包，比如：在windows下构建 xxx.exe，在MacOS下，构建xxx.dmg\n * window区分32和64位系统，如果使用bytecode加密功能，则不兼容。反之，兼容。\n\n\n# 第零步：预发布模式，测试一下功能是否正常\n\n# prod环境\nnpm run start \n\n\n\n# 第一步：移动前端资源文件\n\n# 操作如下\n1：构建资源，如vue前端项目中npm run build\n\n2：根目录：npm run rd\n\n# 解释说明\nrd命令会把 frontend/dist 复制到 /public/dist ; 服务最终加载的是 /public/dist前端资源。\nfrontend目录代码不会被打包，防止源码泄露。\n\n\n\n# 第二步：代码加密 （必看）\n\n * 如果未使用该功能，请不要过滤源代码，查看操作：代码加密\n * 如果执行过加密，会生成加密代码：/public/electron ，框架优先读取它，源代码则不生效。\n\n开发阶段如果发现编写的代码不生效，请记得删除加密文件。\n\n> ee-core: v1.2.10\n\nnpm run encrypt\n\n# 解释说明\nencrypt命令会把 electron/ 复制到 /public/electron ; 然后对其加密。\nelectron目录代码不会被打包，防止源码泄露。\n\n\n详细说明：代码加密\n\n\n# 第三步：执行打包命令\n\n注1：请尽量让项目名唯一（electron-egg/package.json中name属性），防止和别人软件名称冲突 注2：打包失败，请查看常见问题。\n\n# 打包时，package.json中build.productName包名不要为中文，避免一些未知异常\n\n# 准备，设置国内镜像\nnpm config set electron_builder_binaries_mirror=https://registry.npmmirror.com/-/binary/electron-builder-binaries/\n\n# 打包 （windows版）\nnpm run build-w (32位)\nnpm run build-w-64 (64位)\nnpm run build-w-arm64 (arm64)\n\n# 打包 （windows 免安装版）\n# ee > v2.2.1\nnpm run build-wz (32位)\nnpm run build-wz-64 (64位)\nnpm run build-wz-arm64 (arm64)\n\n# 打包 （mac版）\nnpm run build-m\nnpm run build-m-arm64 (m1芯片架构)\n\n# 打包 （linux版）\n# ee > v2.2.1\nnpm run build-l (32位 deb包)\nnpm run build-l-64 (64位 deb包)\nnpm run build-l-arm64 (64位 deb包 arm64)\nnpm run build-l-armv7l (64位 deb包 armv7l)\nnpm run build-lr-64 (64位 rpm包)\nnpm run build-lp-64 (64位 pacman包)\n\n\n注释：如果你想了解更多平台打包功能，请参照：https://www.electron.build/\n\n\n# 第四步：找到程序\n\n目录：electron-egg/out\n安装包：electron-egg/out/electron-egg-windows-2.0.3.exe  \n\n\n\n# 2. 其它修改\n\n 1. 修改应用名称\n\n# 修改 ./package.json 中属性\nname：项目名称（英文）\nproductName: 可执行程序名称（英文）\nappId：软件id\nshortcutName：桌面快捷方式名称\n\n# 软件运行时头部名称\n# 修改 ./electron/config/config.default.js\nwindowsOption.title=  'ee框架'\n# 前端html的title标签也会影响该值，且优先级最高\n\n\n 2. 修改桌面logo\n\n# 路径\n./build/icons/256x256.png (名称和尺寸必须一致)(windows或者Linux)\n./build/icons/512x512.png (名称和尺寸必须一致)(windows或者Linux)\n./build/icons/icon.ico (macOs)\n\n\n 3. 修改最小化托盘logo\n\n# 路径\n./public/images/tray_logo.png (建议 32x32 或 16x16 )\n\n\n 4. 修改左上角logo\n\n# 代码位置\n./electron/config/config.default.js\nwindowsOption.icon= path.join(appInfo.home, 'public', 'images', 'logo-32.png'),\n# 图片位置\n./public/images/logo-32.png\n",normalizedContent:"# 1. 生成exe、dmg、deb可执行文件\n\n\n# 准备\n\n * 在对应操作系统下打包，比如：在windows下构建 xxx.exe，在macos下，构建xxx.dmg\n * window区分32和64位系统，如果使用bytecode加密功能，则不兼容。反之，兼容。\n\n\n# 第零步：预发布模式，测试一下功能是否正常\n\n# prod环境\nnpm run start \n\n\n\n# 第一步：移动前端资源文件\n\n# 操作如下\n1：构建资源，如vue前端项目中npm run build\n\n2：根目录：npm run rd\n\n# 解释说明\nrd命令会把 frontend/dist 复制到 /public/dist ; 服务最终加载的是 /public/dist前端资源。\nfrontend目录代码不会被打包，防止源码泄露。\n\n\n\n# 第二步：代码加密 （必看）\n\n * 如果未使用该功能，请不要过滤源代码，查看操作：代码加密\n * 如果执行过加密，会生成加密代码：/public/electron ，框架优先读取它，源代码则不生效。\n\n开发阶段如果发现编写的代码不生效，请记得删除加密文件。\n\n> ee-core: v1.2.10\n\nnpm run encrypt\n\n# 解释说明\nencrypt命令会把 electron/ 复制到 /public/electron ; 然后对其加密。\nelectron目录代码不会被打包，防止源码泄露。\n\n\n详细说明：代码加密\n\n\n# 第三步：执行打包命令\n\n注1：请尽量让项目名唯一（electron-egg/package.json中name属性），防止和别人软件名称冲突 注2：打包失败，请查看常见问题。\n\n# 打包时，package.json中build.productname包名不要为中文，避免一些未知异常\n\n# 准备，设置国内镜像\nnpm config set electron_builder_binaries_mirror=https://registry.npmmirror.com/-/binary/electron-builder-binaries/\n\n# 打包 （windows版）\nnpm run build-w (32位)\nnpm run build-w-64 (64位)\nnpm run build-w-arm64 (arm64)\n\n# 打包 （windows 免安装版）\n# ee > v2.2.1\nnpm run build-wz (32位)\nnpm run build-wz-64 (64位)\nnpm run build-wz-arm64 (arm64)\n\n# 打包 （mac版）\nnpm run build-m\nnpm run build-m-arm64 (m1芯片架构)\n\n# 打包 （linux版）\n# ee > v2.2.1\nnpm run build-l (32位 deb包)\nnpm run build-l-64 (64位 deb包)\nnpm run build-l-arm64 (64位 deb包 arm64)\nnpm run build-l-armv7l (64位 deb包 armv7l)\nnpm run build-lr-64 (64位 rpm包)\nnpm run build-lp-64 (64位 pacman包)\n\n\n注释：如果你想了解更多平台打包功能，请参照：https://www.electron.build/\n\n\n# 第四步：找到程序\n\n目录：electron-egg/out\n安装包：electron-egg/out/electron-egg-windows-2.0.3.exe  \n\n\n\n# 2. 其它修改\n\n 1. 修改应用名称\n\n# 修改 ./package.json 中属性\nname：项目名称（英文）\nproductname: 可执行程序名称（英文）\nappid：软件id\nshortcutname：桌面快捷方式名称\n\n# 软件运行时头部名称\n# 修改 ./electron/config/config.default.js\nwindowsoption.title=  'ee框架'\n# 前端html的title标签也会影响该值，且优先级最高\n\n\n 2. 修改桌面logo\n\n# 路径\n./build/icons/256x256.png (名称和尺寸必须一致)(windows或者linux)\n./build/icons/512x512.png (名称和尺寸必须一致)(windows或者linux)\n./build/icons/icon.ico (macos)\n\n\n 3. 修改最小化托盘logo\n\n# 路径\n./public/images/tray_logo.png (建议 32x32 或 16x16 )\n\n\n 4. 修改左上角logo\n\n# 代码位置\n./electron/config/config.default.js\nwindowsoption.icon= path.join(appinfo.home, 'public', 'images', 'logo-32.png'),\n# 图片位置\n./public/images/logo-32.png\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"代码加密",frontmatter:{title:"代码加密",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/280e92/",article:!1},regularPath:"/02.v2/030.%E7%94%9F%E6%88%90%E8%BD%AF%E4%BB%B6/020.%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%AF%86.html",relativePath:"02.v2/030.生成软件/020.代码加密.md",key:"v-7d2b1e54",path:"/pages/280e92/",headers:[{level:3,title:"打包时，过滤源代码",slug:"打包时-过滤源代码",normalizedTitle:"打包时，过滤源代码",charIndex:57},{level:3,title:"加密配置文件",slug:"加密配置文件",normalizedTitle:"加密配置文件",charIndex:355},{level:3,title:"type",slug:"type",normalizedTitle:"type",charIndex:436},{level:3,title:"加密后文件位置",slug:"加密后文件位置",normalizedTitle:"加密后文件位置",charIndex:695},{level:3,title:"方式一：字节码加密 - bytecode",slug:"方式一-字节码加密-bytecode",normalizedTitle:"方式一：字节码加密 - bytecode",charIndex:827},{level:3,title:"代码要求：",slug:"代码要求",normalizedTitle:"代码要求：",charIndex:918},{level:3,title:"构建要求：",slug:"构建要求",normalizedTitle:"构建要求：",charIndex:1163},{level:3,title:"方式二：压缩混淆加密 - confusion",slug:"方式二-压缩混淆加密-confusion",normalizedTitle:"方式二：压缩混淆加密 - confusion",charIndex:1420},{level:3,title:"代码要求：无",slug:"代码要求-无",normalizedTitle:"代码要求：无",charIndex:1806},{level:3,title:"构建要求：",slug:"构建要求-2",normalizedTitle:"构建要求：",charIndex:1163},{level:3,title:"注意",slug:"注意",normalizedTitle:"注意",charIndex:734},{level:3,title:"方式三：压缩混淆加密 strict",slug:"方式三-压缩混淆加密-strict",normalizedTitle:"方式三：压缩混淆加密 strict",charIndex:1967},{level:3,title:"注意",slug:"注意-2",normalizedTitle:"注意",charIndex:734}],headersStr:"打包时，过滤源代码 加密配置文件 type 加密后文件位置 方式一：字节码加密 - bytecode 代码要求： 构建要求： 方式二：压缩混淆加密 - confusion 代码要求：无 构建要求： 注意 方式三：压缩混淆加密 strict 注意",content:'要求：ee-core: v1.2.10 目前框架支持两种代码加密，分别为 字节码加密 和 压缩混淆加密。\n\n\n# 打包时，过滤源代码\n\n注：未使用加密，请删除 "!electron/" 。 打开package.json文件，修改 build.files 数组属性，添加 "!electron/"，如下：\n\n"build": {\n  ......\n  "asar": true,\n  "files": [\n    "**/*",\n    "!frontend/", // 过滤前端源码\n    "!run/",\n    "!logs/",\n    "!data/",\n    "!electron/" // 过滤electron文件夹；如果没有使用加密功能，请删除\n  ],\n  ......\n}  \n\n\n\n# 加密配置文件\n\n> ee-core: v1.3.2\n\n文件 ./electron/config/encrypt.js\n\nmodule.exports = {\n  type: \'bytecode\', // 加密类型：bytecode | confusion | strict\n  directory: [\t\t\t// 需要加密的目录\n    \'electron\'      \n  ],\n  fileExt: [\'.js\'], // 需要加密的文件后缀，暂时只支持js，后续待扩展\n\tconfusionOptions: {}\n};\n\n\n\n# type\n\n * bytecode 字节码加密\n * confusion 压缩混淆加密\n * strict 先混淆加密，然后字节码加密\n\n\n# 加密后文件位置\n\n加密后，文件在 ./public/electron 里面，请注意业务代码中，文件引入路径。\n\n注：dev环境（或 未使用加密功能的prod环境）使用 ./electron 代码，prod环境使用 ./public/electron代码。\n\n\n# 方式一：字节码加密 - bytecode\n\n什么是字节码加密？ 字节码是一种源码编译后的中间表示，类似汇编，是虚拟机执行的指令。逆向（反）编译的难度和传统编译型语言差不多。\n\n\n# 代码要求：\n\n控制器controller和服务层service代码要求加入toString()方法，用来识别加密后的 .jsc （class）模块。如：ExampleController 控制器\n\n# 添加 toString() 方法，返回内容为 类的字符串表示\nExampleController.toString = () => \'[class ExampleController]\';\n\n# 导出模块\nmodule.exports = ExampleController;\n\n\n\n# 构建要求：\n\n * 如果交叉构建的软件运行报错，那么在对应平台构建，操作如下\n * 在windows-32-bit 操作系统上构建：npm run build-w (32位)\n * 在windows-64-bit 操作系统上构建：npm run build-w-64 (64位)\n * 在MacOS-amd 操作系统上构建：npm run build-m\n * 在MacOS-arm 操作系统上构建：npm run build-m-arm64 (m1芯片架构)\n * Linux平台分发版较多，请自行测试\n\n\n# 方式二：压缩混淆加密 - confusion\n\n> ee-core: v1.4.0\n\n当使用此版本时，框架使用 javascript-obfuscator 加密代码，非常强大，效果好。\n\n混淆配置\n\n> ee-core: v1.4.1\n\n# electron/config/encrypt.js\n\nconfusionOptions: {\n  compact: true, // 将代码压缩为1行        \n  stringArray: true, // 删除字符串文本并将其放置在特殊数组中\n  stringArrayEncoding: [\'base64\'], // 对stringArray编码 \'none\', \'base64\', \'rc4\'，增加安全性\n  deadCodeInjection: false, // 是否注入死代码，代码体积变大。\n}\n\n\n\n# 代码要求：无\n\n\n# 构建要求：\n\n * 可在windows-64-bit 操作系统上，同时构建 32位 和 64位应用。\n * 其它如上。\n\n\n# 注意\n\n如果加密生成的代码无法运行，请多次 执行 npm run encrypt 原因：加密后代码混淆很大，可能触发某些关键字或者字符编码，导致代码无法正常读取。\n\n\n# 方式三：压缩混淆加密 strict\n\n> 需要：ee-core: v1.4.0\n\n先 压缩混淆加密，然后 字节码加密，代码更加安全。\n\n\n# 注意\n\n问题同上',normalizedContent:'要求：ee-core: v1.2.10 目前框架支持两种代码加密，分别为 字节码加密 和 压缩混淆加密。\n\n\n# 打包时，过滤源代码\n\n注：未使用加密，请删除 "!electron/" 。 打开package.json文件，修改 build.files 数组属性，添加 "!electron/"，如下：\n\n"build": {\n  ......\n  "asar": true,\n  "files": [\n    "**/*",\n    "!frontend/", // 过滤前端源码\n    "!run/",\n    "!logs/",\n    "!data/",\n    "!electron/" // 过滤electron文件夹；如果没有使用加密功能，请删除\n  ],\n  ......\n}  \n\n\n\n# 加密配置文件\n\n> ee-core: v1.3.2\n\n文件 ./electron/config/encrypt.js\n\nmodule.exports = {\n  type: \'bytecode\', // 加密类型：bytecode | confusion | strict\n  directory: [\t\t\t// 需要加密的目录\n    \'electron\'      \n  ],\n  fileext: [\'.js\'], // 需要加密的文件后缀，暂时只支持js，后续待扩展\n\tconfusionoptions: {}\n};\n\n\n\n# type\n\n * bytecode 字节码加密\n * confusion 压缩混淆加密\n * strict 先混淆加密，然后字节码加密\n\n\n# 加密后文件位置\n\n加密后，文件在 ./public/electron 里面，请注意业务代码中，文件引入路径。\n\n注：dev环境（或 未使用加密功能的prod环境）使用 ./electron 代码，prod环境使用 ./public/electron代码。\n\n\n# 方式一：字节码加密 - bytecode\n\n什么是字节码加密？ 字节码是一种源码编译后的中间表示，类似汇编，是虚拟机执行的指令。逆向（反）编译的难度和传统编译型语言差不多。\n\n\n# 代码要求：\n\n控制器controller和服务层service代码要求加入tostring()方法，用来识别加密后的 .jsc （class）模块。如：examplecontroller 控制器\n\n# 添加 tostring() 方法，返回内容为 类的字符串表示\nexamplecontroller.tostring = () => \'[class examplecontroller]\';\n\n# 导出模块\nmodule.exports = examplecontroller;\n\n\n\n# 构建要求：\n\n * 如果交叉构建的软件运行报错，那么在对应平台构建，操作如下\n * 在windows-32-bit 操作系统上构建：npm run build-w (32位)\n * 在windows-64-bit 操作系统上构建：npm run build-w-64 (64位)\n * 在macos-amd 操作系统上构建：npm run build-m\n * 在macos-arm 操作系统上构建：npm run build-m-arm64 (m1芯片架构)\n * linux平台分发版较多，请自行测试\n\n\n# 方式二：压缩混淆加密 - confusion\n\n> ee-core: v1.4.0\n\n当使用此版本时，框架使用 javascript-obfuscator 加密代码，非常强大，效果好。\n\n混淆配置\n\n> ee-core: v1.4.1\n\n# electron/config/encrypt.js\n\nconfusionoptions: {\n  compact: true, // 将代码压缩为1行        \n  stringarray: true, // 删除字符串文本并将其放置在特殊数组中\n  stringarrayencoding: [\'base64\'], // 对stringarray编码 \'none\', \'base64\', \'rc4\'，增加安全性\n  deadcodeinjection: false, // 是否注入死代码，代码体积变大。\n}\n\n\n\n# 代码要求：无\n\n\n# 构建要求：\n\n * 可在windows-64-bit 操作系统上，同时构建 32位 和 64位应用。\n * 其它如上。\n\n\n# 注意\n\n如果加密生成的代码无法运行，请多次 执行 npm run encrypt 原因：加密后代码混淆很大，可能触发某些关键字或者字符编码，导致代码无法正常读取。\n\n\n# 方式三：压缩混淆加密 strict\n\n> 需要：ee-core: v1.4.0\n\n先 压缩混淆加密，然后 字节码加密，代码更加安全。\n\n\n# 注意\n\n问题同上',charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"图标修改",frontmatter:{title:"图标修改",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/50b8e9/",article:!1},regularPath:"/02.v2/030.%E7%94%9F%E6%88%90%E8%BD%AF%E4%BB%B6/030.%E5%9B%BE%E6%A0%87%E4%BF%AE%E6%94%B9.html",relativePath:"02.v2/030.生成软件/030.图标修改.md",key:"v-6385ecc6",path:"/pages/50b8e9/",headers:[{level:3,title:"图标说明",slug:"图标说明",normalizedTitle:"图标说明",charIndex:2},{level:3,title:"桌面图标工具",slug:"桌面图标工具",normalizedTitle:"桌面图标工具",charIndex:366}],headersStr:"图标说明 桌面图标工具",content:"# 图标说明\n\n 1. 桌面和安装图标，修改里面的3个图片（图片名称不要修改）。\n\n# 文件路径\nelectron-egg\\build\\icons\n\n# 图1：256x256.png\n# 分辨率：256 x 256\n# 宽度：256像素\n# 高度：256像素\n# 位深度：32\n\n# 图2：512x512.png\n# 分辨率：512 x 512\n# 宽度：512像素\n# 高度：512像素\n# 位深度：32\n\n# 图3：icon.ico\n# 分辨率：256 x 256\n# 宽度：256像素\n# 高度：256像素\n# 位深度：32\n\n\n 2. 托盘图标\n\n# 文件路径\nelectron-egg\\public\\images\\tray_logo.png\n分辨率：16 x 16\n宽度：16像素\n高度：16像素\n位深度：32\n\n\n\n# 桌面图标工具\n\n 1. 下载地址\n\n链接：https://pan.baidu.com/s/134hLHBSLP2YBpHaBopaeaQ?pwd=p3nq 提取码：p3nq\n\n 2. 注意格式：\n\n\n\n注意：icon.ico的图片大小，尽量小于40kb，太大了会有显示问题。（可以提前将png图片进行多次压缩）",normalizedContent:"# 图标说明\n\n 1. 桌面和安装图标，修改里面的3个图片（图片名称不要修改）。\n\n# 文件路径\nelectron-egg\\build\\icons\n\n# 图1：256x256.png\n# 分辨率：256 x 256\n# 宽度：256像素\n# 高度：256像素\n# 位深度：32\n\n# 图2：512x512.png\n# 分辨率：512 x 512\n# 宽度：512像素\n# 高度：512像素\n# 位深度：32\n\n# 图3：icon.ico\n# 分辨率：256 x 256\n# 宽度：256像素\n# 高度：256像素\n# 位深度：32\n\n\n 2. 托盘图标\n\n# 文件路径\nelectron-egg\\public\\images\\tray_logo.png\n分辨率：16 x 16\n宽度：16像素\n高度：16像素\n位深度：32\n\n\n\n# 桌面图标工具\n\n 1. 下载地址\n\n链接：https://pan.baidu.com/s/134hlhbslp2ybphabopaeaq?pwd=p3nq 提取码：p3nq\n\n 2. 注意格式：\n\n\n\n注意：icon.ico的图片大小，尽量小于40kb，太大了会有显示问题。（可以提前将png图片进行多次压缩）",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"框架升级",frontmatter:{title:"框架升级",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/5d7733/",article:!1},regularPath:"/02.v2/040.%E5%8D%87%E7%BA%A7/010.%E6%A1%86%E6%9E%B6%E5%8D%87%E7%BA%A7.html",relativePath:"02.v2/040.升级/010.框架升级.md",key:"v-6c8f570a",path:"/pages/5d7733/",headers:[{level:3,title:"升级ee-core",slug:"升级ee-core",normalizedTitle:"升级ee-core",charIndex:75},{level:3,title:"升级electron",slug:"升级electron",normalizedTitle:"升级electron",charIndex:127},{level:3,title:"electron与node.js 对应关系",slug:"electron与node-js-对应关系",normalizedTitle:"electron与node.js 对应关系",charIndex:212},{level:3,title:"window 7 系统",slug:"window-7-系统",normalizedTitle:"window 7 系统",charIndex:263}],headersStr:"升级ee-core 升级electron electron与node.js 对应关系 window 7 系统",content:"框架核心：ee-core\n\n注：请尽量使用仓库中electron版本，都在windows、macOS、Ubuntu测试过，其它版本请自行测试\n\n\n# 升级ee-core\n\n# 升级到最最新\nnpm install ee-core@latest\n\n\n\n# 升级electron\n\n# 当前版本为 13.6.9\n# @后面可以是任意版本\nnpm install electron@16.13.0 --save-dev\n\n\n\n# electron与node.js 对应关系\n\nelectron与node.js 版本对应关系\n\n\n# window 7 系统\n\n微软已经停止对 win7系统支持。需要支持win7的，请使用以下开发环境：\n\n * electron <= 12版本\n * node.js <= 12版本\n * electron-builder <= 22.10.5",normalizedContent:"框架核心：ee-core\n\n注：请尽量使用仓库中electron版本，都在windows、macos、ubuntu测试过，其它版本请自行测试\n\n\n# 升级ee-core\n\n# 升级到最最新\nnpm install ee-core@latest\n\n\n\n# 升级electron\n\n# 当前版本为 13.6.9\n# @后面可以是任意版本\nnpm install electron@16.13.0 --save-dev\n\n\n\n# electron与node.js 对应关系\n\nelectron与node.js 版本对应关系\n\n\n# window 7 系统\n\n微软已经停止对 win7系统支持。需要支持win7的，请使用以下开发环境：\n\n * electron <= 12版本\n * node.js <= 12版本\n * electron-builder <= 22.10.5",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"应用软件自动更新",frontmatter:{title:"应用软件自动更新",date:"2023-04-19T11:12:32.000Z",permalink:"/pages/0039b5/",article:!1},regularPath:"/02.v2/040.%E5%8D%87%E7%BA%A7/020.%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.html",relativePath:"02.v2/040.升级/020.应用软件自动更新.md",key:"v-2754fb3f",path:"/pages/0039b5/",headers:[{level:3,title:"注：该功能为demo，请开发者自行调试。",slug:"注-该功能为demo-请开发者自行调试。",normalizedTitle:"注：该功能为demo，请开发者自行调试。",charIndex:2},{level:3,title:"证书",slug:"证书",normalizedTitle:"证书",charIndex:27},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:205},{level:3,title:"举例",slug:"举例",normalizedTitle:"举例",charIndex:835},{level:4,title:"url参数",slug:"url参数",normalizedTitle:"url参数",charIndex:923},{level:4,title:"上传文件",slug:"上传文件",normalizedTitle:"上传文件",charIndex:974},{level:3,title:"注意事项",slug:"注意事项",normalizedTitle:"注意事项",charIndex:1417},{level:3,title:"electron-updater",slug:"electron-updater",normalizedTitle:"electron-updater",charIndex:1441}],headersStr:"注：该功能为demo，请开发者自行调试。 证书 配置 举例 url参数 上传文件 注意事项 electron-updater",content:"# 注：该功能为demo，请开发者自行调试。\n\n\n# 证书\n\n> 非必要\n\n如果你的app需要上架windows、Mac应用商店，或者需要额外的一些系统权限，那么需要申请开发者证书。\n\n * Apple Developer Certificate (if targeting macOS)\n * Windows Developer Certificate (if targeting Windows)\n\n\n# 配置\n\n文件：./electron/config.default.js\n\n版本\nelectron-egg >= v2.4.0\nee-core >= v1.4.1\n\n/**\n * 插件功能\n */\n......\n\nautoUpdater: {\n  enable: true,\n  windows: false, \n  macOS: false, \n  linux: false,\n  options: {\n    provider: 'generic', \n    url: 'http://kodo.qiniu.com/'\n  },\n  force: false,\n},\n\n\n旧版本\nelectron-egg < v2.4.0\n\n/* 应用自动升级 (可选) */\nconfig.autoUpdate = {\n  windows: false, // windows平台\n  macOS: false, // macOs 需要签名验证\n  linux: false, // linux平台\n  options: {\n    provider: 'generic', // or github, s3, bintray\n    url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n  },\n  force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n};\n\n\n\n# 举例\n\noptions: {\n\tprovider: 'generic',\n\turl: 'http://kodo.qiniu.com/electron-egg/' \n}\n\n\n# url参数\n\n是一个可以访问的资源目录（七牛云，GitHub，阿里云oss，腾讯云cos等）。\n\n# 上传文件\n\n我们把打包后的高版本软件，'electron-egg/out/' 目录中 ：\n\n * ee-win-2.4.0-x64.exe 完整安装包\n * ee-win-2.4.0-x64.exe.blockmap 增量块内容\n * latest.yml\n\n三个文件放到七牛云的对象存储中，如下：\n\n# 放置目录：\nhttp://kodo.qiniu.com/electron-egg/\n\n# 放置后如下\n● http://kodo.qiniu.com/electron-egg/ee-win-2.4.0-x64.exe\n● http://kodo.qiniu.com/electron-egg/ee-win-2.4.0-x64.exe.blockmap\n● http://kodo.qiniu.com/electron-egg/latest.yml\n\n\n测试你的三个链接，能否下载（访问）。 如果可以访问，触发升级功能时，会检测是否可以自动升级（可查看 日志 是否有报错）\n\n\n# 注意事项\n\n * dev模式不支持更新\n\n\n# electron-updater\n\n如果想要自定义实现升级功能，请查看文档：electron-updater",normalizedContent:"# 注：该功能为demo，请开发者自行调试。\n\n\n# 证书\n\n> 非必要\n\n如果你的app需要上架windows、mac应用商店，或者需要额外的一些系统权限，那么需要申请开发者证书。\n\n * apple developer certificate (if targeting macos)\n * windows developer certificate (if targeting windows)\n\n\n# 配置\n\n文件：./electron/config.default.js\n\n版本\nelectron-egg >= v2.4.0\nee-core >= v1.4.1\n\n/**\n * 插件功能\n */\n......\n\nautoupdater: {\n  enable: true,\n  windows: false, \n  macos: false, \n  linux: false,\n  options: {\n    provider: 'generic', \n    url: 'http://kodo.qiniu.com/'\n  },\n  force: false,\n},\n\n\n旧版本\nelectron-egg < v2.4.0\n\n/* 应用自动升级 (可选) */\nconfig.autoupdate = {\n  windows: false, // windows平台\n  macos: false, // macos 需要签名验证\n  linux: false, // linux平台\n  options: {\n    provider: 'generic', // or github, s3, bintray\n    url: 'http://kodo.qiniu.com/' // resource dir, end with '/'\n  },\n  force: false, // 强制更新（运行软件时，检查新版本并后台下载安装）\n};\n\n\n\n# 举例\n\noptions: {\n\tprovider: 'generic',\n\turl: 'http://kodo.qiniu.com/electron-egg/' \n}\n\n\n# url参数\n\n是一个可以访问的资源目录（七牛云，github，阿里云oss，腾讯云cos等）。\n\n# 上传文件\n\n我们把打包后的高版本软件，'electron-egg/out/' 目录中 ：\n\n * ee-win-2.4.0-x64.exe 完整安装包\n * ee-win-2.4.0-x64.exe.blockmap 增量块内容\n * latest.yml\n\n三个文件放到七牛云的对象存储中，如下：\n\n# 放置目录：\nhttp://kodo.qiniu.com/electron-egg/\n\n# 放置后如下\n● http://kodo.qiniu.com/electron-egg/ee-win-2.4.0-x64.exe\n● http://kodo.qiniu.com/electron-egg/ee-win-2.4.0-x64.exe.blockmap\n● http://kodo.qiniu.com/electron-egg/latest.yml\n\n\n测试你的三个链接，能否下载（访问）。 如果可以访问，触发升级功能时，会检测是否可以自动升级（可查看 日志 是否有报错）\n\n\n# 注意事项\n\n * dev模式不支持更新\n\n\n# electron-updater\n\n如果想要自定义实现升级功能，请查看文档：electron-updater",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"使用说明",frontmatter:{title:"使用说明",date:"2023-05-26T11:03:51.000Z",permalink:"/pages/85c531/"},regularPath:"/03.api/001.%E6%95%99%E7%A8%8B/001.%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html",relativePath:"03.api/001.教程/001.使用说明.md",key:"v-aa8bc1d4",path:"/pages/85c531/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"模块列表",slug:"模块列表",normalizedTitle:"模块列表",charIndex:102},{level:4,title:"addon",slug:"addon",normalizedTitle:"addon",charIndex:110},{level:4,title:"bin",slug:"bin",normalizedTitle:"bin",charIndex:126},{level:4,title:"config",slug:"config",normalizedTitle:"config",charIndex:141},{level:4,title:"const",slug:"const",normalizedTitle:"const",charIndex:179},{level:4,title:"controller",slug:"controller",normalizedTitle:"controller",charIndex:203},{level:4,title:"ee",slug:"ee",normalizedTitle:"ee",charIndex:26},{level:4,title:"electron",slug:"electron",normalizedTitle:"electron",charIndex:6},{level:4,title:"exception",slug:"exception",normalizedTitle:"exception",charIndex:293},{level:4,title:"httpclient",slug:"httpclient",normalizedTitle:"httpclient",charIndex:315},{level:4,title:"jobs",slug:"jobs",normalizedTitle:"jobs",charIndex:339},{level:4,title:"loader",slug:"loader",normalizedTitle:"loader",charIndex:354},{level:4,title:"log",slug:"log",normalizedTitle:"log",charIndex:372},{level:4,title:"message",slug:"message",normalizedTitle:"message",charIndex:386},{level:4,title:"ps",slug:"ps",normalizedTitle:"ps",charIndex:419},{level:4,title:"services",slug:"services",normalizedTitle:"services",charIndex:435},{level:4,title:"socket",slug:"socket",normalizedTitle:"socket",charIndex:455},{level:4,title:"storage",slug:"storage",normalizedTitle:"storage",charIndex:480},{level:4,title:"tools",slug:"tools",normalizedTitle:"tools",charIndex:518},{level:4,title:"utils",slug:"utils",normalizedTitle:"utils",charIndex:542}],headersStr:"介绍 模块列表 addon bin config const controller ee electron exception httpclient jobs loader log message ps services socket storage tools utils",content:"# 介绍\n\nelectron-egg框架核心功能由 ee-core 驱动。目前包含 100+ api，极大的增强了框架能力。\n\n同样的，您可以将ee-core作为 模块 使用，详情见 第三方使用\n\n\n# 模块列表\n\n# addon\n\n插件模块。\n\n# bin\n\n命令行模块。\n\n# config\n\n可以 获取/设置 system.json库中的数据。\n\n# const\n\n定义框架中使用的通用常量。\n\n# controller\n\n控制器模块的基础类。\n\n# ee\n\n框架EE模块，提供app对象。\n\n# electron\n\n框架封装的electron功能，将在此模块提供API。\n\n# exception\n\n捕获异常模块。\n\n# httpclient\n\nhttp客户端。\n\n# jobs\n\n任务模块。\n\n# loader\n\n加载器模块。\n\n# log\n\n日志模块。\n\n# message\n\n消息模块。在主进程和子进程之间发送消息。\n\n# ps\n\n进程工具类模块。\n\n# services\n\n服务层模块。\n\n# socket\n\n提供socket通信功能。\n\n# storage\n\n存储模块。提供json数据库、sqlite数据库。\n\n# tools\n\n脚本模块。加密、移动资源。\n\n# utils\n\n工具库模块。",normalizedContent:"# 介绍\n\nelectron-egg框架核心功能由 ee-core 驱动。目前包含 100+ api，极大的增强了框架能力。\n\n同样的，您可以将ee-core作为 模块 使用，详情见 第三方使用\n\n\n# 模块列表\n\n# addon\n\n插件模块。\n\n# bin\n\n命令行模块。\n\n# config\n\n可以 获取/设置 system.json库中的数据。\n\n# const\n\n定义框架中使用的通用常量。\n\n# controller\n\n控制器模块的基础类。\n\n# ee\n\n框架ee模块，提供app对象。\n\n# electron\n\n框架封装的electron功能，将在此模块提供api。\n\n# exception\n\n捕获异常模块。\n\n# httpclient\n\nhttp客户端。\n\n# jobs\n\n任务模块。\n\n# loader\n\n加载器模块。\n\n# log\n\n日志模块。\n\n# message\n\n消息模块。在主进程和子进程之间发送消息。\n\n# ps\n\n进程工具类模块。\n\n# services\n\n服务层模块。\n\n# socket\n\n提供socket通信功能。\n\n# storage\n\n存储模块。提供json数据库、sqlite数据库。\n\n# tools\n\n脚本模块。加密、移动资源。\n\n# utils\n\n工具库模块。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"第三方使用",frontmatter:{title:"第三方使用",date:"2023-05-25T11:12:19.000Z",article:!1,permalink:"/pages/1dbe35/"},regularPath:"/03.api/001.%E6%95%99%E7%A8%8B/002.%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BD%BF%E7%94%A8.html",relativePath:"03.api/001.教程/002.第三方使用.md",key:"v-576c4fe7",path:"/pages/1dbe35/",headers:[{level:3,title:"作为模块使用",slug:"作为模块使用",normalizedTitle:"作为模块使用",charIndex:2},{level:3,title:"安装 ee-core",slug:"安装-ee-core",normalizedTitle:"安装 ee-core",charIndex:44},{level:3,title:"项目中使用",slug:"项目中使用",normalizedTitle:"项目中使用",charIndex:204},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:373}],headersStr:"作为模块使用 安装 ee-core 项目中使用 示例",content:"# 作为模块使用\n\n如果您不想使用electorn-egg框架，但想使用它的API，只需安装 ee-core 包。\n\n或者将electron-egg内嵌入您自己的项目，只需要把 【./electron】文件夹，复制到您项目的 根目录 即可。\n\n\n# 安装 ee-core\n\n> ee-core: v2.2.0\n\nnpm install ee-core\n\n\npnpm install ee-core\n\n\n\n# 项目中使用\n\n在您的项目入口文件，如 main.js中，添加如下代码：\n\nconst { ElectronEgg } = require('ee-core');\n\n// 以 'module' 模块方式使用 \nnew ElectronEgg('module');\n\n\n这样您就可以使用ee-core的提供的 100+ API 了。\n\n\n# 示例\n\ntest.js\n\nconst Log = require('ee-core/log');\nconst Ps = require('ee-core/ps');\nconst HttpClient = require('ee-core/httpclient');\nconst Storage = require('ee-core/storage');\nconst Utils = require('ee-core/utils');\n\nconst Test = {\n\n  async hello() {\n    Log.info('[log] hello ee-core');\n\n    const hc = new HttpClient();\n    const url = \"https://api.wrdan.com/ip\";\n    const options = {\n      method: 'GET',\n      data: {\n        url: 'https://www.baidu.com',\n      },\n      dataType: 'json',\n      timeout: 15000,  \n    };\n    const result = await hc.request(url, options);\n    console.log('hc.request:', result);\n\n    console.log('Ps.isMain:', Ps.isMain());\n    console.log('Ps.getHomeDir:', Ps.getHomeDir());\n    console.log('Ps.getExecDir:', Ps.getExecDir());\n \n    console.log('Utils.machineIdSync:', Utils.machineIdSync());\n\n    this.test();\n  },\n  test() {\n    const demoDB = Storage.connection('demo');  \n    const key = 'test_data';\n    if (!demoDB.db.has(key).value()) {\n      demoDB.db.set(key, []).write();\n    }\n    const data = demoDB.db\n    .get(key)\n    .push({name: 'gsx', age:21})\n    .write();\n    return data;\n  }\n}\n\nmodule.exports=Test;\n",normalizedContent:"# 作为模块使用\n\n如果您不想使用electorn-egg框架，但想使用它的api，只需安装 ee-core 包。\n\n或者将electron-egg内嵌入您自己的项目，只需要把 【./electron】文件夹，复制到您项目的 根目录 即可。\n\n\n# 安装 ee-core\n\n> ee-core: v2.2.0\n\nnpm install ee-core\n\n\npnpm install ee-core\n\n\n\n# 项目中使用\n\n在您的项目入口文件，如 main.js中，添加如下代码：\n\nconst { electronegg } = require('ee-core');\n\n// 以 'module' 模块方式使用 \nnew electronegg('module');\n\n\n这样您就可以使用ee-core的提供的 100+ api 了。\n\n\n# 示例\n\ntest.js\n\nconst log = require('ee-core/log');\nconst ps = require('ee-core/ps');\nconst httpclient = require('ee-core/httpclient');\nconst storage = require('ee-core/storage');\nconst utils = require('ee-core/utils');\n\nconst test = {\n\n  async hello() {\n    log.info('[log] hello ee-core');\n\n    const hc = new httpclient();\n    const url = \"https://api.wrdan.com/ip\";\n    const options = {\n      method: 'get',\n      data: {\n        url: 'https://www.baidu.com',\n      },\n      datatype: 'json',\n      timeout: 15000,  \n    };\n    const result = await hc.request(url, options);\n    console.log('hc.request:', result);\n\n    console.log('ps.ismain:', ps.ismain());\n    console.log('ps.gethomedir:', ps.gethomedir());\n    console.log('ps.getexecdir:', ps.getexecdir());\n \n    console.log('utils.machineidsync:', utils.machineidsync());\n\n    this.test();\n  },\n  test() {\n    const demodb = storage.connection('demo');  \n    const key = 'test_data';\n    if (!demodb.db.has(key).value()) {\n      demodb.db.set(key, []).write();\n    }\n    const data = demodb.db\n    .get(key)\n    .push({name: 'gsx', age:21})\n    .write();\n    return data;\n  }\n}\n\nmodule.exports=test;\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"插件模块",frontmatter:{title:"插件模块",date:"2023-05-25T11:12:19.000Z",article:!1,permalink:"/pages/12884f/"},regularPath:"/03.api/002.API/005.addon/010.%E4%BB%8B%E7%BB%8D.html",relativePath:"03.api/002.API/005.addon/010.介绍.md",key:"v-3e505182",path:"/pages/12884f/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:22},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:57},{level:3,title:"第三方使用",slug:"第三方使用",normalizedTitle:"第三方使用",charIndex:235},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:704},{level:3,title:"get()",slug:"get",normalizedTitle:"get()",charIndex:714}],headersStr:"介绍 使用方法 第三方使用 API列表 get()",content:"> ee-core: v2.2.0\n\n\n# 介绍\n\n插件模块，可以调用框架内置或者开发中自己编写的插件。\n\n\n# 使用方法\n\nconst Addon = require('ee-core/addon');\n\n# 内置window插件\nconst win = Addon.get('window').create('window-name', {title: 'demo'});\n\n# demo-托盘插件\nAddon.get('tray').create();\n\n\n\n# 第三方使用\n\n 1. 创建配置文件\n\n在项目根目录创建 ./electron/config/config.default.js 文件\n\n/**\n * 默认配置\n */\nmodule.exports = (appInfo) => {\n  const config = {};\n\n  /**\n   * 插件功能\n   */\n  config.addons = {\n    window: {\n      enable: true,\n    },\n    tray: {\n      enable: true,\n      title: 'EE程序',\n      icon: '/public/images/tray_logo.png'\n    },\n  };\n\n  return {\n    ...config\n  };\n}\n\n\n 2. 编写业务代码文件\n\n * 在项目根目录创建 ./electron/addon/tray/index.js 文件，tray示例代码\n\n * 内置window插件可直接使用\n\n 3. 使用方法同上\n\n\n# API列表\n\n\n# get()\n\n获取实例化后的插件对象。\n\nAddon.get('window');\n",normalizedContent:"> ee-core: v2.2.0\n\n\n# 介绍\n\n插件模块，可以调用框架内置或者开发中自己编写的插件。\n\n\n# 使用方法\n\nconst addon = require('ee-core/addon');\n\n# 内置window插件\nconst win = addon.get('window').create('window-name', {title: 'demo'});\n\n# demo-托盘插件\naddon.get('tray').create();\n\n\n\n# 第三方使用\n\n 1. 创建配置文件\n\n在项目根目录创建 ./electron/config/config.default.js 文件\n\n/**\n * 默认配置\n */\nmodule.exports = (appinfo) => {\n  const config = {};\n\n  /**\n   * 插件功能\n   */\n  config.addons = {\n    window: {\n      enable: true,\n    },\n    tray: {\n      enable: true,\n      title: 'ee程序',\n      icon: '/public/images/tray_logo.png'\n    },\n  };\n\n  return {\n    ...config\n  };\n}\n\n\n 2. 编写业务代码文件\n\n * 在项目根目录创建 ./electron/addon/tray/index.js 文件，tray示例代码\n\n * 内置window插件可直接使用\n\n 3. 使用方法同上\n\n\n# api列表\n\n\n# get()\n\n获取实例化后的插件对象。\n\naddon.get('window');\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"window",frontmatter:{title:"window",date:"2023-05-25T11:12:19.000Z",article:!1,permalink:"/pages/3b0795/"},regularPath:"/03.api/002.API/005.addon/030.window.html",relativePath:"03.api/002.API/005.addon/030.window.md",key:"v-2f3d57c5",path:"/pages/3b0795/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:22},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:41},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:125},{level:3,title:"create()",slug:"create",normalizedTitle:"create()",charIndex:135},{level:3,title:"getWCid()",slug:"getwcid",normalizedTitle:"getwcid()",charIndex:258},{level:3,title:"getMWCid()",slug:"getmwcid",normalizedTitle:"getmwcid()",charIndex:324},{level:3,title:"属性",slug:"属性",normalizedTitle:"属性",charIndex:360},{level:3,title:"windowContentsIdMap",slug:"windowcontentsidmap",normalizedTitle:"windowcontentsidmap",charIndex:367}],headersStr:"介绍 使用方法 API列表 create() getWCid() getMWCid() 属性 windowContentsIdMap",content:"> ee-core: v2.2.0\n\n\n# 介绍\n\n内置window插件\n\n\n# 使用方法\n\nconst Addon = require('ee-core/addon');\nconst win = Addon.get('window');\n\n\n\n# API列表\n\n\n# create()\n\n * @params name [String] - 窗口名字\n * @params opt [Object] - 窗口选项，见：browserWindowOptions\n * @return 窗口对象\n\n创建窗口。\n\n\n# getWCid()\n\n * @params name [String] -窗口名字\n\n获取窗口webContents.id\n\n\n# getMWCid()\n\n获取主窗口webContents.id\n\n\n# 属性\n\n\n# windowContentsIdMap\n\n保存窗口webContents.id 的对象",normalizedContent:"> ee-core: v2.2.0\n\n\n# 介绍\n\n内置window插件\n\n\n# 使用方法\n\nconst addon = require('ee-core/addon');\nconst win = addon.get('window');\n\n\n\n# api列表\n\n\n# create()\n\n * @params name [string] - 窗口名字\n * @params opt [object] - 窗口选项，见：browserwindowoptions\n * @return 窗口对象\n\n创建窗口。\n\n\n# getwcid()\n\n * @params name [string] -窗口名字\n\n获取窗口webcontents.id\n\n\n# getmwcid()\n\n获取主窗口webcontents.id\n\n\n# 属性\n\n\n# windowcontentsidmap\n\n保存窗口webcontents.id 的对象",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"bin",frontmatter:{title:"bin",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/369cb1/",article:!1},regularPath:"/03.api/002.API/010.bin.html",relativePath:"03.api/002.API/010.bin.md",key:"v-465b447a",path:"/pages/369cb1/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:36},{level:3,title:"rd",slug:"rd",normalizedTitle:"rd",charIndex:46},{level:3,title:"encrypt",slug:"encrypt",normalizedTitle:"encrypt",charIndex:210},{level:3,title:"clean",slug:"clean",normalizedTitle:"clean",charIndex:311}],headersStr:"介绍 API列表 rd encrypt clean",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n命令行模块。\n\n\n# API列表\n\n\n# rd\n\n * dist_dir - 资源所在目录\n\nrd命令会把 frontend/dist 复制到 /public/dist ; 服务最终加载的是 /public/dist前端资源。\n\nfrontend目录代码不会被打包，防止源码泄露。\n\nee-core rd --dist_dir=./frontend/dist\n\n\n\n# encrypt\n\n将 electron/ 复制到 /public/electron ; 然后对其加密。\n\nelectron目录代码不会被打包，防止源码泄露。\n\nee-core encrypt\n\n\n\n# clean\n\n清理加密代码（/public/electron目录）\n\nee-core clean\n",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n命令行模块。\n\n\n# api列表\n\n\n# rd\n\n * dist_dir - 资源所在目录\n\nrd命令会把 frontend/dist 复制到 /public/dist ; 服务最终加载的是 /public/dist前端资源。\n\nfrontend目录代码不会被打包，防止源码泄露。\n\nee-core rd --dist_dir=./frontend/dist\n\n\n\n# encrypt\n\n将 electron/ 复制到 /public/electron ; 然后对其加密。\n\nelectron目录代码不会被打包，防止源码泄露。\n\nee-core encrypt\n\n\n\n# clean\n\n清理加密代码（/public/electron目录）\n\nee-core clean\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"config",frontmatter:{title:"config",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/24a0ab/",article:!1},regularPath:"/03.api/002.API/015.config.html",relativePath:"03.api/002.API/015.config.md",key:"v-ad446a36",path:"/pages/24a0ab/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:69},{level:3,title:"第三方使用",slug:"第三方使用",normalizedTitle:"第三方使用",charIndex:120},{level:3,title:"config位置",slug:"config位置",normalizedTitle:"config位置",charIndex:212},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:242},{level:3,title:"all()",slug:"all",normalizedTitle:"all()",charIndex:252},{level:3,title:"setAll(config)",slug:"setall-config",normalizedTitle:"setall(config)",charIndex:273},{level:3,title:"getValue(key)",slug:"getvalue-key",normalizedTitle:"getvalue(key)",charIndex:414},{level:3,title:"setValue(key, value)",slug:"setvalue-key-value",normalizedTitle:"setvalue(key, value)",charIndex:645}],headersStr:"介绍 使用方法 第三方使用 config位置 API列表 all() setAll(config) getValue(key) setValue(key, value)",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n系统config配置模块，可以 获取/设置 system.json库中的数据。\n\n\n# 使用方法\n\nconst Conf = require('ee-core/config');\n\n\n\n# 第三方使用\n\n 1. 创建配置文件 在项目根目录创建 ./electron/config/config.default.js 文件，config示例代码\n 2. 使用方法同上\n\n\n# config位置\n\n见文档：system.json\n\n\n# API列表\n\n\n# all()\n\n获取所有配置数据。\n\n\n# setAll(config)\n\n * config [Object] - 包含全部配置数据的对象\n\n保存所有配置。比如，修改过config对象中的某个属性后，重新setAll(config)，把数据保存在json数据库中。 注：尽量不要修改系统配置中的数据，以免引发异常。\n\n\n# getValue(key)\n\n * key [String] - 系统配置中对象属性\n\n根据属性获取值。\n\nconst Conf = require('ee-core/config');\n\n// 获取http服务配置\nconst httpConfig = Conf.getValue('httpServer');\n\n// 获取升级配置\nconst updateConfig = Conf.getValue('addons.autoUpdater');\n\n\n\n# setValue(key, value)\n\n * key [String] - 系统配置中对象属性\n * value [any] - 系统配置中对象属性的值\n\n设置某个属性的值。",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n系统config配置模块，可以 获取/设置 system.json库中的数据。\n\n\n# 使用方法\n\nconst conf = require('ee-core/config');\n\n\n\n# 第三方使用\n\n 1. 创建配置文件 在项目根目录创建 ./electron/config/config.default.js 文件，config示例代码\n 2. 使用方法同上\n\n\n# config位置\n\n见文档：system.json\n\n\n# api列表\n\n\n# all()\n\n获取所有配置数据。\n\n\n# setall(config)\n\n * config [object] - 包含全部配置数据的对象\n\n保存所有配置。比如，修改过config对象中的某个属性后，重新setall(config)，把数据保存在json数据库中。 注：尽量不要修改系统配置中的数据，以免引发异常。\n\n\n# getvalue(key)\n\n * key [string] - 系统配置中对象属性\n\n根据属性获取值。\n\nconst conf = require('ee-core/config');\n\n// 获取http服务配置\nconst httpconfig = conf.getvalue('httpserver');\n\n// 获取升级配置\nconst updateconfig = conf.getvalue('addons.autoupdater');\n\n\n\n# setvalue(key, value)\n\n * key [string] - 系统配置中对象属性\n * value [any] - 系统配置中对象属性的值\n\n设置某个属性的值。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"const",frontmatter:{title:"const",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/0517c4/",article:!1},regularPath:"/03.api/002.API/020.const.html",relativePath:"03.api/002.API/020.const.md",key:"v-6bb0facd",path:"/pages/0517c4/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:63}],headersStr:"介绍 API列表",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n常量模块，定义框架中使用的通用常量。框架核心使用，暂无业务api。\n\n\n# API列表\n\n暂无",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n常量模块，定义框架中使用的通用常量。框架核心使用，暂无业务api。\n\n\n# api列表\n\n暂无",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"const/channel",frontmatter:{title:"const/channel",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/3bd231/",article:!1},regularPath:"/03.api/002.API/025.const-channel.html",relativePath:"03.api/002.API/025.const-channel.md",key:"v-ea2869d2",path:"/pages/3bd231/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:63}],headersStr:"介绍 API列表",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n常量模块，定义框架中使用的通用常量。框架核心使用，暂无业务api。\n\n\n# API列表\n\n暂无",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n常量模块，定义框架中使用的通用常量。框架核心使用，暂无业务api。\n\n\n# api列表\n\n暂无",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"controller",frontmatter:{title:"controller",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/33f926/",article:!1},regularPath:"/03.api/002.API/030.controller.html",relativePath:"03.api/002.API/030.controller.md",key:"v-46878545",path:"/pages/33f926/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:35},{level:3,title:"第三方使用",slug:"第三方使用",normalizedTitle:"第三方使用",charIndex:145},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:458},{level:3,title:"BaseContextClass",slug:"basecontextclass",normalizedTitle:"basecontextclass",charIndex:468}],headersStr:"介绍 使用方法 第三方使用 API列表 BaseContextClass",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n控制器模块\n\n\n# 使用方法\n\nconst { Controller } = require('ee-core');\n\nclass ExampleController extends Controller {\n\t......\n}\n\n\n\n# 第三方使用\n\n 1. 创建controller文件\n\n在项目根目录创建 ./electron/controller/example.js 文件，controller示例代码\n\n 2. 前端调用\n\nconst { ipcRenderer: ipc } = (window.require && window.require('electron')) || window.electron || {};\n\nipc.invoke('controller.example.hello', {}).then(res => {\n\t//\n})\n\nipc.send('controller.example.hello', {});\n\n\n\n# API列表\n\n\n# BaseContextClass\n\n提供一个基础类，目前有app、config、service 三个属性",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n控制器模块\n\n\n# 使用方法\n\nconst { controller } = require('ee-core');\n\nclass examplecontroller extends controller {\n\t......\n}\n\n\n\n# 第三方使用\n\n 1. 创建controller文件\n\n在项目根目录创建 ./electron/controller/example.js 文件，controller示例代码\n\n 2. 前端调用\n\nconst { ipcrenderer: ipc } = (window.require && window.require('electron')) || window.electron || {};\n\nipc.invoke('controller.example.hello', {}).then(res => {\n\t//\n})\n\nipc.send('controller.example.hello', {});\n\n\n\n# api列表\n\n\n# basecontextclass\n\n提供一个基础类，目前有app、config、service 三个属性",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"core",frontmatter:{title:"core",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/46466d/",article:!1},regularPath:"/03.api/002.API/035.core.html",relativePath:"03.api/002.API/035.core.md",key:"v-3b3d45f6",path:"/pages/46466d/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:52}],headersStr:"介绍 API列表",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n框架底层模块。框架核心使用，暂无业务api。\n\n\n# API列表\n\n暂无",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n框架底层模块。框架核心使用，暂无业务api。\n\n\n# api列表\n\n暂无",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"ee",frontmatter:{title:"ee",date:"2023-05-26T11:12:18.000Z",permalink:"/pages/f559b8/",article:!1},regularPath:"/03.api/002.API/040.ee.html",relativePath:"03.api/002.API/040.ee.md",key:"v-6d0954b6",path:"/pages/f559b8/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:73},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:118},{level:3,title:"CoreApp",slug:"coreapp",normalizedTitle:"coreapp",charIndex:128}],headersStr:"介绍 使用方法 API列表 CoreApp",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n框架EE模块，提供app对象。\n\n注：子进程中无法使用所有涉及electron的api\n\n\n# 使用方法\n\nconst EE = require('ee-core/ee');\n\n\n\n# API列表\n\n\n# CoreApp\n\n等于this.app对象。详情见：CoreApp\n\nconst { CoreApp } = EE;\n",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n框架ee模块，提供app对象。\n\n注：子进程中无法使用所有涉及electron的api\n\n\n# 使用方法\n\nconst ee = require('ee-core/ee');\n\n\n\n# api列表\n\n\n# coreapp\n\n等于this.app对象。详情见：coreapp\n\nconst { coreapp } = ee;\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"electron",frontmatter:{title:"electron",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/338aae/",article:!1},regularPath:"/03.api/002.API/045.electron.html",relativePath:"03.api/002.API/045.electron.md",key:"v-15582085",path:"/pages/338aae/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:85},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:142},{level:3,title:"mainWindow",slug:"mainwindow",normalizedTitle:"mainwindow",charIndex:152},{level:3,title:"extra",slug:"extra",normalizedTitle:"extra",charIndex:222}],headersStr:"介绍 使用方法 API列表 mainWindow extra",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n框架封装的electron功能，将在此模块提供API。\n\n注：子进程中无法使用所有涉及electron的api\n\n\n# 使用方法\n\nconst Electron = require('ee-core/electron');\n\n\n\n# API列表\n\n\n# mainWindow\n\n返回主窗口对象。包含BrowserWindow的所有实例api\n\nElectron.mainWindow\n\n\n\n# extra\n\n返回 Object 。其中closeWindow属性，用来控制窗口退出。",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n框架封装的electron功能，将在此模块提供api。\n\n注：子进程中无法使用所有涉及electron的api\n\n\n# 使用方法\n\nconst electron = require('ee-core/electron');\n\n\n\n# api列表\n\n\n# mainwindow\n\n返回主窗口对象。包含browserwindow的所有实例api\n\nelectron.mainwindow\n\n\n\n# extra\n\n返回 object 。其中closewindow属性，用来控制窗口退出。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"electron/app",frontmatter:{title:"electron/app",date:"2023-05-26T11:12:18.000Z",article:!1,permalink:"/pages/fc1e81/"},regularPath:"/03.api/002.API/046.electron-app.html",relativePath:"03.api/002.API/046.electron-app.md",key:"v-9db5bb36",path:"/pages/fc1e81/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:89},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:157},{level:3,title:"create",slug:"create",normalizedTitle:"create",charIndex:167}],headersStr:"介绍 使用方法 API列表 create",content:"> ee-core：v2.2.0\n\n\n# 介绍\n\n框架封装的electron app功能，将在此模块提供API。\n\n注：子进程中无法使用所有涉及electron的api\n\n\n# 使用方法\n\nconst CoreElectronApp = require('ee-core/electron/app');\n\n\n\n# API列表\n\n\n# create\n\n创建electron应用，ee-core使用，开发者忽略。",normalizedContent:"> ee-core：v2.2.0\n\n\n# 介绍\n\n框架封装的electron app功能，将在此模块提供api。\n\n注：子进程中无法使用所有涉及electron的api\n\n\n# 使用方法\n\nconst coreelectronapp = require('ee-core/electron/app');\n\n\n\n# api列表\n\n\n# create\n\n创建electron应用，ee-core使用，开发者忽略。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"electron/window",frontmatter:{title:"electron/window",date:"2023-05-26T11:12:18.000Z",article:!1,permalink:"/pages/ace333/"},regularPath:"/03.api/002.API/047.electron-window.html",relativePath:"03.api/002.API/047.electron-window.md",key:"v-1c66ce13",path:"/pages/ace333/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:92},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:166},{level:3,title:"getMainWindow()",slug:"getmainwindow",normalizedTitle:"getmainwindow()",charIndex:176},{level:3,title:"createMainWindow()",slug:"createmainwindow",normalizedTitle:"createmainwindow()",charIndex:211},{level:3,title:"restoreMainWindow()",slug:"restoremainwindow",normalizedTitle:"restoremainwindow()",charIndex:266}],headersStr:"介绍 使用方法 API列表 getMainWindow() createMainWindow() restoreMainWindow()",content:"> ee-core：v2.2.0\n\n\n# 介绍\n\n框架封装的electron window功能，将在此模块提供API。\n\n注：子进程中无法使用所有涉及electron的api\n\n\n# 使用方法\n\nconst CoreElectronWindow = require('ee-core/electron/window');\n\n\n\n# API列表\n\n\n# getMainWindow()\n\n获取已经创建的主窗口对象。\n\n\n# createMainWindow()\n\n创建electron主窗口，ee-core使用，开发者忽略。\n\n\n# restoreMainWindow()\n\n还原主窗口。",normalizedContent:"> ee-core：v2.2.0\n\n\n# 介绍\n\n框架封装的electron window功能，将在此模块提供api。\n\n注：子进程中无法使用所有涉及electron的api\n\n\n# 使用方法\n\nconst coreelectronwindow = require('ee-core/electron/window');\n\n\n\n# api列表\n\n\n# getmainwindow()\n\n获取已经创建的主窗口对象。\n\n\n# createmainwindow()\n\n创建electron主窗口，ee-core使用，开发者忽略。\n\n\n# restoremainwindow()\n\n还原主窗口。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"exception",frontmatter:{title:"exception",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/be2d90/",article:!1},regularPath:"/03.api/002.API/050.exception.html",relativePath:"03.api/002.API/050.exception.md",key:"v-ff627a0a",path:"/pages/be2d90/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:77},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:136},{level:3,title:"start()",slug:"start",normalizedTitle:"start()",charIndex:146},{level:3,title:"uncaughtExceptionHandler()",slug:"uncaughtexceptionhandler",normalizedTitle:"uncaughtexceptionhandler()",charIndex:168},{level:3,title:"unhandledRejectionHandler()",slug:"unhandledrejectionhandler",normalizedTitle:"unhandledrejectionhandler()",charIndex:197}],headersStr:"介绍 使用方法 API列表 start() uncaughtExceptionHandler() unhandledRejectionHandler()",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n捕获异常模块。主进程和childJob功能已经启用。如果你有自己实现的子进程功能，才需要使用。\n\n\n# 使用方法\n\nconst Exception = require('ee-core/exception');\n\n\n\n# API列表\n\n\n# start()\n\n开启异常捕获。会同时调用 uncaughtExceptionHandler() / unhandledRejectionHandler()\n\nException.start();\n\n\n\n# uncaughtExceptionHandler()\n\n当进程上抛出异常而没有被捕获时触发该事件，并且使异常静默\n\n\n# unhandledRejectionHandler()\n\n当promise中reject的异常在同步任务中没有使用catch捕获就会触发该事件，即便是在异步情况下使用了catch也会触发该事件。",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n捕获异常模块。主进程和childjob功能已经启用。如果你有自己实现的子进程功能，才需要使用。\n\n\n# 使用方法\n\nconst exception = require('ee-core/exception');\n\n\n\n# api列表\n\n\n# start()\n\n开启异常捕获。会同时调用 uncaughtexceptionhandler() / unhandledrejectionhandler()\n\nexception.start();\n\n\n\n# uncaughtexceptionhandler()\n\n当进程上抛出异常而没有被捕获时触发该事件，并且使异常静默\n\n\n# unhandledrejectionhandler()\n\n当promise中reject的异常在同步任务中没有使用catch捕获就会触发该事件，即便是在异步情况下使用了catch也会触发该事件。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"httpclient",frontmatter:{title:"httpclient",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/1a0cf7/",article:!1},regularPath:"/03.api/002.API/055.httpclient.html",relativePath:"03.api/002.API/055.httpclient.md",key:"v-25cf1a76",path:"/pages/1a0cf7/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:38},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:176},{level:3,title:"curl(url, args, callback)",slug:"curl-url-args-callback",normalizedTitle:"curl(url, args, callback)",charIndex:186},{level:3,title:"request(url, args, callback)",slug:"request-url-args-callback",normalizedTitle:"request(url, args, callback)",charIndex:313},{level:4,title:"method: String",slug:"method-string",normalizedTitle:"method: string",charIndex:664},{level:4,title:"data: Object",slug:"data-object",normalizedTitle:"data: object",charIndex:741},{level:4,title:"content: String|Buffer",slug:"content-string-buffer",normalizedTitle:"content: string|buffer",charIndex:1281},{level:4,title:"files: Mixed",slug:"files-mixed",normalizedTitle:"files: mixed",charIndex:1517},{level:4,title:"stream: ReadStream",slug:"stream-readstream",normalizedTitle:"stream: readstream",charIndex:1917},{level:4,title:"writeStream: WriteStream",slug:"writestream-writestream",normalizedTitle:"writestream: writestream",charIndex:2093},{level:4,title:"consumeWriteStream: Boolean",slug:"consumewritestream-boolean",normalizedTitle:"consumewritestream: boolean",charIndex:2290},{level:4,title:"method: String",slug:"method-string-2",normalizedTitle:"method: string",charIndex:664},{level:4,title:"contentType: String",slug:"contenttype-string",normalizedTitle:"contenttype: string",charIndex:2488},{level:4,title:"dataType: String",slug:"datatype-string",normalizedTitle:"datatype: string",charIndex:2750},{level:4,title:"fixJSONCtlChars: Boolean",slug:"fixjsonctlchars-boolean",normalizedTitle:"fixjsonctlchars: boolean",charIndex:3082},{level:4,title:"headers: Object",slug:"headers-object",normalizedTitle:"headers: object",charIndex:3275},{level:4,title:"timeout: Number|Array",slug:"timeout-number-array",normalizedTitle:"timeout: number|array",charIndex:3362},{level:4,title:"agent: HttpAgent",slug:"agent-httpagent",normalizedTitle:"agent: httpagent",charIndex:3592},{level:4,title:"httpsAgent: HttpsAgent",slug:"httpsagent-httpsagent",normalizedTitle:"httpsagent: httpsagent",charIndex:3707},{level:4,title:"auth: String",slug:"auth-string",normalizedTitle:"auth: string",charIndex:3834},{level:4,title:"gzip: Boolean",slug:"gzip-boolean",normalizedTitle:"gzip: boolean",charIndex:3991},{level:4,title:"timing: Boolean",slug:"timing-boolean",normalizedTitle:"timing: boolean",charIndex:4165}],headersStr:"介绍 使用方法 API列表 curl(url, args, callback) request(url, args, callback) method: String data: Object content: String|Buffer files: Mixed stream: ReadStream writeStream: WriteStream consumeWriteStream: Boolean method: String contentType: String dataType: String fixJSONCtlChars: Boolean headers: Object timeout: Number|Array agent: HttpAgent httpsAgent: HttpsAgent auth: String gzip: Boolean timing: Boolean",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\nhttp客户端。\n\n\n# 使用方法\n\nconst HttpClient = require('ee-core/httpclient');\n\nconst hc = new HttpClient();\nconst result = await hc.request(url, options);\n\n\n\n# API列表\n\n\n# curl(url, args, callback)\n\n发送http请求的方法，以下三种效果相同：\n\nconst hc = new HttpClient();\nhc.curl();\nhc.request();\n\nthis.app.curl();\n\n\n\n# request(url, args, callback)\n\n * url [String] - url地址\n * args [Object] - 参数\n * callback [Function] - 回调\n\n示例：发送http请求\n\nconst url = \"https://api.wrdan.com/ip\";\nconst options = {\n  method: 'GET',\n  data: {\n    url: 'https://www.baidu.com',\n  },\n  dataType: 'json',\n  timeout: 15000,  \n};\nconst result = await hc.request(url, options);\n\n\nargs参数说明**：**\n\n# method: String\n\n设置请求方法，默认是 GET。 支持 GET、POST、PUT、DELETE、PATCH 等所有 HTTP 方法。\n\n# data: Object\n\n需要发送的请求数据，根据 method 自动选择正确的数据处理方式。\n\n 1. GET，HEAD：通过 querystring.stringify(data) 处理后拼接到 url 的 query 参数上。\n 2. POST，PUT 和 DELETE 等：需要根据 contentType 做进一步判断处理。\n    1. contentType = json：通过 JSON.stringify(data) 处理，并设置为 body 发送。\n    2. 其他：通过 querystring.stringify(data) 处理，并设置为 body 发送。\n\n// GET + data\nhc.curl(url, {\n  data: { foo: 'bar' },\n});\n\n// POST + data\nhc.curl(url, {\n  method: 'POST',\n  data: { foo: 'bar' },\n});\n\n// POST + JSON + data\nhc.curl(url, {\n  method: 'POST',\n  contentType: 'json',\n  data: { foo: 'bar' },\n});\n\n\n# content: String|Buffer\n\n发送请求正文，如果设置了此参数，那么会直接忽略 data 参数。\n\nhc.curl(url, {\n  method: 'POST',\n  // 直接发送原始 xml 数据，不需要 HttpClient 做特殊处理\n  content: '<xml><hello>world</hello></xml>',\n  headers: {\n    'content-type': 'text/html',\n  },\n});\n\n\n# files: Mixed\n\n文件上传，支持格式： String | ReadStream | Buffer | Array | Object。\n\nhc.curl(url, {\n  method: 'POST',\n  files: '/path/to/read',\n  data: {\n    foo: 'other fields',\n  },\n});\n\n\n多文件上传：\n\nhc.curl(url, {\n  method: 'POST',\n  files: {\n    file1: '/path/to/read',\n    file2: fs.createReadStream(__filename),\n    file3: Buffer.from('mock file content'),\n  },\n  data: {\n    foo: 'other fields',\n  },\n});\n\n\n# stream: ReadStream\n\n设置发送请求正文的可读数据流，默认是 null。 一旦设置了此参数，HttpClient 将会忽略 data 和 content。\n\nhc.curl(url, {\n  method: 'POST',\n  stream: fs.createReadStream('/path/to/read'),\n});\n\n\n# writeStream: WriteStream\n\n设置接受响应数据的可写数据流，默认是 null。 一旦设置此参数，那么返回值 result.data 将会被设置为 null， 因为数据已经全部写入到 writeStream 中了。\n\nhc.curl(url, {\n  writeStream: fs.createWriteStream('/path/to/store'),\n});\n\n\n# consumeWriteStream: Boolean\n\n是否等待 writeStream 完全写完才算响应全部接收完毕，默认是 true。 此参数不建议修改默认值，除非我们明确知道它的副作用是可接受的， 否则很可能会导致 writeStream 数据不完整。\n\n# method: String\n\n设置请求方法，默认是 GET。 支持 GET、POST、PUT、DELETE、PATCH\n\n# contentType: String\n\n设置请求数据格式，默认是 undefined，HttpClient 会自动根据 data 和 content 参数自动设置。data 是 object 的时候默认设置的是 form。支持 json 格式。 如需要以 JSON 格式发送 data：\n\nhc.curl(url, {\n  method: 'POST',\n  data: {\n    foo: 'bar',\n    now: Date.now(),\n  },\n  contentType: 'json',\n});\n\n\n# dataType: String\n\n设置响应数据格式，默认不对响应数据做任何处理，直接返回原始的 buffer 格式数据。 支持 text 和 json 两种格式。 注意：设置成 json 时，如果响应数据解析失败会抛 JSONResponseFormatError 异常。\n\nconst jsonResult = await hc.curl(url, {\n  dataType: 'json',\n});\nconsole.log(jsonResult.data);\n\nconst htmlResult = await hc.curl(url, {\n  dataType: 'text',\n});\nconsole.log(htmlResult.data);\n\n\n# fixJSONCtlChars: Boolean\n\n是否自动过滤响应数据中的特殊控制字符 (U+0000 ~ U+001F)，默认是 false。 通常一些 CGI 系统返回的 JSON 数据会包含这些特殊控制字符，通过此参数可以自动过滤掉它们。\n\nhc.curl(url, {\n  fixJSONCtlChars: true,\n  dataType: 'json',\n});\n\n\n# headers: Object\n\n自定义请求头。\n\nhc.curl(url, {\n  headers: {\n    'x-foo': 'bar',\n  },\n});\n\n\n# timeout: Number|Array\n\n请求超时时间，默认是 [ 5000, 5000 ]，即创建连接超时是 5 秒，接收响应超时是 5 秒。\n\nctx.curl(url, {\n  // 创建连接超时 3 秒，接收响应超时 3 秒\n  timeout: 3000,\n});\n\nctx.curl(url, {\n  // 创建连接超时 1 秒，接收响应超时 30 秒，用于响应比较大的场景\n  timeout: [1000, 30000],\n});\n\n\n# agent: HttpAgent\n\n允许通过此参数覆盖默认的 HttpAgent，如果你不想开启 KeepAlive，可以设置此参数为 false。\n\nhc.curl(url, {\n  agent: false,\n});\n\n\n# httpsAgent: HttpsAgent\n\n允许通过此参数覆盖默认的 HttpsAgent，如果你不想开启 KeepAlive，可以设置此参数为 false。\n\nhc.curl(url, {\n  httpsAgent: false,\n});\n\n\n# auth: String\n\n简单登录授权（Basic Authentication）参数，将以明文方式将登录信息以 Authorization 请求头发送出去。\n\nhc.curl(url, {\n  // 参数必须按照 `user:password` 格式设置\n  auth: 'foo:bar',\n});\n\n\n# gzip: Boolean\n\n是否支持 gzip 响应格式，默认为 false。 开启 gzip 之后，HttpClient 将自动设置 Accept-Encoding: gzip 请求头， 并且会自动解压带 Content-Encoding: gzip 响应头的数据。\n\nhc.curl(url, {\n  gzip: true,\n});\n\n\n# timing: Boolean\n\n是否开启请求各阶段的时间测量，默认为 false。 开启 timing 之后，可以通过 result.res.timing 拿到这次 HTTP 请求各阶段的时间测量值（单位是毫秒）， 通过这些测量值，我们可以非常方便地定位到这次请求最慢的环境发生在那个阶段，效果如同 Chrome network timing 的作用。 timing 各阶段测量值解析：\n\n * queuing：分配 socket 耗时\n * dnslookup：DNS 查询耗时\n * connected：socket 三次握手连接成功耗时\n * requestSent：请求数据完整发送完毕耗时\n * waiting：收到第一个字节的响应数据耗时\n * contentDownload：全部响应数据接收完毕耗时\n\nconst result = await hc.curl(url, {\n  timing: true,\n});\nconsole.log(result.res.timing);\n// {\n//   \"queuing\":29,\n//   \"dnslookup\":37,\n//   \"connected\":370,\n//   \"requestSent\":1001,\n//   \"waiting\":1833,\n//   \"contentDownload\":3416\n// }\n",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\nhttp客户端。\n\n\n# 使用方法\n\nconst httpclient = require('ee-core/httpclient');\n\nconst hc = new httpclient();\nconst result = await hc.request(url, options);\n\n\n\n# api列表\n\n\n# curl(url, args, callback)\n\n发送http请求的方法，以下三种效果相同：\n\nconst hc = new httpclient();\nhc.curl();\nhc.request();\n\nthis.app.curl();\n\n\n\n# request(url, args, callback)\n\n * url [string] - url地址\n * args [object] - 参数\n * callback [function] - 回调\n\n示例：发送http请求\n\nconst url = \"https://api.wrdan.com/ip\";\nconst options = {\n  method: 'get',\n  data: {\n    url: 'https://www.baidu.com',\n  },\n  datatype: 'json',\n  timeout: 15000,  \n};\nconst result = await hc.request(url, options);\n\n\nargs参数说明**：**\n\n# method: string\n\n设置请求方法，默认是 get。 支持 get、post、put、delete、patch 等所有 http 方法。\n\n# data: object\n\n需要发送的请求数据，根据 method 自动选择正确的数据处理方式。\n\n 1. get，head：通过 querystring.stringify(data) 处理后拼接到 url 的 query 参数上。\n 2. post，put 和 delete 等：需要根据 contenttype 做进一步判断处理。\n    1. contenttype = json：通过 json.stringify(data) 处理，并设置为 body 发送。\n    2. 其他：通过 querystring.stringify(data) 处理，并设置为 body 发送。\n\n// get + data\nhc.curl(url, {\n  data: { foo: 'bar' },\n});\n\n// post + data\nhc.curl(url, {\n  method: 'post',\n  data: { foo: 'bar' },\n});\n\n// post + json + data\nhc.curl(url, {\n  method: 'post',\n  contenttype: 'json',\n  data: { foo: 'bar' },\n});\n\n\n# content: string|buffer\n\n发送请求正文，如果设置了此参数，那么会直接忽略 data 参数。\n\nhc.curl(url, {\n  method: 'post',\n  // 直接发送原始 xml 数据，不需要 httpclient 做特殊处理\n  content: '<xml><hello>world</hello></xml>',\n  headers: {\n    'content-type': 'text/html',\n  },\n});\n\n\n# files: mixed\n\n文件上传，支持格式： string | readstream | buffer | array | object。\n\nhc.curl(url, {\n  method: 'post',\n  files: '/path/to/read',\n  data: {\n    foo: 'other fields',\n  },\n});\n\n\n多文件上传：\n\nhc.curl(url, {\n  method: 'post',\n  files: {\n    file1: '/path/to/read',\n    file2: fs.createreadstream(__filename),\n    file3: buffer.from('mock file content'),\n  },\n  data: {\n    foo: 'other fields',\n  },\n});\n\n\n# stream: readstream\n\n设置发送请求正文的可读数据流，默认是 null。 一旦设置了此参数，httpclient 将会忽略 data 和 content。\n\nhc.curl(url, {\n  method: 'post',\n  stream: fs.createreadstream('/path/to/read'),\n});\n\n\n# writestream: writestream\n\n设置接受响应数据的可写数据流，默认是 null。 一旦设置此参数，那么返回值 result.data 将会被设置为 null， 因为数据已经全部写入到 writestream 中了。\n\nhc.curl(url, {\n  writestream: fs.createwritestream('/path/to/store'),\n});\n\n\n# consumewritestream: boolean\n\n是否等待 writestream 完全写完才算响应全部接收完毕，默认是 true。 此参数不建议修改默认值，除非我们明确知道它的副作用是可接受的， 否则很可能会导致 writestream 数据不完整。\n\n# method: string\n\n设置请求方法，默认是 get。 支持 get、post、put、delete、patch\n\n# contenttype: string\n\n设置请求数据格式，默认是 undefined，httpclient 会自动根据 data 和 content 参数自动设置。data 是 object 的时候默认设置的是 form。支持 json 格式。 如需要以 json 格式发送 data：\n\nhc.curl(url, {\n  method: 'post',\n  data: {\n    foo: 'bar',\n    now: date.now(),\n  },\n  contenttype: 'json',\n});\n\n\n# datatype: string\n\n设置响应数据格式，默认不对响应数据做任何处理，直接返回原始的 buffer 格式数据。 支持 text 和 json 两种格式。 注意：设置成 json 时，如果响应数据解析失败会抛 jsonresponseformaterror 异常。\n\nconst jsonresult = await hc.curl(url, {\n  datatype: 'json',\n});\nconsole.log(jsonresult.data);\n\nconst htmlresult = await hc.curl(url, {\n  datatype: 'text',\n});\nconsole.log(htmlresult.data);\n\n\n# fixjsonctlchars: boolean\n\n是否自动过滤响应数据中的特殊控制字符 (u+0000 ~ u+001f)，默认是 false。 通常一些 cgi 系统返回的 json 数据会包含这些特殊控制字符，通过此参数可以自动过滤掉它们。\n\nhc.curl(url, {\n  fixjsonctlchars: true,\n  datatype: 'json',\n});\n\n\n# headers: object\n\n自定义请求头。\n\nhc.curl(url, {\n  headers: {\n    'x-foo': 'bar',\n  },\n});\n\n\n# timeout: number|array\n\n请求超时时间，默认是 [ 5000, 5000 ]，即创建连接超时是 5 秒，接收响应超时是 5 秒。\n\nctx.curl(url, {\n  // 创建连接超时 3 秒，接收响应超时 3 秒\n  timeout: 3000,\n});\n\nctx.curl(url, {\n  // 创建连接超时 1 秒，接收响应超时 30 秒，用于响应比较大的场景\n  timeout: [1000, 30000],\n});\n\n\n# agent: httpagent\n\n允许通过此参数覆盖默认的 httpagent，如果你不想开启 keepalive，可以设置此参数为 false。\n\nhc.curl(url, {\n  agent: false,\n});\n\n\n# httpsagent: httpsagent\n\n允许通过此参数覆盖默认的 httpsagent，如果你不想开启 keepalive，可以设置此参数为 false。\n\nhc.curl(url, {\n  httpsagent: false,\n});\n\n\n# auth: string\n\n简单登录授权（basic authentication）参数，将以明文方式将登录信息以 authorization 请求头发送出去。\n\nhc.curl(url, {\n  // 参数必须按照 `user:password` 格式设置\n  auth: 'foo:bar',\n});\n\n\n# gzip: boolean\n\n是否支持 gzip 响应格式，默认为 false。 开启 gzip 之后，httpclient 将自动设置 accept-encoding: gzip 请求头， 并且会自动解压带 content-encoding: gzip 响应头的数据。\n\nhc.curl(url, {\n  gzip: true,\n});\n\n\n# timing: boolean\n\n是否开启请求各阶段的时间测量，默认为 false。 开启 timing 之后，可以通过 result.res.timing 拿到这次 http 请求各阶段的时间测量值（单位是毫秒）， 通过这些测量值，我们可以非常方便地定位到这次请求最慢的环境发生在那个阶段，效果如同 chrome network timing 的作用。 timing 各阶段测量值解析：\n\n * queuing：分配 socket 耗时\n * dnslookup：dns 查询耗时\n * connected：socket 三次握手连接成功耗时\n * requestsent：请求数据完整发送完毕耗时\n * waiting：收到第一个字节的响应数据耗时\n * contentdownload：全部响应数据接收完毕耗时\n\nconst result = await hc.curl(url, {\n  timing: true,\n});\nconsole.log(result.res.timing);\n// {\n//   \"queuing\":29,\n//   \"dnslookup\":37,\n//   \"connected\":370,\n//   \"requestsent\":1001,\n//   \"waiting\":1833,\n//   \"contentdownload\":3416\n// }\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"jobs",frontmatter:{title:"jobs",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/c6ede4/",article:!1},regularPath:"/03.api/002.API/060.jobs.html",relativePath:"03.api/002.API/060.jobs.md",key:"v-cb633736",path:"/pages/c6ede4/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:35},{level:3,title:"第三方使用",slug:"第三方使用",normalizedTitle:"第三方使用",charIndex:84},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:171},{level:4,title:"ChildJob",slug:"childjob",normalizedTitle:"childjob",charIndex:180},{level:4,title:"ChildPoolJob",slug:"childpooljob",normalizedTitle:"childpooljob",charIndex:284},{level:4,title:"RendererJob",slug:"rendererjob",normalizedTitle:"rendererjob",charIndex:406}],headersStr:"介绍 使用方法 第三方使用 API列表 ChildJob ChildPoolJob RendererJob",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n任务模块。\n\n\n# 使用方法\n\nconst Jobs = require('ee-core/jobs');\n\n\n\n# 第三方使用\n\n 1. 创建job文件\n\n在项目根目录创建 ./electron/jobs/example/timer.js 文件，job示例代码\n\n 2. 使用同上\n\n\n# API列表\n\n# ChildJob\n\n获取一个子进程任务类。该功能基于node.js的child_process模块实现。\n\nconst { ChildJob } = require('ee-core/jobs');\n\n\n# ChildPoolJob\n\n创建一批进程常驻内存，传递任务后直接执行。该功能基于node.js的child_process模块实现。\n\nconst { ChildPoolJob } = require('ee-core/jobs');\n\n\n# RendererJob\n\n注：开发中，待验证。 获取一个任务类。该功能基于electron的渲染进程实现。\n\nconst { RendererJob } = require('ee-core/jobs');\n",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n任务模块。\n\n\n# 使用方法\n\nconst jobs = require('ee-core/jobs');\n\n\n\n# 第三方使用\n\n 1. 创建job文件\n\n在项目根目录创建 ./electron/jobs/example/timer.js 文件，job示例代码\n\n 2. 使用同上\n\n\n# api列表\n\n# childjob\n\n获取一个子进程任务类。该功能基于node.js的child_process模块实现。\n\nconst { childjob } = require('ee-core/jobs');\n\n\n# childpooljob\n\n创建一批进程常驻内存，传递任务后直接执行。该功能基于node.js的child_process模块实现。\n\nconst { childpooljob } = require('ee-core/jobs');\n\n\n# rendererjob\n\n注：开发中，待验证。 获取一个任务类。该功能基于electron的渲染进程实现。\n\nconst { rendererjob } = require('ee-core/jobs');\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"jobs/ChildJob",frontmatter:{title:"jobs/ChildJob",date:"2023-06-21T11:12:18.000Z",permalink:"/pages/cb31a1/",article:!1},regularPath:"/03.api/002.API/061.jobs-childjob.html",relativePath:"03.api/002.API/061.jobs-childjob.md",key:"v-e4e3fbae",path:"/pages/cb31a1/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:187},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:273},{level:3,title:"job.jobs",slug:"job-jobs",normalizedTitle:"job.jobs",charIndex:283},{level:3,title:"job.exec(filepath, params = {}, opt = {})",slug:"job-exec-filepath-params-opt",normalizedTitle:"job.exec(filepath, params = {}, opt = {})",charIndex:337},{level:3,title:"job.execPromise(filepath, params = {}, opt = {})",slug:"job-execpromise-filepath-params-opt",normalizedTitle:"job.execpromise(filepath, params = {}, opt = {})",charIndex:1275},{level:3,title:"job.getPids()",slug:"job-getpids",normalizedTitle:"job.getpids()",charIndex:1556},{level:3,title:"EventEmitter",slug:"eventemitter",normalizedTitle:"eventemitter",charIndex:1605},{level:3,title:"job.on(eventName, callback)",slug:"job-on-eventname-callback",normalizedTitle:"job.on(eventname, callback)",charIndex:1681},{level:3,title:"ForkProcess",slug:"forkprocess",normalizedTitle:"forkprocess",charIndex:2103},{level:4,title:"myProc.emitter",slug:"myproc-emitter",normalizedTitle:"myproc.emitter",charIndex:2331},{level:4,title:"myProc.child",slug:"myproc-child",normalizedTitle:"myproc.child",charIndex:3236},{level:4,title:"myProc.pid",slug:"myproc-pid",normalizedTitle:"myproc.pid",charIndex:3284},{level:4,title:"myProc.dispatch(cmd, jobPath = '', params = {})",slug:"myproc-dispatch-cmd-jobpath-params",normalizedTitle:"myproc.dispatch(cmd, jobpath = '', params = {})",charIndex:3306},{level:4,title:"myProc.kill()",slug:"myproc-kill",normalizedTitle:"myproc.kill()",charIndex:3381},{level:4,title:"myProc.sleep()",slug:"myproc-sleep",normalizedTitle:"myproc.sleep()",charIndex:3455},{level:4,title:"myProc.wakeup()",slug:"myproc-wakeup",normalizedTitle:"myproc.wakeup()",charIndex:3507}],headersStr:"介绍 使用方法 API列表 job.jobs job.exec(filepath, params = {}, opt = {}) job.execPromise(filepath, params = {}, opt = {}) job.getPids() EventEmitter job.on(eventName, callback) ForkProcess myProc.emitter myProc.child myProc.pid myProc.dispatch(cmd, jobPath = '', params = {}) myProc.kill() myProc.sleep() myProc.wakeup()",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\nChildJob基于node.js子进程实现。触发任务时才会创建进程，任务执行完毕后，必须调用进程退出的方法：Ps.exit()， 否则进程无法退出，造成资源浪费。\n\n优点：随用随取，用完释放，不过多占用电脑资源。\n\n不足：频繁、大量创建任务时，会有启动进程的开销，业务略微延迟，可使用ChildPoolJob功能\n\n\n# 使用方法\n\nconst { ChildJob } = require('ee-core/jobs');\n\nconst job = new ChildJob();\n\n\n\n# API列表\n\n\n# job.jobs\n\n> ee-core：v2.1.0\n\n属性，返回通过exec创建的实例对象集合。\n\n\n# job.exec(filepath, params = {}, opt = {})\n\n * filepath [String] - ./jobs 目录的相对路径；或者绝对路径。\n * params [Object] - 传递的参数\n * opt [Object] - 进程参数\n\n启动一个新进程，执行一个job文件。\n\n# 示例文件\n# ./electron/service/example.js\n\n/**\n * 执行任务\n */ \ndoJob(jobId, action, event) {\n  let res = {};\n  let oneTask;\n  const channel = 'controller.example.timerJobProgress';\n  if (action == 'create') {\n    // 执行任务及监听进度\n    let eventName = 'job-timer-progress-' + jobId;\n    const timerTask = job.exec('./jobs/example/timer', {jobId});\n    timerTask.emitter.on(eventName, (data) => {\n      Log.info('[main-process] timerTask, from TimerJob data:', data);\n      // 发送数据到渲染进程\n      event.sender.send(`${channel}`, data)\n    })\n\n    res.pid = timerTask.pid; \n    this.taskForJob[jobId] = timerTask;\n  }\n  if (action == 'close') {\n    oneTask = this.taskForJob[jobId];\n    oneTask.kill();\n    event.sender.send(`${channel}`, {jobId, number:0, pid:0});\n  }    \n\n  return res;\n}\n\n\n\n# job.execPromise(filepath, params = {}, opt = {})\n\n> ee-core：v2.1.0\n\njob.execPromise('./jobs/example/timer', {jobId}).then(task => {\n  let eventName = 'job-timer-progress-' + jobId;\n  task.emitter.on(eventName, (data) => {\n    // ...\n  })\n});\n\n\nexec()的异步语法，启动一个新进程，异步执行一个job文件。\n\n\n# job.getPids()\n\n> ee-core：v2.1.0\n\n获取当前pids数组。\n\n\n# EventEmitter\n\nChildJob继承于events模块，因此实例化后的对象，可以使用EventEmitter所有方法。如：on()\n\n\n# job.on(eventName, callback)\n\n监听一个事件对象，执行回调。注：子进程（并发任务）同时有多个的情况下，可能无法区分来源。\n\n# 示例文件\n# ./electron/service/example.js\nlet eventName = 'job-timer-progress-' + jobId;\njob.on(eventName, (data) => {\n  // ...\n})\n\n# ./electron/jobs/timer.js\nconst Message = require('ee-core/message');\n\nlet childMessage = Message.childMessage;\nlet eventName = 'job-timer-progress-' + jobId;\nchildMessage.sendToMain(eventName, {jobId, number});\n\n\n\n# ForkProcess\n\n通过exec() / execPromise() 返回的进程对象。\n\nconst myProc = job.exec('./jobs/example/timer', {jobId});\n\n# or\njob.runPromise('./jobs/example/timer', {jobId}).then(myProc => {\n  let eventName = 'job-timer-progress-' + jobId;\n  myProc.emitter.on(eventName, (data) => {\n    // ...\n  })\n});\n\n\n# myProc.emitter\n\n> ee-core：v2.1.0\n\n实例化后的EventEmitter模块对象。\n\n * 方法列表：\n\nemitter.addListener(eventName, listener)\nemitter.emit(eventName[, ...args])\nemitter.eventNames()\nemitter.getMaxListeners()\nemitter.listenerCount(eventName)\nemitter.listeners(eventName)\nemitter.off(eventName, listener)\nemitter.on(eventName, listener)\nemitter.once(eventName, listener)\nemitter.prependListener(eventName, listener)\nemitter.prependOnceListener(eventName, listener)\nemitter.removeAllListeners([eventName])\nemitter.removeListener(eventName, listener)\nemitter.setMaxListeners(n)\nemitter.rawListeners(eventName)\nemitter[Symbol.for('nodejs.rejection')](err, eventName[, ...args])\n\n\n * 使用\n\n// 执行任务及监听进度\nconst myProc = job.exec('./jobs/example/timer', {jobId});\nlet eventName = 'job-timer-progress-' + jobId;\nmyProc.emitter.on(eventName, (data) => {\n  // ...\n})\n\n\n# myProc.child\n\n通过child_process模块，fork出来的进程对象。\n\n# myProc.pid\n\n子进程pid\n\n# myProc.dispatch(cmd, jobPath = '', params = {})\n\n> ee-core：v2.1.0\n\n分发任务\n\n# myProc.kill()\n\n> ee-core：v2.1.0\n\n * timeout [Int] - 默认 1000ms\n\nkill子进程\n\n# myProc.sleep()\n\n> ee-core：v2.1.0\n\nsleep（仅Unix平台)\n\n# myProc.wakeup()\n\n> ee-core：v2.1.0\n\nwakeup (仅Unix平台)",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\nchildjob基于node.js子进程实现。触发任务时才会创建进程，任务执行完毕后，必须调用进程退出的方法：ps.exit()， 否则进程无法退出，造成资源浪费。\n\n优点：随用随取，用完释放，不过多占用电脑资源。\n\n不足：频繁、大量创建任务时，会有启动进程的开销，业务略微延迟，可使用childpooljob功能\n\n\n# 使用方法\n\nconst { childjob } = require('ee-core/jobs');\n\nconst job = new childjob();\n\n\n\n# api列表\n\n\n# job.jobs\n\n> ee-core：v2.1.0\n\n属性，返回通过exec创建的实例对象集合。\n\n\n# job.exec(filepath, params = {}, opt = {})\n\n * filepath [string] - ./jobs 目录的相对路径；或者绝对路径。\n * params [object] - 传递的参数\n * opt [object] - 进程参数\n\n启动一个新进程，执行一个job文件。\n\n# 示例文件\n# ./electron/service/example.js\n\n/**\n * 执行任务\n */ \ndojob(jobid, action, event) {\n  let res = {};\n  let onetask;\n  const channel = 'controller.example.timerjobprogress';\n  if (action == 'create') {\n    // 执行任务及监听进度\n    let eventname = 'job-timer-progress-' + jobid;\n    const timertask = job.exec('./jobs/example/timer', {jobid});\n    timertask.emitter.on(eventname, (data) => {\n      log.info('[main-process] timertask, from timerjob data:', data);\n      // 发送数据到渲染进程\n      event.sender.send(`${channel}`, data)\n    })\n\n    res.pid = timertask.pid; \n    this.taskforjob[jobid] = timertask;\n  }\n  if (action == 'close') {\n    onetask = this.taskforjob[jobid];\n    onetask.kill();\n    event.sender.send(`${channel}`, {jobid, number:0, pid:0});\n  }    \n\n  return res;\n}\n\n\n\n# job.execpromise(filepath, params = {}, opt = {})\n\n> ee-core：v2.1.0\n\njob.execpromise('./jobs/example/timer', {jobid}).then(task => {\n  let eventname = 'job-timer-progress-' + jobid;\n  task.emitter.on(eventname, (data) => {\n    // ...\n  })\n});\n\n\nexec()的异步语法，启动一个新进程，异步执行一个job文件。\n\n\n# job.getpids()\n\n> ee-core：v2.1.0\n\n获取当前pids数组。\n\n\n# eventemitter\n\nchildjob继承于events模块，因此实例化后的对象，可以使用eventemitter所有方法。如：on()\n\n\n# job.on(eventname, callback)\n\n监听一个事件对象，执行回调。注：子进程（并发任务）同时有多个的情况下，可能无法区分来源。\n\n# 示例文件\n# ./electron/service/example.js\nlet eventname = 'job-timer-progress-' + jobid;\njob.on(eventname, (data) => {\n  // ...\n})\n\n# ./electron/jobs/timer.js\nconst message = require('ee-core/message');\n\nlet childmessage = message.childmessage;\nlet eventname = 'job-timer-progress-' + jobid;\nchildmessage.sendtomain(eventname, {jobid, number});\n\n\n\n# forkprocess\n\n通过exec() / execpromise() 返回的进程对象。\n\nconst myproc = job.exec('./jobs/example/timer', {jobid});\n\n# or\njob.runpromise('./jobs/example/timer', {jobid}).then(myproc => {\n  let eventname = 'job-timer-progress-' + jobid;\n  myproc.emitter.on(eventname, (data) => {\n    // ...\n  })\n});\n\n\n# myproc.emitter\n\n> ee-core：v2.1.0\n\n实例化后的eventemitter模块对象。\n\n * 方法列表：\n\nemitter.addlistener(eventname, listener)\nemitter.emit(eventname[, ...args])\nemitter.eventnames()\nemitter.getmaxlisteners()\nemitter.listenercount(eventname)\nemitter.listeners(eventname)\nemitter.off(eventname, listener)\nemitter.on(eventname, listener)\nemitter.once(eventname, listener)\nemitter.prependlistener(eventname, listener)\nemitter.prependoncelistener(eventname, listener)\nemitter.removealllisteners([eventname])\nemitter.removelistener(eventname, listener)\nemitter.setmaxlisteners(n)\nemitter.rawlisteners(eventname)\nemitter[symbol.for('nodejs.rejection')](err, eventname[, ...args])\n\n\n * 使用\n\n// 执行任务及监听进度\nconst myproc = job.exec('./jobs/example/timer', {jobid});\nlet eventname = 'job-timer-progress-' + jobid;\nmyproc.emitter.on(eventname, (data) => {\n  // ...\n})\n\n\n# myproc.child\n\n通过child_process模块，fork出来的进程对象。\n\n# myproc.pid\n\n子进程pid\n\n# myproc.dispatch(cmd, jobpath = '', params = {})\n\n> ee-core：v2.1.0\n\n分发任务\n\n# myproc.kill()\n\n> ee-core：v2.1.0\n\n * timeout [int] - 默认 1000ms\n\nkill子进程\n\n# myproc.sleep()\n\n> ee-core：v2.1.0\n\nsleep（仅unix平台)\n\n# myproc.wakeup()\n\n> ee-core：v2.1.0\n\nwakeup (仅unix平台)",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"jobs/ChildPoolJob",frontmatter:{title:"jobs/ChildPoolJob",date:"2023-06-21T11:25:27.000Z",permalink:"/pages/f72716/"},regularPath:"/03.api/002.API/063.jobs-childpooljob.html",relativePath:"03.api/002.API/063.jobs-childpooljob.md",key:"v-2cd68046",path:"/pages/f72716/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:95},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:190},{level:3,title:"pool.children",slug:"pool-children",normalizedTitle:"pool.children",charIndex:200},{level:3,title:"pool.max",slug:"pool-max",normalizedTitle:"pool.max",charIndex:259},{level:3,title:"pool.strategy",slug:"pool-strategy",normalizedTitle:"pool.strategy",charIndex:283},{level:3,title:"pool.weights",slug:"pool-weights",normalizedTitle:"pool.weights",charIndex:329},{level:3,title:"pool.LB",slug:"pool-lb",normalizedTitle:"pool.lb",charIndex:354},{level:3,title:"pool.create(number = 3)",slug:"pool-create-number-3",normalizedTitle:"pool.create(number = 3)",charIndex:377},{level:3,title:"pool.run(filepath, params = {})",slug:"pool-run-filepath-params",normalizedTitle:"pool.run(filepath, params = {})",charIndex:494},{level:3,title:"pool.runPromise(filepath, params = {})",slug:"pool-runpromise-filepath-params",normalizedTitle:"pool.runpromise(filepath, params = {})",charIndex:727},{level:3,title:"pool.getPids()",slug:"pool-getpids",normalizedTitle:"pool.getpids()",charIndex:1563},{level:3,title:"pool.getChildByPid(pid)",slug:"pool-getchildbypid-pid",normalizedTitle:"pool.getchildbypid(pid)",charIndex:1595},{level:3,title:"pool.killAll()",slug:"pool-killall",normalizedTitle:"pool.killall()",charIndex:1653},{level:3,title:"EventEmitter",slug:"eventemitter",normalizedTitle:"eventemitter",charIndex:1681},{level:3,title:"ForkProcess",slug:"forkprocess",normalizedTitle:"forkprocess",charIndex:1754},{level:4,title:"myProc.emitter",slug:"myproc-emitter",normalizedTitle:"myproc.emitter",charIndex:1981},{level:4,title:"myProc.child",slug:"myproc-child",normalizedTitle:"myproc.child",charIndex:2875},{level:4,title:"myProc.pid",slug:"myproc-pid",normalizedTitle:"myproc.pid",charIndex:2923},{level:4,title:"myProc.dispatch(cmd, jobPath = '', params = {})",slug:"myproc-dispatch-cmd-jobpath-params",normalizedTitle:"myproc.dispatch(cmd, jobpath = '', params = {})",charIndex:2945},{level:4,title:"myProc.kill()",slug:"myproc-kill",normalizedTitle:"myproc.kill()",charIndex:3002},{level:4,title:"myProc.sleep()",slug:"myproc-sleep",normalizedTitle:"myproc.sleep()",charIndex:3058},{level:4,title:"myProc.wakeup()",slug:"myproc-wakeup",normalizedTitle:"myproc.wakeup()",charIndex:3092}],headersStr:"介绍 使用方法 API列表 pool.children pool.max pool.strategy pool.weights pool.LB pool.create(number = 3) pool.run(filepath, params = {}) pool.runPromise(filepath, params = {}) pool.getPids() pool.getChildByPid(pid) pool.killAll() EventEmitter ForkProcess myProc.emitter myProc.child myProc.pid myProc.dispatch(cmd, jobPath = '', params = {}) myProc.kill() myProc.sleep() myProc.wakeup()",content:"> ee-core：v2.1.0\n\n\n# 介绍\n\nChildPoolJob基于node.js子进程实现。可以创建一批进程常驻内存，传递任务后直接执行，没有创建、销毁进程的性能开销。\n\n\n# 使用方法\n\nconst { ChildPoolJob } = require('ee-core/jobs');\n\nconst pool = new ChildPoolJob();\n\n\n\n# API列表\n\n\n# pool.children\n\n类属性，返回通过run() / runPromise() 创建的实例对象集合。\n\n\n# pool.max\n\n类属性，最大进程数\n\n\n# pool.strategy\n\n类属性，进程选举算法，默认 'polling' 轮询\n\n\n# pool.weights\n\n类属性，权重\n\n\n# pool.LB\n\n类属性，负载均衡器\n\n\n# pool.create(number = 3)\n\n * number [Int] - 要创建的进程数量\n\n创建一个池子，返回 pids\n\npool.create(3).then(pids => {\n  // ...\n});\n\n\n\n# pool.run(filepath, params = {})\n\n * filepath [String] - ./jobs 目录的相对路径；或者绝对路径。\n * params [Object] - 传递的参数\n\n从进程池中选举出一个进程，然后执行一个job文件。\n\n# ./electron/service/example.js\n\nconst timerTask = pool.run('./jobs/example/timer', {jobId});\n\n\n\n# pool.runPromise(filepath, params = {})\n\nrun()的异步语法\n\n# 示例文件\n# ./electron/service/example.js\n\n/**\n * 通过进程池执行任务\n */ \ndoJobByPool(jobId, action, event) {\n  let res = {};\n  const channel = 'controller.example.timerJobProgress';\n  if (action == 'run') {\n    // 异步-执行任务及监听进度\n    pool.runPromise('./jobs/example/timer', {jobId}).then(task => {\n      // 监听器名称唯一，否则会出现重复监听。\n      // 任务完成时，需要移除监听器，防止内存泄漏\n      let eventName = 'job-timer-progress-' + jobId;\n      task.emitter.on(eventName, (data) => {\n        Log.info('[main-process] [ChildPoolJob] timerTask, from TimerJob data:', data);\n\n        // 发送数据到渲染进程\n        event.sender.send(`${channel}`, data)\n\n        // 如果收到任务完成的消息，移除监听器\n        if (data.end) {\n          task.emitter.removeAllListeners(eventName);\n        }\n      });\n      res.pid = task.pid; \n    });\n  }\n  return res;\n}\n\n\n\n# pool.getPids()\n\n获取当前pids数组。\n\n\n# pool.getChildByPid(pid)\n\n * pid [Int]\n\n通过pid获取一个子进程对象\n\n\n# pool.killAll()\n\n关闭所有进程。\n\n\n# EventEmitter\n\nChildPoolJob继承于events模块，因此实例化后的对象，可以使用EventEmitter所有方法\n\n\n# ForkProcess\n\n通过run() / runPromise() 返回的进程对象。\n\nconst myProc = pool.run('./jobs/example/timer', {jobId});\n\n# or\npool.runPromise('./jobs/example/timer', {jobId}).then(myProc => {\n  let eventName = 'job-timer-progress-' + jobId;\n  myProc.emitter.on(eventName, (data) => {\n    // ...\n  })\n});\n\n\n# myProc.emitter\n\n实例化后的EventEmitter模块对象。\n\n * 方法列表：\n\nemitter.addListener(eventName, listener)\nemitter.emit(eventName[, ...args])\nemitter.eventNames()\nemitter.getMaxListeners()\nemitter.listenerCount(eventName)\nemitter.listeners(eventName)\nemitter.off(eventName, listener)\nemitter.on(eventName, listener)\nemitter.once(eventName, listener)\nemitter.prependListener(eventName, listener)\nemitter.prependOnceListener(eventName, listener)\nemitter.removeAllListeners([eventName])\nemitter.removeListener(eventName, listener)\nemitter.setMaxListeners(n)\nemitter.rawListeners(eventName)\nemitter[Symbol.for('nodejs.rejection')](err, eventName[, ...args])\n\n\n * 使用\n\npool.runPromise('./jobs/example/timer', {jobId}).then(myProc => {\n  let eventName = 'job-timer-progress-' + jobId;\n  myProc.emitter.on(eventName, (data) => {\n    // ...\n  })\n});\n\n\n# myProc.child\n\n通过child_process模块，fork出来的进程对象。\n\n# myProc.pid\n\n子进程pid\n\n# myProc.dispatch(cmd, jobPath = '', params = {})\n\n分发任务\n\n# myProc.kill()\n\n * timeout [Int] - 默认 1000ms\n\nkill子进程\n\n# myProc.sleep()\n\nsleep（仅Unix平台)\n\n# myProc.wakeup()\n\nwakeup (仅Unix平台)",normalizedContent:"> ee-core：v2.1.0\n\n\n# 介绍\n\nchildpooljob基于node.js子进程实现。可以创建一批进程常驻内存，传递任务后直接执行，没有创建、销毁进程的性能开销。\n\n\n# 使用方法\n\nconst { childpooljob } = require('ee-core/jobs');\n\nconst pool = new childpooljob();\n\n\n\n# api列表\n\n\n# pool.children\n\n类属性，返回通过run() / runpromise() 创建的实例对象集合。\n\n\n# pool.max\n\n类属性，最大进程数\n\n\n# pool.strategy\n\n类属性，进程选举算法，默认 'polling' 轮询\n\n\n# pool.weights\n\n类属性，权重\n\n\n# pool.lb\n\n类属性，负载均衡器\n\n\n# pool.create(number = 3)\n\n * number [int] - 要创建的进程数量\n\n创建一个池子，返回 pids\n\npool.create(3).then(pids => {\n  // ...\n});\n\n\n\n# pool.run(filepath, params = {})\n\n * filepath [string] - ./jobs 目录的相对路径；或者绝对路径。\n * params [object] - 传递的参数\n\n从进程池中选举出一个进程，然后执行一个job文件。\n\n# ./electron/service/example.js\n\nconst timertask = pool.run('./jobs/example/timer', {jobid});\n\n\n\n# pool.runpromise(filepath, params = {})\n\nrun()的异步语法\n\n# 示例文件\n# ./electron/service/example.js\n\n/**\n * 通过进程池执行任务\n */ \ndojobbypool(jobid, action, event) {\n  let res = {};\n  const channel = 'controller.example.timerjobprogress';\n  if (action == 'run') {\n    // 异步-执行任务及监听进度\n    pool.runpromise('./jobs/example/timer', {jobid}).then(task => {\n      // 监听器名称唯一，否则会出现重复监听。\n      // 任务完成时，需要移除监听器，防止内存泄漏\n      let eventname = 'job-timer-progress-' + jobid;\n      task.emitter.on(eventname, (data) => {\n        log.info('[main-process] [childpooljob] timertask, from timerjob data:', data);\n\n        // 发送数据到渲染进程\n        event.sender.send(`${channel}`, data)\n\n        // 如果收到任务完成的消息，移除监听器\n        if (data.end) {\n          task.emitter.removealllisteners(eventname);\n        }\n      });\n      res.pid = task.pid; \n    });\n  }\n  return res;\n}\n\n\n\n# pool.getpids()\n\n获取当前pids数组。\n\n\n# pool.getchildbypid(pid)\n\n * pid [int]\n\n通过pid获取一个子进程对象\n\n\n# pool.killall()\n\n关闭所有进程。\n\n\n# eventemitter\n\nchildpooljob继承于events模块，因此实例化后的对象，可以使用eventemitter所有方法\n\n\n# forkprocess\n\n通过run() / runpromise() 返回的进程对象。\n\nconst myproc = pool.run('./jobs/example/timer', {jobid});\n\n# or\npool.runpromise('./jobs/example/timer', {jobid}).then(myproc => {\n  let eventname = 'job-timer-progress-' + jobid;\n  myproc.emitter.on(eventname, (data) => {\n    // ...\n  })\n});\n\n\n# myproc.emitter\n\n实例化后的eventemitter模块对象。\n\n * 方法列表：\n\nemitter.addlistener(eventname, listener)\nemitter.emit(eventname[, ...args])\nemitter.eventnames()\nemitter.getmaxlisteners()\nemitter.listenercount(eventname)\nemitter.listeners(eventname)\nemitter.off(eventname, listener)\nemitter.on(eventname, listener)\nemitter.once(eventname, listener)\nemitter.prependlistener(eventname, listener)\nemitter.prependoncelistener(eventname, listener)\nemitter.removealllisteners([eventname])\nemitter.removelistener(eventname, listener)\nemitter.setmaxlisteners(n)\nemitter.rawlisteners(eventname)\nemitter[symbol.for('nodejs.rejection')](err, eventname[, ...args])\n\n\n * 使用\n\npool.runpromise('./jobs/example/timer', {jobid}).then(myproc => {\n  let eventname = 'job-timer-progress-' + jobid;\n  myproc.emitter.on(eventname, (data) => {\n    // ...\n  })\n});\n\n\n# myproc.child\n\n通过child_process模块，fork出来的进程对象。\n\n# myproc.pid\n\n子进程pid\n\n# myproc.dispatch(cmd, jobpath = '', params = {})\n\n分发任务\n\n# myproc.kill()\n\n * timeout [int] - 默认 1000ms\n\nkill子进程\n\n# myproc.sleep()\n\nsleep（仅unix平台)\n\n# myproc.wakeup()\n\nwakeup (仅unix平台)",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"jobs/rendererjob",frontmatter:{title:"jobs/rendererjob",date:"2023-04-19T11:12:18.000Z",permalink:"/pages/b57859/",article:!1},regularPath:"/03.api/002.API/065.jobs-rendererjob.html",relativePath:"03.api/002.API/065.jobs-rendererjob.md",key:"v-5b4be836",path:"/pages/b57859/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:58},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:158},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0}],headersStr:"介绍 使用方法 API列表 ",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\nRendererJob基于electron渲染进程实现。\n\n\n# 使用方法\n\nconst { RendererJob } = require('ee-core/jobs');\n\nconst myRenderJob = new RendererJob();\n\n\n\n# API列表\n\n开发中......\n\n\n#",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\nrendererjob基于electron渲染进程实现。\n\n\n# 使用方法\n\nconst { rendererjob } = require('ee-core/jobs');\n\nconst myrenderjob = new rendererjob();\n\n\n\n# api列表\n\n开发中......\n\n\n#",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"loader",frontmatter:{title:"loader",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/54c34e/",article:!1},regularPath:"/03.api/002.API/070.loader.html",relativePath:"03.api/002.API/070.loader.md",key:"v-3c69d965",path:"/pages/54c34e/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:127},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:180},{level:3,title:"loadJsFile(filepath)",slug:"loadjsfile-filepath",normalizedTitle:"loadjsfile(filepath)",charIndex:190},{level:3,title:"execJsFile(filepath, ...inject)",slug:"execjsfile-filepath-inject",normalizedTitle:"execjsfile(filepath, ...inject)",charIndex:263},{level:3,title:"resolveModule(filepath)",slug:"resolvemodule-filepath",normalizedTitle:"resolvemodule(filepath)",charIndex:401},{level:3,title:"requireModule(filepath, type = '')",slug:"requiremodule-filepath-type",normalizedTitle:"requiremodule(filepath, type = '')",charIndex:470},{level:3,title:"requireJobsModule(filepath)",slug:"requirejobsmodule-filepath",normalizedTitle:"requirejobsmodule(filepath)",charIndex:954}],headersStr:"介绍 使用方法 API列表 loadJsFile(filepath) execJsFile(filepath, ...inject) resolveModule(filepath) requireModule(filepath, type = '') requireJobsModule(filepath)",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n加载器模块。开发者自己维护的js模块/文件，需要被执行或者在 controller、service、jobs、preload等业务层被调用的时候，可能有路径、加密等问题。使用加载器可以避免它们。\n\n\n# 使用方法\n\nconst Loader = require('ee-core/loader');\n\n\n\n# API列表\n\n\n# loadJsFile(filepath)\n\n * filepath [String] - 文件的绝对路径\n\n加载js文件，返回一个模块。\n\n\n# execJsFile(filepath, ...inject)\n\n * filepath [String] - 文件的绝对路径\n * inject [] - 注入的参数\n\n加载并运行js文件，返回结果。如果文件是class将被实例化，如果是Function将被调用。\n\n\n# resolveModule(filepath)\n\n * filepath [String] - 文件路径\n\n返回文件的绝对路径。\n\n\n# requireModule(filepath, type = '')\n\n * filepath [String] - 文件路径\n * type [String] - 类型\n\n加载模块 (子进程中使用)\n\nconst Loader = require('ee-core/loader');\n\n// 相当于加载 ./electron/jobs/example/hello\nconst Hello = Loader.requireModule('./jobs/example/hello');\nconst Hello = Loader.requireModule('./example/hello', 'jobs');\n\n// 相当于加载 ./electron/library/example/hello\nconst Hello = Loader.requireModule('./library/example/hello');\nconst Hello = Loader.requireModule('./example/hello', 'library');\n\n\n\n# requireJobsModule(filepath)\n\n * filepath [String] - 文件路径\n\n加载模块 (子进程中使用)\n\nconst Loader = require('ee-core/loader');\n\n// 相当于加载 ./electron/jobs/example/hello\nconst Hello = Loader.requireJobsModule('./example/hello');\n",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n加载器模块。开发者自己维护的js模块/文件，需要被执行或者在 controller、service、jobs、preload等业务层被调用的时候，可能有路径、加密等问题。使用加载器可以避免它们。\n\n\n# 使用方法\n\nconst loader = require('ee-core/loader');\n\n\n\n# api列表\n\n\n# loadjsfile(filepath)\n\n * filepath [string] - 文件的绝对路径\n\n加载js文件，返回一个模块。\n\n\n# execjsfile(filepath, ...inject)\n\n * filepath [string] - 文件的绝对路径\n * inject [] - 注入的参数\n\n加载并运行js文件，返回结果。如果文件是class将被实例化，如果是function将被调用。\n\n\n# resolvemodule(filepath)\n\n * filepath [string] - 文件路径\n\n返回文件的绝对路径。\n\n\n# requiremodule(filepath, type = '')\n\n * filepath [string] - 文件路径\n * type [string] - 类型\n\n加载模块 (子进程中使用)\n\nconst loader = require('ee-core/loader');\n\n// 相当于加载 ./electron/jobs/example/hello\nconst hello = loader.requiremodule('./jobs/example/hello');\nconst hello = loader.requiremodule('./example/hello', 'jobs');\n\n// 相当于加载 ./electron/library/example/hello\nconst hello = loader.requiremodule('./library/example/hello');\nconst hello = loader.requiremodule('./example/hello', 'library');\n\n\n\n# requirejobsmodule(filepath)\n\n * filepath [string] - 文件路径\n\n加载模块 (子进程中使用)\n\nconst loader = require('ee-core/loader');\n\n// 相当于加载 ./electron/jobs/example/hello\nconst hello = loader.requirejobsmodule('./example/hello');\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"log",frontmatter:{title:"log",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/0cb46d/",article:!1},regularPath:"/03.api/002.API/075.log.html",relativePath:"03.api/002.API/075.log.md",key:"v-8ffb466a",path:"/pages/0cb46d/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:34},{level:3,title:"日志位置",slug:"日志位置",normalizedTitle:"日志位置",charIndex:146},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:163},{level:3,title:"create(config)",slug:"create-config",normalizedTitle:"create(config)",charIndex:173},{level:3,title:"logger",slug:"logger",normalizedTitle:"logger",charIndex:234},{level:3,title:"coreLogger",slug:"corelogger",normalizedTitle:"corelogger",charIndex:332},{level:3,title:"info",slug:"info",normalizedTitle:"info",charIndex:264},{level:3,title:"error",slug:"error",normalizedTitle:"error",charIndex:282},{level:3,title:"debug",slug:"debug",normalizedTitle:"debug",charIndex:301},{level:3,title:"warn",slug:"warn",normalizedTitle:"warn",charIndex:320}],headersStr:"介绍 使用方法 日志位置 API列表 create(config) logger coreLogger info error debug warn",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n日志模块\n\n\n# 使用方法\n\nconst Log = require('ee-core/log');\n\n# 高级语法，占位符\n%s：字符串\n%d：整数\n%i：整数\n%f：浮点数\n%o：obj对象\n%O：obj对象\n%c：CSS样式\n\n\n\n# 日志位置\n\n见文档：日志\n\n\n# API列表\n\n\n# create(config)\n\n * config [Object] - 日志配置\n\n创建一个自定义的日志实例。\n\n\n# logger\n\n获取业务日志实例。\n\nLog.logger.info()\nLog.logger.error()\nLog.logger.debug()\nLog.logger.warn()\n\n\n\n# coreLogger\n\n获取框架核心日志实例。\n\nLog.coreLogger.info()\nLog.coreLogger.error()\nLog.coreLogger.debug()\nLog.coreLogger.warn()\n\n\n\n# info\n\nLog.info()\n\n\n\n# error\n\nLog.error()\n\n\n\n# debug\n\nLog.debug()\n\n\n\n# warn\n\nLog.warn()\n",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n日志模块\n\n\n# 使用方法\n\nconst log = require('ee-core/log');\n\n# 高级语法，占位符\n%s：字符串\n%d：整数\n%i：整数\n%f：浮点数\n%o：obj对象\n%o：obj对象\n%c：css样式\n\n\n\n# 日志位置\n\n见文档：日志\n\n\n# api列表\n\n\n# create(config)\n\n * config [object] - 日志配置\n\n创建一个自定义的日志实例。\n\n\n# logger\n\n获取业务日志实例。\n\nlog.logger.info()\nlog.logger.error()\nlog.logger.debug()\nlog.logger.warn()\n\n\n\n# corelogger\n\n获取框架核心日志实例。\n\nlog.corelogger.info()\nlog.corelogger.error()\nlog.corelogger.debug()\nlog.corelogger.warn()\n\n\n\n# info\n\nlog.info()\n\n\n\n# error\n\nlog.error()\n\n\n\n# debug\n\nlog.debug()\n\n\n\n# warn\n\nlog.warn()\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"message",frontmatter:{title:"message",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/7e527e/",article:!1},regularPath:"/03.api/002.API/080.message.html",relativePath:"03.api/002.API/080.message.md",key:"v-28761791",path:"/pages/7e527e/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:50},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:105},{level:3,title:"childMessage",slug:"childmessage",normalizedTitle:"childmessage",charIndex:115}],headersStr:"介绍 使用方法 API列表 childMessage",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n消息模块。在主进程和子进程之间发送消息。\n\n\n# 使用方法\n\nconst Message = require('ee-core/message');\n\n\n\n# API列表\n\n\n# childMessage\n\n子进程消息对象。从子进程发送消息到主进程。",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n消息模块。在主进程和子进程之间发送消息。\n\n\n# 使用方法\n\nconst message = require('ee-core/message');\n\n\n\n# api列表\n\n\n# childmessage\n\n子进程消息对象。从子进程发送消息到主进程。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"message/childMessage",frontmatter:{title:"message/childMessage",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/ed2d28/",article:!1},regularPath:"/03.api/002.API/081.message-childmessage.html",relativePath:"03.api/002.API/081.message-childmessage.md",key:"v-623c2036",path:"/pages/ed2d28/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:50},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:114},{level:3,title:"send(eventName, params = {}, receiver)",slug:"send-eventname-params-receiver",normalizedTitle:"send(eventname, params = {}, receiver)",charIndex:124},{level:3,title:"sendToMain(eventName, params = {})",slug:"sendtomain-eventname-params",normalizedTitle:"sendtomain(eventname, params = {})",charIndex:486}],headersStr:"介绍 使用方法 API列表 send(eventName, params = {}, receiver) sendToMain(eventName, params = {})",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n消息模块。在主进程和子进程之间发送消息。\n\n\n# 使用方法\n\nconst { childMessage } = require('ee-core/message');\n\n\n\n# API列表\n\n\n# send(eventName, params = {}, receiver)\n\n * eventName [] - 监听的事件名称\n * params [] - 参数\n * receiver [] - 接收者，值：'job' | 'task'，默认：'task'\n\n向主进程发消息。task.on() 监听的事件。\n\nconst timerTask = this.myJob.exec('./jobs/example/timer', {jobId});\ntimerTask.emitter.on('job-timer-progress', (data) => {\n  // ...\n})\n\n// 发送\nchildMessage.send(eventName, {jobId, number:0, pid:0});\n\n\n\n# sendToMain(eventName, params = {})\n\n * eventName [] - 监听的事件名称\n * params [] - 参数\n\n向主进程发消息，myjob.on() 监听的事件。\n\n# 在主进程任务监听\nmyjob.on('job-timer-progress', (data) => {\n  // some things\n})\n\n# 在子进程发送\nlet eventName = 'job-timer-progress';\nchildMessage.sendToMain(eventName, {jobId, number});\n",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n消息模块。在主进程和子进程之间发送消息。\n\n\n# 使用方法\n\nconst { childmessage } = require('ee-core/message');\n\n\n\n# api列表\n\n\n# send(eventname, params = {}, receiver)\n\n * eventname [] - 监听的事件名称\n * params [] - 参数\n * receiver [] - 接收者，值：'job' | 'task'，默认：'task'\n\n向主进程发消息。task.on() 监听的事件。\n\nconst timertask = this.myjob.exec('./jobs/example/timer', {jobid});\ntimertask.emitter.on('job-timer-progress', (data) => {\n  // ...\n})\n\n// 发送\nchildmessage.send(eventname, {jobid, number:0, pid:0});\n\n\n\n# sendtomain(eventname, params = {})\n\n * eventname [] - 监听的事件名称\n * params [] - 参数\n\n向主进程发消息，myjob.on() 监听的事件。\n\n# 在主进程任务监听\nmyjob.on('job-timer-progress', (data) => {\n  // some things\n})\n\n# 在子进程发送\nlet eventname = 'job-timer-progress';\nchildmessage.sendtomain(eventname, {jobid, number});\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"ps",frontmatter:{title:"ps",date:"2023-05-26T11:12:19.000Z",permalink:"/pages/4b84f2/",article:!1},regularPath:"/03.api/002.API/085.ps.html",relativePath:"03.api/002.API/085.ps.md",key:"v-ace1a136",path:"/pages/4b84f2/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:38},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:83},{level:3,title:"allEnv()",slug:"allenv",normalizedTitle:"allenv()",charIndex:93},{level:3,title:"env()",slug:"env",normalizedTitle:"env()",charIndex:118},{level:3,title:"getEnv()",slug:"getenv",normalizedTitle:"getenv()",charIndex:156},{level:3,title:"isProd()",slug:"isprod",normalizedTitle:"isprod()",charIndex:178},{level:3,title:"isDev()",slug:"isdev",normalizedTitle:"isdev()",charIndex:200},{level:3,title:"isRenderer()",slug:"isrenderer",normalizedTitle:"isrenderer()",charIndex:221},{level:3,title:"isMain()",slug:"ismain",normalizedTitle:"ismain()",charIndex:247},{level:3,title:"isForkedChild()",slug:"isforkedchild",normalizedTitle:"isforkedchild()",charIndex:268},{level:3,title:"processType()",slug:"processtype",normalizedTitle:"processtype()",charIndex:300},{level:3,title:"getHomeDir()",slug:"gethomedir",normalizedTitle:"gethomedir()",charIndex:349},{level:3,title:"getLogDir()",slug:"getlogdir",normalizedTitle:"getlogdir()",charIndex:384},{level:3,title:"getEncryptDir(basePath)",slug:"getencryptdir-basepath",normalizedTitle:"getencryptdir(basepath)",charIndex:410},{level:3,title:"getRootDir()",slug:"getrootdir",normalizedTitle:"getrootdir()",charIndex:478},{level:3,title:"getBaseDir()",slug:"getbasedir",normalizedTitle:"getbasedir()",charIndex:539},{level:3,title:"getElectronDir()",slug:"getelectrondir",normalizedTitle:"getelectrondir()",charIndex:607},{level:3,title:"getExtraResourcesDir()",slug:"getextraresourcesdir",normalizedTitle:"getextraresourcesdir()",charIndex:642},{level:3,title:"getAppUserDataDir()",slug:"getappuserdatadir",normalizedTitle:"getappuserdatadir()",charIndex:680},{level:3,title:"getExecDir()",slug:"getexecdir",normalizedTitle:"getexecdir()",charIndex:732},{level:3,title:"getStorageDir()",slug:"getstoragedir",normalizedTitle:"getstoragedir()",charIndex:790},{level:3,title:"getUserHomeDir()",slug:"getuserhomedir",normalizedTitle:"getuserhomedir()",charIndex:820},{level:3,title:"getMainPort()",slug:"getmainport",normalizedTitle:"getmainport()",charIndex:853},{level:3,title:"getSocketPort()",slug:"getsocketport",normalizedTitle:"getsocketport()",charIndex:880},{level:3,title:"getHttpPort()",slug:"gethttpport",normalizedTitle:"gethttpport()",charIndex:914},{level:3,title:"isPackaged()",slug:"ispackaged",normalizedTitle:"ispackaged()",charIndex:944},{level:3,title:"isEncrypted()",slug:"isencrypted",normalizedTitle:"isencrypted()",charIndex:967},{level:3,title:"isHotReload()",slug:"ishotreload",normalizedTitle:"ishotreload()",charIndex:991},{level:3,title:"exit(code)",slug:"exit-code",normalizedTitle:"exit(code)",charIndex:1016},{level:3,title:"exitChildJob(code)",slug:"exitchildjob-code",normalizedTitle:"exitchildjob(code)",charIndex:1061},{level:3,title:"isChildJob()",slug:"ischildjob",normalizedTitle:"ischildjob()",charIndex:1122},{level:3,title:"isChildPoolJob()",slug:"ischildpooljob",normalizedTitle:"ischildpooljob()",charIndex:1154},{level:3,title:"initMode(mode)",slug:"initmode-mode",normalizedTitle:"initmode(mode)",charIndex:1194},{level:3,title:"mode()",slug:"mode",normalizedTitle:"mode()",charIndex:1277},{level:3,title:"verifyMode()",slug:"verifymode",normalizedTitle:"verifymode()",charIndex:1315},{level:3,title:"isFrameworkMode()",slug:"isframeworkmode",normalizedTitle:"isframeworkmode()",charIndex:1338},{level:3,title:"isModuleMode()",slug:"ismodulemode",normalizedTitle:"ismodulemode()",charIndex:1387}],headersStr:"介绍 使用方法 API列表 allEnv() env() getEnv() isProd() isDev() isRenderer() isMain() isForkedChild() processType() getHomeDir() getLogDir() getEncryptDir(basePath) getRootDir() getBaseDir() getElectronDir() getExtraResourcesDir() getAppUserDataDir() getExecDir() getStorageDir() getUserHomeDir() getMainPort() getSocketPort() getHttpPort() isPackaged() isEncrypted() isHotReload() exit(code) exitChildJob(code) isChildJob() isChildPoolJob() initMode(mode) mode() verifyMode() isFrameworkMode() isModuleMode()",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n进程工具类模块。\n\n\n# 使用方法\n\nconst Ps = require('ee-core/ps');\n\n\n\n# API列表\n\n\n# allEnv()\n\n当前进程的所有env\n\n\n# env()\n\n获取 当前环境，local-本地，prod-生产环境\n\n\n# getEnv()\n\n等于env()\n\n\n# isProd()\n\n是否为生产环境\n\n\n# isDev()\n\n是否为开发环境\n\n\n# isRenderer()\n\n是否为渲染进程\n\n\n# isMain()\n\n是否为主进程\n\n\n# isForkedChild()\n\n是否为node子进程\n\n\n# processType()\n\n当前进程类型：browser、renderer、child\n\n\n# getHomeDir()\n\n获取Home路径，即项目根目录。\n\n\n# getLogDir()\n\n获取日志存储路径\n\n\n# getEncryptDir(basePath)\n\n * basePath (可选)基础路径。默认为null\n\n获取加密文件路径\n\n\n# getRootDir()\n\n获取root目录  (dev：项目根目录，prod：app user data目录)\n\n\n# getBaseDir()\n\n框架中electron目录路径。如果使用加密功能，打包后路径为 ./public/electron\n\n\n# getElectronDir()\n\n获取electron目录\n\n\n# getExtraResourcesDir()\n\n获取 额外资源目录\n\n\n# getAppUserDataDir()\n\n获取 应用程序数据目录 (开发环境时，为项目根目录)\n\n\n# getExecDir()\n\n获取 exec目录，APP安装后，可执行程序（exe、dmg、dep）的根目录\n\n\n# getStorageDir()\n\n获取数据存储路径\n\n\n# getUserHomeDir()\n\n获取操作系统用户目录\n\n\n# getMainPort()\n\n获取主进程端口\n\n\n# getSocketPort()\n\n获取内置socket端口\n\n\n# getHttpPort()\n\n获取内置http端口\n\n\n# isPackaged()\n\n是否打包\n\n\n# isEncrypted()\n\n是否加密\n\n\n# isHotReload()\n\n是否热重启\n\n\n# exit(code)\n\n * code [Number] - 退出码\n\n进程退出\n\n\n# exitChildJob(code)\n\n * code [Number] - 退出码\n\n退出ChildJob进程\n\n\n# isChildJob()\n\n任务类型 ChildJob\n\n\n# isChildPoolJob()\n\n任务类型 ChildPoolJob\n\n\n# initMode(mode)\n\n * mode [String] - framework | module\n\n初始化模式，ee-core内部使用，开发者忽略\n\n\n# mode()\n\n当前模式 - framework | module\n\n\n# verifyMode()\n\n校验模式\n\n\n# isFrameworkMode()\n\n是否为框架模式，ee-core内部使用，开发者忽略\n\n\n# isModuleMode()\n\n是否为模块模式，ee-core内部使用，开发者忽略",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n进程工具类模块。\n\n\n# 使用方法\n\nconst ps = require('ee-core/ps');\n\n\n\n# api列表\n\n\n# allenv()\n\n当前进程的所有env\n\n\n# env()\n\n获取 当前环境，local-本地，prod-生产环境\n\n\n# getenv()\n\n等于env()\n\n\n# isprod()\n\n是否为生产环境\n\n\n# isdev()\n\n是否为开发环境\n\n\n# isrenderer()\n\n是否为渲染进程\n\n\n# ismain()\n\n是否为主进程\n\n\n# isforkedchild()\n\n是否为node子进程\n\n\n# processtype()\n\n当前进程类型：browser、renderer、child\n\n\n# gethomedir()\n\n获取home路径，即项目根目录。\n\n\n# getlogdir()\n\n获取日志存储路径\n\n\n# getencryptdir(basepath)\n\n * basepath (可选)基础路径。默认为null\n\n获取加密文件路径\n\n\n# getrootdir()\n\n获取root目录  (dev：项目根目录，prod：app user data目录)\n\n\n# getbasedir()\n\n框架中electron目录路径。如果使用加密功能，打包后路径为 ./public/electron\n\n\n# getelectrondir()\n\n获取electron目录\n\n\n# getextraresourcesdir()\n\n获取 额外资源目录\n\n\n# getappuserdatadir()\n\n获取 应用程序数据目录 (开发环境时，为项目根目录)\n\n\n# getexecdir()\n\n获取 exec目录，app安装后，可执行程序（exe、dmg、dep）的根目录\n\n\n# getstoragedir()\n\n获取数据存储路径\n\n\n# getuserhomedir()\n\n获取操作系统用户目录\n\n\n# getmainport()\n\n获取主进程端口\n\n\n# getsocketport()\n\n获取内置socket端口\n\n\n# gethttpport()\n\n获取内置http端口\n\n\n# ispackaged()\n\n是否打包\n\n\n# isencrypted()\n\n是否加密\n\n\n# ishotreload()\n\n是否热重启\n\n\n# exit(code)\n\n * code [number] - 退出码\n\n进程退出\n\n\n# exitchildjob(code)\n\n * code [number] - 退出码\n\n退出childjob进程\n\n\n# ischildjob()\n\n任务类型 childjob\n\n\n# ischildpooljob()\n\n任务类型 childpooljob\n\n\n# initmode(mode)\n\n * mode [string] - framework | module\n\n初始化模式，ee-core内部使用，开发者忽略\n\n\n# mode()\n\n当前模式 - framework | module\n\n\n# verifymode()\n\n校验模式\n\n\n# isframeworkmode()\n\n是否为框架模式，ee-core内部使用，开发者忽略\n\n\n# ismodulemode()\n\n是否为模块模式，ee-core内部使用，开发者忽略",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"services",frontmatter:{title:"services",date:"2023-05-25T11:12:19.000Z",permalink:"/pages/deaaeb/",article:!1},regularPath:"/03.api/002.API/090.services.html",relativePath:"03.api/002.API/090.services.md",key:"v-96c80576",path:"/pages/deaaeb/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:35},{level:3,title:"第三方使用",slug:"第三方使用",normalizedTitle:"第三方使用",charIndex:147},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:244},{level:3,title:"get()",slug:"get",normalizedTitle:"get()",charIndex:254}],headersStr:"介绍 使用方法 第三方使用 API列表 get()",content:"> ee-core：v2.2.0\n\n\n# 介绍\n\n服务层模块\n\n\n# 使用方法\n\nconst Services = require('ee-core/services');\n\n# 获取service/storage.js 实例化对象\nServices.get('storage');\n\n\n\n# 第三方使用\n\n 1. 创建services业务文件\n\n在项目根目录创建 ./electron/service/example.js 文件，service示例代码\n\n 2. 使用方法同上\n\n\n# API列表\n\n\n# get()\n\n获取实例化后的service对象与方法调用。\n\nServices.get('framework').doCreatePool();\n\n// 多层文件夹调用\n// 如 ./electron/serivce/clan/info.js\nServices.get('clan.info').test();\n",normalizedContent:"> ee-core：v2.2.0\n\n\n# 介绍\n\n服务层模块\n\n\n# 使用方法\n\nconst services = require('ee-core/services');\n\n# 获取service/storage.js 实例化对象\nservices.get('storage');\n\n\n\n# 第三方使用\n\n 1. 创建services业务文件\n\n在项目根目录创建 ./electron/service/example.js 文件，service示例代码\n\n 2. 使用方法同上\n\n\n# api列表\n\n\n# get()\n\n获取实例化后的service对象与方法调用。\n\nservices.get('framework').docreatepool();\n\n// 多层文件夹调用\n// 如 ./electron/serivce/clan/info.js\nservices.get('clan.info').test();\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"socket",frontmatter:{title:"socket",date:"2023-06-20T11:12:19.000Z",permalink:"/pages/b33008/",article:!1},regularPath:"/03.api/002.API/095.socket.html",relativePath:"03.api/002.API/095.socket.md",key:"v-294c3845",path:"/pages/b33008/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:142},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:195},{level:3,title:"getSocketServer()",slug:"getsocketserver",normalizedTitle:"getsocketserver()",charIndex:205},{level:4,title:"SocketServer.io",slug:"socketserver-io",normalizedTitle:"socketserver.io",charIndex:443},{level:3,title:"getHttpServer()",slug:"gethttpserver",normalizedTitle:"gethttpserver()",charIndex:1324},{level:3,title:"getIpcServer()",slug:"getipcserver",normalizedTitle:"getipcserver()",charIndex:1452},{level:3,title:"Koa",slug:"koa",normalizedTitle:"koa",charIndex:1577},{level:3,title:"IoServer",slug:"ioserver",normalizedTitle:"ioserver",charIndex:1654},{level:3,title:"IoClient",slug:"ioclient",normalizedTitle:"ioclient",charIndex:1753},{level:3,title:"socket.io",slug:"socket-io",normalizedTitle:"socket.io",charIndex:47}],headersStr:"介绍 使用方法 API列表 getSocketServer() SocketServer.io getHttpServer() getIpcServer() Koa IoServer IoClient socket.io",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n提供socket通信功能。\n\n * 可以使用socket.io-client 或 node.js的net模块，连接远程（java、go等）socket服务\n * 可以在第三方项目中，连接框架的socket服务，与EE框架通信\n\n\n# 使用方法\n\nconst Socket = require('ee-core/socket');\n\n\n\n# API列表\n\n\n# getSocketServer()\n\n获取socketServer实例对象。\n\n// 顶部引入模块\n// 不要在顶部直接导出 getSocketServer，因为项目启动时，框架源码可能并没有加载完\nconst Socket = require('ee-core/socket');\n\n// 发消息到前端io-client on()监听的事件 或者 其它语言socket监听的事件\nconst SocketServer = Socket.getSocketServer();\nSocketServer.io.emit(\"client 监听的event name\", \"数据\");\n\n\n# SocketServer.io\n\n实例化后的server对象，包含以下属性、方法：\n\n * 属性\n\n// 文档：https://socket.io/docs/v4/server-api/#attributes\nio.engine\nio.sockets\n\n\n * 方法\n\n// 文档：https://socket.io/docs/v4/server-api/#methods\nio.adapter([value])\nio.attach(httpServer[, options])\nio.attach(port[, options])\nio.attachApp(app[, options])\nio.bind(engine)\nio.close([callback])\nio.disconnectSockets([close])\nio.emit(eventName[, ...args])\nio.emitWithAck(eventName[, ...args])\nio.except(rooms)\nio.fetchSockets()\nio.in(room)\nio.listen(httpServer[, options])\nio.listen(port[, options])\nio.of(nsp)\nio.on(eventName, listener)\nio.onconnection(socket)\nio.path([value])\nio.serveClient([value])\nio.serverSideEmit(eventName[, ...args][, ack])\nio.serverSideEmitWithAck(eventName[, ...args])\nio.socketsJoin(rooms)\nio.socketsLeave(rooms)\nio.timeout(value)\nio.to(room)\nio.use(fn)\n\n\n\n# getHttpServer()\n\n获取httpServer实例对象。\n\n// 顶部引入模块\nconst Socket = require('ee-core/socket');\n\n// 在方法内调用\nSocket.getHttpServer();\n\n\n\n# getIpcServer()\n\n获取ipcServer实例对象。\n\n// 顶部引入模块\nconst Socket = require('ee-core/socket');\n\n// 在方法内调用\nSocket.getIpcServer();\n\n\n\n# Koa\n\n原始koa对象，等于require('koa')。提供基础库 - 避免用户重复安装\n\nconst { Koa } = Socket;\n\n\n\n# IoServer\n\n原始socket.io对象，等于require('socket.io')。提供基础库 - 避免用户重复安装\n\nconst { IoServer } = Socket;\n\n\n\n# IoClient\n\n原始socket.io-client对象，等于require('socket.io-client')。提供基础库 - 避免用户重复安装\n\nconst { IoClient } = Socket;\n\n\n\n# socket.io\n\n官方文档：https://socket.io/",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n提供socket通信功能。\n\n * 可以使用socket.io-client 或 node.js的net模块，连接远程（java、go等）socket服务\n * 可以在第三方项目中，连接框架的socket服务，与ee框架通信\n\n\n# 使用方法\n\nconst socket = require('ee-core/socket');\n\n\n\n# api列表\n\n\n# getsocketserver()\n\n获取socketserver实例对象。\n\n// 顶部引入模块\n// 不要在顶部直接导出 getsocketserver，因为项目启动时，框架源码可能并没有加载完\nconst socket = require('ee-core/socket');\n\n// 发消息到前端io-client on()监听的事件 或者 其它语言socket监听的事件\nconst socketserver = socket.getsocketserver();\nsocketserver.io.emit(\"client 监听的event name\", \"数据\");\n\n\n# socketserver.io\n\n实例化后的server对象，包含以下属性、方法：\n\n * 属性\n\n// 文档：https://socket.io/docs/v4/server-api/#attributes\nio.engine\nio.sockets\n\n\n * 方法\n\n// 文档：https://socket.io/docs/v4/server-api/#methods\nio.adapter([value])\nio.attach(httpserver[, options])\nio.attach(port[, options])\nio.attachapp(app[, options])\nio.bind(engine)\nio.close([callback])\nio.disconnectsockets([close])\nio.emit(eventname[, ...args])\nio.emitwithack(eventname[, ...args])\nio.except(rooms)\nio.fetchsockets()\nio.in(room)\nio.listen(httpserver[, options])\nio.listen(port[, options])\nio.of(nsp)\nio.on(eventname, listener)\nio.onconnection(socket)\nio.path([value])\nio.serveclient([value])\nio.serversideemit(eventname[, ...args][, ack])\nio.serversideemitwithack(eventname[, ...args])\nio.socketsjoin(rooms)\nio.socketsleave(rooms)\nio.timeout(value)\nio.to(room)\nio.use(fn)\n\n\n\n# gethttpserver()\n\n获取httpserver实例对象。\n\n// 顶部引入模块\nconst socket = require('ee-core/socket');\n\n// 在方法内调用\nsocket.gethttpserver();\n\n\n\n# getipcserver()\n\n获取ipcserver实例对象。\n\n// 顶部引入模块\nconst socket = require('ee-core/socket');\n\n// 在方法内调用\nsocket.getipcserver();\n\n\n\n# koa\n\n原始koa对象，等于require('koa')。提供基础库 - 避免用户重复安装\n\nconst { koa } = socket;\n\n\n\n# ioserver\n\n原始socket.io对象，等于require('socket.io')。提供基础库 - 避免用户重复安装\n\nconst { ioserver } = socket;\n\n\n\n# ioclient\n\n原始socket.io-client对象，等于require('socket.io-client')。提供基础库 - 避免用户重复安装\n\nconst { ioclient } = socket;\n\n\n\n# socket.io\n\n官方文档：https://socket.io/",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"storage",frontmatter:{title:"storage",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/1e4caf/",article:!1},regularPath:"/03.api/002.API/100.storage.html",relativePath:"03.api/002.API/100.storage.md",key:"v-33e567d2",path:"/pages/1e4caf/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:55},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:110},{level:3,title:"connection(database, options = {})",slug:"connection-database-options",normalizedTitle:"connection(database, options = {})",charIndex:120},{level:3,title:"json数据库",slug:"json数据库",normalizedTitle:"json数据库",charIndex:32},{level:4,title:"jdb.setItem()",slug:"jdb-setitem",normalizedTitle:"jdb.setitem()",charIndex:455},{level:4,title:"jdb.getItem()",slug:"jdb-getitem",normalizedTitle:"jdb.getitem()",charIndex:538},{level:4,title:"jdb.db",slug:"jdb-db",normalizedTitle:"jdb.db",charIndex:592},{level:3,title:"sqlite数据库",slug:"sqlite数据库",normalizedTitle:"sqlite数据库",charIndex:40},{level:4,title:"sdb.db",slug:"sdb-db",normalizedTitle:"sdb.db",charIndex:2235},{level:4,title:"sdb.name",slug:"sdb-name",normalizedTitle:"sdb.name",charIndex:2364},{level:4,title:"sdb.mode",slug:"sdb-mode",normalizedTitle:"sdb.mode",charIndex:2382},{level:4,title:"sdb.storageDir",slug:"sdb-storagedir",normalizedTitle:"sdb.storagedir",charIndex:2447},{level:4,title:"sdb.fileName",slug:"sdb-filename",normalizedTitle:"sdb.filename",charIndex:2475}],headersStr:"介绍 使用方法 API列表 connection(database, options = {}) json数据库 jdb.setItem() jdb.getItem() jdb.db sqlite数据库 sdb.db sdb.name sdb.mode sdb.storageDir sdb.fileName",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n存储模块。提供json数据库、sqlite数据库。\n\n\n# 使用方法\n\nconst Storage = require('ee-core/storage');\n\n\n\n# API列表\n\n\n# connection(database, options = {})\n\n * database [String] - 数据库名\n * options [Object] - driver [String] - 数据库类型： jsondb、sqlite - default [Object] - sqlite数据库参数\n\n连接数据库，如果没有则创建。\n\n\n# json数据库\n\nconst jdb = Storage.connection('demo');\n# 或\nlet jsondbOptions = {\n  driver: 'jsondb'\n}\nconst jdb = Storage.connection('demo', jsondbOptions);  \n\n\n# jdb.setItem()\n\n创建一个存储的 key/value 对\n\njdb.setItem('test_key', {name:'xiaoming'})\n\n\n# jdb.getItem()\n\n获取存储的key值\n\njdb.getItem('test_key')\n\n\n# jdb.db\n\n实例化后的jsondb对象\n\n# 添加对象和数据\ndb.defaults({posts: [], user: {}, count: 0})\n  .write();\n \ndb.get('posts')\n  .push({id: 1, title: 'jsondb is awesome'})\n  .write()\n \ndb.set('user.name', 'typicode')\n  .write()\n \ndb.update('count', n => n + 1)\n  .write()\n\n运行程序会在项目中添加db.json文件，里面存储了添加的数据：\n{\n  \"posts\": [\n    {\n      \"id\": 1,\n      \"title\": \"jsondb is awesome\"\n    }\n  ],\n  \"user\": {\n    \"name\": \"typicode\"\n  },\n  \"count\": 1\n}\n\n\n * 可以使用任何lodash强大的函数，比如: _.get() 和 _.find()，并且可以串联地使用：\n\ndb.get('users')\n  .find({sex: 'male'})\n  .value()\n\n\n * 查询\n\n可以直接使用lodash的函数进行查询。需要注意的是有些操作可能会导致原数据被修改，为了避免这种误操作，需要使用 .cloneDeep()，操作都是惰性的，只有调用 .value()或 .write()后才会正式执行。 检查users是是否存在\n\ndb.has('users')\n  .value()\n\n\n * 设置users\n\ndb.set('users', [])\n  .write()\n\n\n * 排序、选择\n\ndb.get('users')\n  .filter({sex: 'male'})\n  .sortBy('age')\n  .take(5)\n  .value()\n\n\n * 获取特定字段\n\ndb.get('users')\n  .map('name')\n  .value()\n\n\n * 获取数量\n\ndb.get('users')\n  .size()\n  .value()\n\n\n * 获取特定信息\n\ndb.get('users[0].name')\n  .value()\n\n\n * 更新信息\n\ndb.get('users')\n  .find({name: 'Tom'})\n  .assign({name: 'Tim'})\n  .write()\n\n\n * 移除属性\n\ndb.unset('users.name)\n  .write()\n\n\n * 深拷贝\n\ndb.get('users')\n  .cloneDeep()\n  .value()\n\n\n * 使用id索引，可以使用 shortid 为数据库中的每一条记录创建唯一的id索引，然后通过id检索操作记录：\n\nconst shortid = require('shortid')\n \nconst postId = db\n  .get('posts')\n  .push({ id: shortid.generate(), title: 'low!' })\n  .write()\n  .id\n \nconst post = db\n  .get('posts')\n  .find({ id: postId })\n  .value()\n\n\n\n# sqlite数据库\n\n// sqlite数据库\nlet sqliteOptions = {\n  driver: 'sqlite',\n  default: {\n  timeout: 6000,\n    verbose: console.log // 打印sql语法\n  }\n}\nconst sdb = Storage.connection('sqlite-demo.db', sqliteOptions);\n\n\n# sdb.db\n\n# 插入数据    \nconst insert = sdb.db.prepare(`INSERT INTO ${table} (name, age) VALUES (@name, @age)`);\ninsert.run(data);\n\n\n# sdb.name\n\ndb名称\n\n# sdb.mode\n\n路径模式：\":memory:\", \"absolute\", \"relative\", \"onlyName\"\n\n# sdb.storageDir\n\ndb数据存储路径\n\n# sdb.fileName\n\n格式化后的db名称",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n存储模块。提供json数据库、sqlite数据库。\n\n\n# 使用方法\n\nconst storage = require('ee-core/storage');\n\n\n\n# api列表\n\n\n# connection(database, options = {})\n\n * database [string] - 数据库名\n * options [object] - driver [string] - 数据库类型： jsondb、sqlite - default [object] - sqlite数据库参数\n\n连接数据库，如果没有则创建。\n\n\n# json数据库\n\nconst jdb = storage.connection('demo');\n# 或\nlet jsondboptions = {\n  driver: 'jsondb'\n}\nconst jdb = storage.connection('demo', jsondboptions);  \n\n\n# jdb.setitem()\n\n创建一个存储的 key/value 对\n\njdb.setitem('test_key', {name:'xiaoming'})\n\n\n# jdb.getitem()\n\n获取存储的key值\n\njdb.getitem('test_key')\n\n\n# jdb.db\n\n实例化后的jsondb对象\n\n# 添加对象和数据\ndb.defaults({posts: [], user: {}, count: 0})\n  .write();\n \ndb.get('posts')\n  .push({id: 1, title: 'jsondb is awesome'})\n  .write()\n \ndb.set('user.name', 'typicode')\n  .write()\n \ndb.update('count', n => n + 1)\n  .write()\n\n运行程序会在项目中添加db.json文件，里面存储了添加的数据：\n{\n  \"posts\": [\n    {\n      \"id\": 1,\n      \"title\": \"jsondb is awesome\"\n    }\n  ],\n  \"user\": {\n    \"name\": \"typicode\"\n  },\n  \"count\": 1\n}\n\n\n * 可以使用任何lodash强大的函数，比如: _.get() 和 _.find()，并且可以串联地使用：\n\ndb.get('users')\n  .find({sex: 'male'})\n  .value()\n\n\n * 查询\n\n可以直接使用lodash的函数进行查询。需要注意的是有些操作可能会导致原数据被修改，为了避免这种误操作，需要使用 .clonedeep()，操作都是惰性的，只有调用 .value()或 .write()后才会正式执行。 检查users是是否存在\n\ndb.has('users')\n  .value()\n\n\n * 设置users\n\ndb.set('users', [])\n  .write()\n\n\n * 排序、选择\n\ndb.get('users')\n  .filter({sex: 'male'})\n  .sortby('age')\n  .take(5)\n  .value()\n\n\n * 获取特定字段\n\ndb.get('users')\n  .map('name')\n  .value()\n\n\n * 获取数量\n\ndb.get('users')\n  .size()\n  .value()\n\n\n * 获取特定信息\n\ndb.get('users[0].name')\n  .value()\n\n\n * 更新信息\n\ndb.get('users')\n  .find({name: 'tom'})\n  .assign({name: 'tim'})\n  .write()\n\n\n * 移除属性\n\ndb.unset('users.name)\n  .write()\n\n\n * 深拷贝\n\ndb.get('users')\n  .clonedeep()\n  .value()\n\n\n * 使用id索引，可以使用 shortid 为数据库中的每一条记录创建唯一的id索引，然后通过id检索操作记录：\n\nconst shortid = require('shortid')\n \nconst postid = db\n  .get('posts')\n  .push({ id: shortid.generate(), title: 'low!' })\n  .write()\n  .id\n \nconst post = db\n  .get('posts')\n  .find({ id: postid })\n  .value()\n\n\n\n# sqlite数据库\n\n// sqlite数据库\nlet sqliteoptions = {\n  driver: 'sqlite',\n  default: {\n  timeout: 6000,\n    verbose: console.log // 打印sql语法\n  }\n}\nconst sdb = storage.connection('sqlite-demo.db', sqliteoptions);\n\n\n# sdb.db\n\n# 插入数据    \nconst insert = sdb.db.prepare(`insert into ${table} (name, age) values (@name, @age)`);\ninsert.run(data);\n\n\n# sdb.name\n\ndb名称\n\n# sdb.mode\n\n路径模式：\":memory:\", \"absolute\", \"relative\", \"onlyname\"\n\n# sdb.storagedir\n\ndb数据存储路径\n\n# sdb.filename\n\n格式化后的db名称",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"tools",frontmatter:{title:"tools",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/abfcb0/",article:!1},regularPath:"/03.api/002.API/105.tools.html",relativePath:"03.api/002.API/105.tools.md",key:"v-432b5acd",path:"/pages/abfcb0/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:58}],headersStr:"介绍 API列表",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n脚本模块。加密、移动资源。框架核心使用，暂无业务api。\n\n\n# API列表\n\n暂无",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n脚本模块。加密、移动资源。框架核心使用，暂无业务api。\n\n\n# api列表\n\n暂无",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"app对象说明",frontmatter:{title:"app对象说明",date:"2023-05-25T11:12:19.000Z",permalink:"/pages/4cc0ef/",article:!1},regularPath:"/03.api/002.API/106.this-app/001.intro.html",relativePath:"03.api/002.API/106.this-app/001.intro.md",key:"v-2a4a7876",path:"/pages/4cc0ef/",headers:[{level:3,title:"app对象说明",slug:"app对象说明",normalizedTitle:"app对象说明",charIndex:2},{level:3,title:"推荐",slug:"推荐",normalizedTitle:"推荐",charIndex:32}],headersStr:"app对象说明 推荐",content:"# app对象说明\n\n全局app对象，挂载了许多功能。\n\n\n# 推荐\n\n请升级 ee-core >= v2.1.0 ，使用模块化的api。\n\n注意： 框架中的 this.app 不等于 electron的app ，开发者注意区分。一般情况下，使用别名来区分：\n\nconst { app: electronApp } = require('electron');\n\n\n该对象不再更新，请使用模块化api。",normalizedContent:"# app对象说明\n\n全局app对象，挂载了许多功能。\n\n\n# 推荐\n\n请升级 ee-core >= v2.1.0 ，使用模块化的api。\n\n注意： 框架中的 this.app 不等于 electron的app ，开发者注意区分。一般情况下，使用别名来区分：\n\nconst { app: electronapp } = require('electron');\n\n\n该对象不再更新，请使用模块化api。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"插件模块",frontmatter:{title:"插件模块",date:"2023-05-26T11:12:19.000Z",permalink:"/pages/ae545a/",article:!1},regularPath:"/03.api/002.API/106.this-app/010.addon.html",relativePath:"03.api/002.API/106.this-app/010.addon.md",key:"v-2aada385",path:"/pages/ae545a/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"推荐",slug:"推荐",normalizedTitle:"推荐",charIndex:26},{level:3,title:"window 插件",slug:"window-插件",normalizedTitle:"window 插件",charIndex:68},{level:3,title:"方法",slug:"方法",normalizedTitle:"方法",charIndex:82},{level:3,title:"create",slug:"create",normalizedTitle:"create",charIndex:89},{level:3,title:"getWCid",slug:"getwcid",normalizedTitle:"getwcid",charIndex:187},{level:3,title:"getMWCid",slug:"getmwcid",normalizedTitle:"getmwcid",charIndex:241},{level:3,title:"registerWCid",slug:"registerwcid",normalizedTitle:"registerwcid",charIndex:275},{level:3,title:"removeWCid",slug:"removewcid",normalizedTitle:"removewcid",charIndex:363},{level:3,title:"属性",slug:"属性",normalizedTitle:"属性",charIndex:420},{level:3,title:"windowContentsIdMap",slug:"windowcontentsidmap",normalizedTitle:"windowcontentsidmap",charIndex:427}],headersStr:"介绍 推荐 window 插件 方法 create getWCid getMWCid registerWCid removeWCid 属性 windowContentsIdMap",content:"# 介绍\n\n插件模块，扩展 app对象功能\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n\n# window 插件\n\n\n# 方法\n\n\n# create\n\n * @params name 窗口名字\n * @params opt 窗口选项，见：browserWindowOptions\n * @return 窗口对象\n\n创建窗口\n\n\n# getWCid\n\n * @params name 窗口名字\n\n获取窗口webContents.id\n\n\n# getMWCid\n\n获取主窗口webContents.id\n\n\n# registerWCid\n\n * @params name 窗口名字\n * @params id webContents.id\n\n注册窗口webContents.id\n\n\n# removeWCid\n\n * @params name 窗口名字\n\n销毁窗口webContents.id\n\n\n# 属性\n\n\n# windowContentsIdMap\n\n保存窗口webContents.id 的对象",normalizedContent:"# 介绍\n\n插件模块，扩展 app对象功能\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n\n# window 插件\n\n\n# 方法\n\n\n# create\n\n * @params name 窗口名字\n * @params opt 窗口选项，见：browserwindowoptions\n * @return 窗口对象\n\n创建窗口\n\n\n# getwcid\n\n * @params name 窗口名字\n\n获取窗口webcontents.id\n\n\n# getmwcid\n\n获取主窗口webcontents.id\n\n\n# registerwcid\n\n * @params name 窗口名字\n * @params id webcontents.id\n\n注册窗口webcontents.id\n\n\n# removewcid\n\n * @params name 窗口名字\n\n销毁窗口webcontents.id\n\n\n# 属性\n\n\n# windowcontentsidmap\n\n保存窗口webcontents.id 的对象",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"配置",frontmatter:{title:"配置",date:"2023-05-26T11:12:19.000Z",permalink:"/pages/d66b36/",article:!1},regularPath:"/03.api/002.API/106.this-app/020.config.html",relativePath:"03.api/002.API/106.this-app/020.config.md",key:"v-4c8cb4fa",path:"/pages/d66b36/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"推荐",slug:"推荐",normalizedTitle:"推荐",charIndex:43},{level:3,title:"使用方法：",slug:"使用方法",normalizedTitle:"使用方法：",charIndex:85},{level:3,title:"env",slug:"env",normalizedTitle:"env",charIndex:120},{level:3,title:"name",slug:"name",normalizedTitle:"name",charIndex:153},{level:3,title:"baseDir",slug:"basedir",normalizedTitle:"basedir",charIndex:168},{level:3,title:"HOME",slug:"home",normalizedTitle:"home",charIndex:231},{level:3,title:"homeDir",slug:"homedir",normalizedTitle:"homedir",charIndex:250},{level:3,title:"root",slug:"root",normalizedTitle:"root",charIndex:272},{level:3,title:"appUserDataDir",slug:"appuserdatadir",normalizedTitle:"appuserdatadir",charIndex:323},{level:3,title:"userHome",slug:"userhome",normalizedTitle:"userhome",charIndex:366},{level:3,title:"appVersion",slug:"appversion",normalizedTitle:"appversion",charIndex:394},{level:3,title:"isPackaged",slug:"ispackaged",normalizedTitle:"ispackaged",charIndex:417},{level:3,title:"execDir",slug:"execdir",normalizedTitle:"execdir",charIndex:443},{level:3,title:"logger",slug:"logger",normalizedTitle:"logger",charIndex:486},{level:3,title:"socketServer",slug:"socketserver",normalizedTitle:"socketserver",charIndex:506},{level:3,title:"developmentMode",slug:"developmentmode",normalizedTitle:"developmentmode",charIndex:537},{level:3,title:"openDevTools",slug:"opendevtools",normalizedTitle:"opendevtools",charIndex:566},{level:3,title:"openAppMenu",slug:"openappmenu",normalizedTitle:"openappmenu",charIndex:591},{level:3,title:"loadingPage",slug:"loadingpage",normalizedTitle:"loadingpage",charIndex:617},{level:3,title:"windowsOption",slug:"windowsoption",normalizedTitle:"windowsoption",charIndex:644},{level:3,title:"remoteUrl",slug:"remoteurl",normalizedTitle:"remoteurl",charIndex:671},{level:3,title:"autoUpdate",slug:"autoupdate",normalizedTitle:"autoupdate",charIndex:699},{level:3,title:"awakeProtocol",slug:"awakeprotocol",normalizedTitle:"awakeprotocol",charIndex:722},{level:3,title:"tray",slug:"tray",normalizedTitle:"tray",charIndex:748},{level:3,title:"testConfig",slug:"testconfig",normalizedTitle:"testconfig",charIndex:764},{level:3,title:"config值举例",slug:"config值举例",normalizedTitle:"config值举例",charIndex:788}],headersStr:"介绍 推荐 使用方法： env name baseDir HOME homeDir root appUserDataDir userHome appVersion isPackaged execDir logger socketServer developmentMode openDevTools openAppMenu loadingPage windowsOption remoteUrl autoUpdate awakeProtocol tray testConfig config值举例",content:'# 介绍\n\n获取配置文件对象；该对象根据当前环境变量的不同，返回的结果不同。\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n\n# 使用方法：\n\nthis.app.config\n\n\n属性说明：\n\n\n# env\n\n环境变量，local-本地，prod-生产环境\n\n\n# name\n\n应用名称\n\n\n# baseDir\n\n框架中electron目录路径。如果使用加密功能，打包后路径为 ./public/electron\n\n\n# HOME\n\nAPP根目录路径\n\n\n# homeDir\n\nAPP根目录路径\n\n\n# root\n\n获取root目录 (dev：项目根目录，prod：APP在操作系统中的数据目录)\n\n\n# appUserDataDir\n\nAPP在操作系统中的数据目录，与环境变量无关\n\n\n# userHome\n\n操作系统用户的home目录\n\n\n# appVersion\n\nAPP版本号\n\n\n# isPackaged\n\nAPP是否已经打包\n\n\n# execDir\n\nAPP安装后，可执行程序（exe、dmg、dep）的根目录\n\n\n# logger\n\nAPP日志配置\n\n\n# socketServer\n\n内置socket服务配置\n\n\n# developmentMode\n\nAPP类型配置\n\n\n# openDevTools\n\n开发者工具栏\n\n\n# openAppMenu\n\nAPP顶部菜单栏\n\n\n# loadingPage\n\nloading页面\n\n\n# windowsOption\n\n主窗口属性配置\n\n\n# remoteUrl\n\nAPP远程类型（web）\n\n\n# autoUpdate\n\n自动升级配置\n\n\n# awakeProtocol\n\n唤醒协议配置\n\n\n# tray\n\n托盘栏配置\n\n\n# testConfig\n\n用户自定义配置\n\n\n# config值举例\n\n# 值\n{\n  "env": "local",\n  "name": "ee",\n  "baseDir": "D:\\\\www\\\\xing\\\\ee\\\\electron",\n  "HOME": "D:\\\\www\\\\xing\\\\ee",\n  "rundir": "D:\\\\www\\\\xing\\\\ee\\\\electron\\\\run",\n  "dump": {\n    "ignore": {}\n  },\n  "homeDir": "D:\\\\www\\\\xing\\\\ee",\n  "root": "D:\\\\www\\\\xing\\\\ee",\n  "appUserDataDir": "C:\\\\Users\\\\gaoshuaixing\\\\AppData\\\\Roaming\\\\ee",\n  "userHome": "C:\\\\Users\\\\gaoshuaixing",\n  "appVersion": "2.0.3",\n  "isPackaged": false,\n  "execDir": "D:\\\\www\\\\xing\\\\ee",\n  "logger": {\n    "dir": "D:\\\\www\\\\xing\\\\ee\\\\logs",\n    "encoding": "utf8",\n    "env": "local",\n    "level": "INFO",\n    "consoleLevel": "INFO",\n    "disableConsoleAfterReady": false,\n    "outputJSON": false,\n    "buffer": true,\n    "appLogName": "ee-2022-03-04.log",\n    "coreLogName": "ee-core.log",\n    "agentLogName": "ee-agent.log",\n    "errorLogName": "ee-error-2022-03-04.log",\n    "coreLogger": {},\n    "allowDebugAtProd": false,\n    "enablePerformanceTimer": false,\n    "type": "application"\n  },\n  "httpclient": {\n    "enableDNSCache": false,\n    "dnsCacheLookupInterval": 10000,\n    "dnsCacheMaxLength": 1000,\n    "request": {\n      "timeout": 5000\n    },\n    "httpAgent": {\n      "keepAlive": true,\n      "freeSocketTimeout": 4000,\n      "maxSockets": 9007199254740991,\n      "maxFreeSockets": 256\n    },\n    "httpsAgent": {\n      "keepAlive": true,\n      "freeSocketTimeout": 4000,\n      "maxSockets": 9007199254740991,\n      "maxFreeSockets": 256\n    }\n  },\n  "socketServer": {\n    "port": 7070,\n    "isDynamic": false\n  },\n  "developmentMode": {\n    "default": "vue",\n    "mode": {\n      "vue": {\n        "hostname": "localhost",\n        "port": 8080\n      },\n      "react": {\n        "hostname": "localhost",\n        "port": 3000\n      },\n      "html": {\n        "hostname": "localhost",\n        "indexPage": "index.html"\n      }\n    }\n  },\n  "openDevTools": false,\n  "openAppMenu": true,\n  "loadingPage": true,\n  "windowsOption": {\n    "width": 980,\n    "height": 650,\n    "minWidth": 800,\n    "minHeight": 650,\n    "webPreferences": {\n      "contextIsolation": false,\n      "nodeIntegration": true\n    },\n    "frame": true\n  },\n  "remoteUrl": {\n    "enable": false,\n    "url": "https://discuz.chat/"\n  },\n  "autoUpdate": {\n    "windows": false,\n    "macOS": false,\n    "linux": false,\n    "options": {\n      "provider": "generic",\n      "url": "http://kodo.qiniu.com/"\n    },\n    "force": false\n  },\n  "awakeProtocol": {\n    "protocol": "ee",\n    "args": []\n  },\n  "tray": {\n    "title": "EE程序",\n    "icon": "/public/images/tray_logo.png"\n  },\n  "testConfig": {\n    "login": "http://local.com/api/login"\n  },\n  "coreMiddlewares": [],\n  "coreMiddleware": [],\n  "appMiddlewares": [],\n  "appMiddleware": []\n}\n',normalizedContent:'# 介绍\n\n获取配置文件对象；该对象根据当前环境变量的不同，返回的结果不同。\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n\n# 使用方法：\n\nthis.app.config\n\n\n属性说明：\n\n\n# env\n\n环境变量，local-本地，prod-生产环境\n\n\n# name\n\n应用名称\n\n\n# basedir\n\n框架中electron目录路径。如果使用加密功能，打包后路径为 ./public/electron\n\n\n# home\n\napp根目录路径\n\n\n# homedir\n\napp根目录路径\n\n\n# root\n\n获取root目录 (dev：项目根目录，prod：app在操作系统中的数据目录)\n\n\n# appuserdatadir\n\napp在操作系统中的数据目录，与环境变量无关\n\n\n# userhome\n\n操作系统用户的home目录\n\n\n# appversion\n\napp版本号\n\n\n# ispackaged\n\napp是否已经打包\n\n\n# execdir\n\napp安装后，可执行程序（exe、dmg、dep）的根目录\n\n\n# logger\n\napp日志配置\n\n\n# socketserver\n\n内置socket服务配置\n\n\n# developmentmode\n\napp类型配置\n\n\n# opendevtools\n\n开发者工具栏\n\n\n# openappmenu\n\napp顶部菜单栏\n\n\n# loadingpage\n\nloading页面\n\n\n# windowsoption\n\n主窗口属性配置\n\n\n# remoteurl\n\napp远程类型（web）\n\n\n# autoupdate\n\n自动升级配置\n\n\n# awakeprotocol\n\n唤醒协议配置\n\n\n# tray\n\n托盘栏配置\n\n\n# testconfig\n\n用户自定义配置\n\n\n# config值举例\n\n# 值\n{\n  "env": "local",\n  "name": "ee",\n  "basedir": "d:\\\\www\\\\xing\\\\ee\\\\electron",\n  "home": "d:\\\\www\\\\xing\\\\ee",\n  "rundir": "d:\\\\www\\\\xing\\\\ee\\\\electron\\\\run",\n  "dump": {\n    "ignore": {}\n  },\n  "homedir": "d:\\\\www\\\\xing\\\\ee",\n  "root": "d:\\\\www\\\\xing\\\\ee",\n  "appuserdatadir": "c:\\\\users\\\\gaoshuaixing\\\\appdata\\\\roaming\\\\ee",\n  "userhome": "c:\\\\users\\\\gaoshuaixing",\n  "appversion": "2.0.3",\n  "ispackaged": false,\n  "execdir": "d:\\\\www\\\\xing\\\\ee",\n  "logger": {\n    "dir": "d:\\\\www\\\\xing\\\\ee\\\\logs",\n    "encoding": "utf8",\n    "env": "local",\n    "level": "info",\n    "consolelevel": "info",\n    "disableconsoleafterready": false,\n    "outputjson": false,\n    "buffer": true,\n    "applogname": "ee-2022-03-04.log",\n    "corelogname": "ee-core.log",\n    "agentlogname": "ee-agent.log",\n    "errorlogname": "ee-error-2022-03-04.log",\n    "corelogger": {},\n    "allowdebugatprod": false,\n    "enableperformancetimer": false,\n    "type": "application"\n  },\n  "httpclient": {\n    "enablednscache": false,\n    "dnscachelookupinterval": 10000,\n    "dnscachemaxlength": 1000,\n    "request": {\n      "timeout": 5000\n    },\n    "httpagent": {\n      "keepalive": true,\n      "freesockettimeout": 4000,\n      "maxsockets": 9007199254740991,\n      "maxfreesockets": 256\n    },\n    "httpsagent": {\n      "keepalive": true,\n      "freesockettimeout": 4000,\n      "maxsockets": 9007199254740991,\n      "maxfreesockets": 256\n    }\n  },\n  "socketserver": {\n    "port": 7070,\n    "isdynamic": false\n  },\n  "developmentmode": {\n    "default": "vue",\n    "mode": {\n      "vue": {\n        "hostname": "localhost",\n        "port": 8080\n      },\n      "react": {\n        "hostname": "localhost",\n        "port": 3000\n      },\n      "html": {\n        "hostname": "localhost",\n        "indexpage": "index.html"\n      }\n    }\n  },\n  "opendevtools": false,\n  "openappmenu": true,\n  "loadingpage": true,\n  "windowsoption": {\n    "width": 980,\n    "height": 650,\n    "minwidth": 800,\n    "minheight": 650,\n    "webpreferences": {\n      "contextisolation": false,\n      "nodeintegration": true\n    },\n    "frame": true\n  },\n  "remoteurl": {\n    "enable": false,\n    "url": "https://discuz.chat/"\n  },\n  "autoupdate": {\n    "windows": false,\n    "macos": false,\n    "linux": false,\n    "options": {\n      "provider": "generic",\n      "url": "http://kodo.qiniu.com/"\n    },\n    "force": false\n  },\n  "awakeprotocol": {\n    "protocol": "ee",\n    "args": []\n  },\n  "tray": {\n    "title": "ee程序",\n    "icon": "/public/images/tray_logo.png"\n  },\n  "testconfig": {\n    "login": "http://local.com/api/login"\n  },\n  "coremiddlewares": [],\n  "coremiddleware": [],\n  "appmiddlewares": [],\n  "appmiddleware": []\n}\n',charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"request",frontmatter:{title:"request",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/43c09b/",article:!1},regularPath:"/03.api/002.API/106.this-app/070.request.html",relativePath:"03.api/002.API/106.this-app/070.request.md",key:"v-da23d6b6",path:"/pages/43c09b/",headers:[{level:3,title:"request",slug:"request",normalizedTitle:"request",charIndex:2},{level:3,title:"API",slug:"api",normalizedTitle:"api",charIndex:86},{level:3,title:"request.header",slug:"request-header",normalizedTitle:"request.header",charIndex:94},{level:3,title:"request.header=",slug:"request-header-2",normalizedTitle:"request.header=",charIndex:121},{level:3,title:"request.headers",slug:"request-headers",normalizedTitle:"request.headers",charIndex:151},{level:3,title:"request.headers=",slug:"request-headers-2",normalizedTitle:"request.headers=",charIndex:198},{level:3,title:"request.method",slug:"request-method",normalizedTitle:"request.method",charIndex:249},{level:3,title:"request.method=",slug:"request-method-2",normalizedTitle:"request.method=",charIndex:275},{level:3,title:"request.length",slug:"request-length",normalizedTitle:"request.length",charIndex:337},{level:3,title:"request.url",slug:"request-url",normalizedTitle:"request.url",charIndex:396},{level:3,title:"request.url=",slug:"request-url-2",normalizedTitle:"request.url=",charIndex:423},{level:3,title:"request.originalUrl",slug:"request-originalurl",normalizedTitle:"request.originalurl",charIndex:463},{level:3,title:"request.origin",slug:"request-origin",normalizedTitle:"request.origin",charIndex:463},{level:3,title:"request.href",slug:"request-href",normalizedTitle:"request.href",charIndex:592},{level:3,title:"request.path",slug:"request-path",normalizedTitle:"request.path",charIndex:700},{level:3,title:"request.path=",slug:"request-path-2",normalizedTitle:"request.path=",charIndex:727},{level:3,title:"request.querystring",slug:"request-querystring",normalizedTitle:"request.querystring",charIndex:768},{level:3,title:"request.querystring=",slug:"request-querystring-2",normalizedTitle:"request.querystring=",charIndex:809},{level:3,title:"request.search",slug:"request-search",normalizedTitle:"request.search",charIndex:846},{level:3,title:"request.search=",slug:"request-search-2",normalizedTitle:"request.search=",charIndex:882},{level:3,title:"request.host",slug:"request-host",normalizedTitle:"request.host",charIndex:914},{level:3,title:"request.hostname",slug:"request-hostname",normalizedTitle:"request.hostname",charIndex:1006},{level:3,title:"request.URL",slug:"request-url-3",normalizedTitle:"request.url",charIndex:1137},{level:3,title:"request.type",slug:"request-type",normalizedTitle:"request.type",charIndex:1176},{level:3,title:"request.charset",slug:"request-charset",normalizedTitle:"request.charset",charIndex:1302},{level:3,title:"request.query",slug:"request-query",normalizedTitle:"request.query",charIndex:768},{level:3,title:"request.query=",slug:"request-query-2",normalizedTitle:"request.query=",charIndex:1516},{level:3,title:"request.fresh",slug:"request-fresh",normalizedTitle:"request.fresh",charIndex:1606},{level:3,title:"request.stale",slug:"request-stale",normalizedTitle:"request.stale",charIndex:1921},{level:3,title:"request.protocol",slug:"request-protocol",normalizedTitle:"request.protocol",charIndex:1960},{level:3,title:"request.secure",slug:"request-secure",normalizedTitle:"request.secure",charIndex:2048},{level:3,title:"request.ip",slug:"request-ip",normalizedTitle:"request.ip",charIndex:2113},{level:3,title:"request.ips",slug:"request-ips",normalizedTitle:"request.ips",charIndex:2179},{level:3,title:"request.subdomains",slug:"request-subdomains",normalizedTitle:"request.subdomains",charIndex:2576},{level:3,title:"request.is(types...)",slug:"request-is-types",normalizedTitle:"request.is(types...)",charIndex:2847},{level:3,title:"request.accepts(types)",slug:"request-accepts-types",normalizedTitle:"request.accepts(types)",charIndex:3480},{level:3,title:"request.acceptsEncodings(encodings)",slug:"request-acceptsencodings-encodings",normalizedTitle:"request.acceptsencodings(encodings)",charIndex:4446},{level:3,title:"request.acceptsCharsets(charsets)",slug:"request-acceptscharsets-charsets",normalizedTitle:"request.acceptscharsets(charsets)",charIndex:4942},{level:3,title:"request.acceptsLanguages(langs)",slug:"request-acceptslanguages-langs",normalizedTitle:"request.acceptslanguages(langs)",charIndex:5340},{level:3,title:"request.idempotent",slug:"request-idempotent",normalizedTitle:"request.idempotent",charIndex:5665},{level:3,title:"request.socket",slug:"request-socket",normalizedTitle:"request.socket",charIndex:5701},{level:3,title:"request.get(field)",slug:"request-get-field",normalizedTitle:"request.get(field)",charIndex:5730}],headersStr:"request API request.header request.header= request.headers request.headers= request.method request.method= request.length request.url request.url= request.originalUrl request.origin request.href request.path request.path= request.querystring request.querystring= request.search request.search= request.host request.hostname request.URL request.type request.charset request.query request.query= request.fresh request.stale request.protocol request.secure request.ip request.ips request.subdomains request.is(types...) request.accepts(types) request.acceptsEncodings(encodings) request.acceptsCharsets(charsets) request.acceptsLanguages(langs) request.idempotent request.socket request.get(field)",content:"# request\n\n如果你开启了内置http server服务，才能使用，该属性继承koa的request。\n\n使用方法：\n\nthis.app.request\n\n\n\n# API\n\n\n# request.header\n\n请求头对象。\n\n\n# request.header=\n\n设置请求头对象。\n\n\n# request.headers\n\n请求头对象。别名为 request.header.\n\n\n# request.headers=\n\n设置请求头对象。别名为 request.header=.\n\n\n# request.method\n\n请求方法。\n\n\n# request.method=\n\n设置请求方法，对于实现诸如 methodOverride() 的中间件是有用的。\n\n\n# request.length\n\n返回以数字返回请求的 Content-Length，或 undefined。\n\n\n# request.url\n\n获取请求 URL.\n\n\n# request.url=\n\n设置请求 URL, 对 url 重写有用。\n\n\n# request.originalUrl\n\n获取请求原始URL。\n\n\n# request.origin\n\n获取URL的来源，包括 protocol 和 host。 ctx.request.origin // => http://example.com\n\n\n# request.href\n\n获取完整的请求URL，包括 protocol，host 和 url。 ctx.request.href; // => http://example.com/foo/bar?q=1\n\n\n# request.path\n\n获取请求路径名。\n\n\n# request.path=\n\n设置请求路径名，并在存在时保留查询字符串。\n\n\n# request.querystring\n\n根据 ? 获取原始查询字符串.\n\n\n# request.querystring=\n\n设置原始查询字符串。\n\n\n# request.search\n\n使用 ? 获取原始查询字符串。\n\n\n# request.search=\n\n设置原始查询字符串。\n\n\n# request.host\n\n存在时获取主机（hostname:port）。当 app.proxy 是 true 时支持 X-Forwarded-Host，否则使用 Host。\n\n\n# request.hostname\n\n存在时获取主机名。当 app.proxy 是 true 时支持 X-Forwarded-Host，否则使用 Host。 如果主机是 IPv6, Koa 解析到 WHATWG URL API, 注意 这可能会影响性能。\n\n\n# request.URL\n\n获取 WHATWG 解析的 URL 对象。\n\n\n# request.type\n\n获取请求 Content-Type, 不含 \"charset\" 等参数。 译者注: 这里其实是只获取 mime-type const ct = ctx.request.type; // => \"image/png\"\n\n\n# request.charset\n\n存在时获取请求字符集，或者 undefined： ctx.request.charset; // => \"utf-8\"\n\n\n# request.query\n\n获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不 支持嵌套解析。 例如 \"color=blue&size=small\": { color: 'blue', size: 'small' }\n\n\n# request.query=\n\n将查询字符串设置为给定对象。 请注意，此 setter 不 支持嵌套对象。 ctx.query = { next: '/login' };\n\n\n# request.fresh\n\n检查请求缓存是否“新鲜”，也就是内容没有改变。此方法用于 If-None-Match / ETag, 和 If-Modified-Since 和 Last-Modified 之间的缓存协商。 在设置一个或多个这些响应头后应该引用它。\n\n// 检查需要状态20x或304\nctx.status = 200;\nctx.set('ETag', '123');\n\n// 缓存是好的\nif (ctx.fresh) {\n  ctx.status = 304;\n  return;\n}\n\n// 缓存是陈旧的\n// 获取新数据\nctx.body = await db.find('something');\n\n\n\n# request.stale\n\n与 request.fresh 相反.\n\n\n# request.protocol\n\n返回请求协议，“https” 或 “http”。当 app.proxy 是 true 时支持 X-Forwarded-Proto。\n\n\n# request.secure\n\n通过 ctx.protocol == \"https\" 来检查请求是否通过 TLS 发出。\n\n\n# request.ip\n\n请求远程地址。 当 app.proxy 是 true 时支持 X-Forwarded-Proto。\n\n\n# request.ips\n\n当 X-Forwarded-For 存在并且 app.proxy 被启用时，这些 ips 的数组被返回，从上游 - >下游排序。 禁用时返回一个空数组。 例如，如果值是 \"client, proxy1, proxy2\"，将会得到数组 [\"client\", \"proxy1\", \"proxy2\"]。 大多数反向代理（nginx）都通过 proxy_add_x_forwarded_for 设置了 x-forwarded-for，这带来了一定的安全风险。恶意攻击者可以通过伪造 X-Forwarded-For 请求头来伪造客户端的ip地址。 客户端发送的请求具有 'forged' 的 X-Forwarded-For 请求头。 在由反向代理转发之后，request.ips 将是 ['forged', 'client', 'proxy1', 'proxy2']。\n\n\n# request.subdomains\n\n以数组形式返回子域。 子域是应用程序主域之前主机的点分隔部分。默认情况下，应用程序的域名假定为主机的最后两个部分。这可以通过设置 app.subdomainOffset 来更改。 例如，如果域名为“tobi.ferrets.example.com”： 如果 app.subdomainOffset 未设置, ctx.subdomains 是 [\"ferrets\", \"tobi\"]. 如果 app.subdomainOffset 是 3, ctx.subdomains 是 [\"tobi\"].\n\n\n# request.is(types...)\n\n检查传入请求是否包含 Content-Type 消息头字段， 并且包含任意的 mime type。 如果没有请求主体，返回 null。 如果没有内容类型，或者匹配失败，则返回 false。 反之则返回匹配的 content-type。\n\n// 使用 Content-Type: text/html; charset=utf-8\nctx.is('html'); // => 'html'\nctx.is('text/html'); // => 'text/html'\nctx.is('text/*', 'text/html'); // => 'text/html'\n\n// 当 Content-Type 是 application/json 时\nctx.is('json', 'urlencoded'); // => 'json'\nctx.is('application/json'); // => 'application/json'\nctx.is('html', 'application/*'); // => 'application/json'\n\nctx.is('html'); // => false\n\n\n例如，如果要确保仅将图像发送到给定路由：\n\nif (ctx.is('image/*')) {\n  // 处理\n} else {\n  ctx.throw(415, 'images only!');\n}\n\n\n\n# request.accepts(types)\n\n检查给定的 type(s) 是否可以接受，如果 true，返回最佳匹配，否则为 false。 type 值可能是一个或多个 mime 类型的字符串，如 application/json，扩展名称如 json，或数组 [\"json\", \"html\", \"text/plain\"]。\n\n// Accept: text/html\nctx.accepts('html');\n// => \"html\"\n\n// Accept: text/*, application/json\nctx.accepts('html');\n// => \"html\"\nctx.accepts('text/html');\n// => \"text/html\"\nctx.accepts('json', 'text');\n// => \"json\"\nctx.accepts('application/json');\n// => \"application/json\"\n\n// Accept: text/*, application/json\nctx.accepts('image/png');\nctx.accepts('png');\n// => false\n\n// Accept: text/*;q=.5, application/json\nctx.accepts(['html', 'json']);\nctx.accepts('html', 'json');\n// => \"json\"\n\n// No Accept header\nctx.accepts('html', 'json');\n// => \"html\"\nctx.accepts('json', 'html');\n// => \"json\"\n\n\n你可以根据需要多次调用 ctx.accepts()，或使用 switch：\n\nswitch (ctx.accepts('json', 'html', 'text')) {\n  case 'json': break;\n  case 'html': break;\n  case 'text': break;\n  default: ctx.throw(406, 'json, html, or text only');\n}\n\n\n\n# request.acceptsEncodings(encodings)\n\n检查 encodings 是否可以接受，返回最佳匹配为 true，否则为 false。 请注意，您应该将identity 作为编码之一！\n\n// Accept-Encoding: gzip\nctx.acceptsEncodings('gzip', 'deflate', 'identity');\n// => \"gzip\"\n\nctx.acceptsEncodings(['gzip', 'deflate', 'identity']);\n// => \"gzip\"\n\n\n当没有给出参数时，所有接受的编码将作为数组返回：\n\n// Accept-Encoding: gzip, deflate\nctx.acceptsEncodings();\n// => [\"gzip\", \"deflate\", \"identity\"]\n\n\n请注意，如果客户端显式地发送 identity;q=0，那么 identity 编码（这意味着没有编码）可能是不可接受的。 虽然这是一个边缘的情况，你仍然应该处理这种方法返回 false 的情况。\n\n\n# request.acceptsCharsets(charsets)\n\n检查 charsets 是否可以接受，在 true 时返回最佳匹配，否则为 false。\n\n// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5\nctx.acceptsCharsets('utf-8', 'utf-7');\n// => \"utf-8\"\n\nctx.acceptsCharsets(['utf-7', 'utf-8']);\n// => \"utf-8\"\n\n\n当没有参数被赋予所有被接受的字符集将作为数组返回：\n\n// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5\nctx.acceptsCharsets();\n// => [\"utf-8\", \"utf-7\", \"iso-8859-1\"]\n\n\n\n# request.acceptsLanguages(langs)\n\n检查 langs 是否可以接受，如果为 true，返回最佳匹配，否则为 false。\n\n// Accept-Language: en;q=0.8, es, pt\nctx.acceptsLanguages('es', 'en');\n// => \"es\"\n\nctx.acceptsLanguages(['en', 'es']);\n// => \"es\"\n\n\n当没有参数被赋予所有接受的语言将作为数组返回：\n\n// Accept-Language: en;q=0.8, es, pt\nctx.acceptsLanguages();\n// => [\"es\", \"pt\", \"en\"]\n\n\n\n# request.idempotent\n\n检查请求是否是幂等的。\n\n\n# request.socket\n\n返回请求套接字。\n\n\n# request.get(field)\n\n返回请求头(header), field 不区分大小写.",normalizedContent:"# request\n\n如果你开启了内置http server服务，才能使用，该属性继承koa的request。\n\n使用方法：\n\nthis.app.request\n\n\n\n# api\n\n\n# request.header\n\n请求头对象。\n\n\n# request.header=\n\n设置请求头对象。\n\n\n# request.headers\n\n请求头对象。别名为 request.header.\n\n\n# request.headers=\n\n设置请求头对象。别名为 request.header=.\n\n\n# request.method\n\n请求方法。\n\n\n# request.method=\n\n设置请求方法，对于实现诸如 methodoverride() 的中间件是有用的。\n\n\n# request.length\n\n返回以数字返回请求的 content-length，或 undefined。\n\n\n# request.url\n\n获取请求 url.\n\n\n# request.url=\n\n设置请求 url, 对 url 重写有用。\n\n\n# request.originalurl\n\n获取请求原始url。\n\n\n# request.origin\n\n获取url的来源，包括 protocol 和 host。 ctx.request.origin // => http://example.com\n\n\n# request.href\n\n获取完整的请求url，包括 protocol，host 和 url。 ctx.request.href; // => http://example.com/foo/bar?q=1\n\n\n# request.path\n\n获取请求路径名。\n\n\n# request.path=\n\n设置请求路径名，并在存在时保留查询字符串。\n\n\n# request.querystring\n\n根据 ? 获取原始查询字符串.\n\n\n# request.querystring=\n\n设置原始查询字符串。\n\n\n# request.search\n\n使用 ? 获取原始查询字符串。\n\n\n# request.search=\n\n设置原始查询字符串。\n\n\n# request.host\n\n存在时获取主机（hostname:port）。当 app.proxy 是 true 时支持 x-forwarded-host，否则使用 host。\n\n\n# request.hostname\n\n存在时获取主机名。当 app.proxy 是 true 时支持 x-forwarded-host，否则使用 host。 如果主机是 ipv6, koa 解析到 whatwg url api, 注意 这可能会影响性能。\n\n\n# request.url\n\n获取 whatwg 解析的 url 对象。\n\n\n# request.type\n\n获取请求 content-type, 不含 \"charset\" 等参数。 译者注: 这里其实是只获取 mime-type const ct = ctx.request.type; // => \"image/png\"\n\n\n# request.charset\n\n存在时获取请求字符集，或者 undefined： ctx.request.charset; // => \"utf-8\"\n\n\n# request.query\n\n获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不 支持嵌套解析。 例如 \"color=blue&size=small\": { color: 'blue', size: 'small' }\n\n\n# request.query=\n\n将查询字符串设置为给定对象。 请注意，此 setter 不 支持嵌套对象。 ctx.query = { next: '/login' };\n\n\n# request.fresh\n\n检查请求缓存是否“新鲜”，也就是内容没有改变。此方法用于 if-none-match / etag, 和 if-modified-since 和 last-modified 之间的缓存协商。 在设置一个或多个这些响应头后应该引用它。\n\n// 检查需要状态20x或304\nctx.status = 200;\nctx.set('etag', '123');\n\n// 缓存是好的\nif (ctx.fresh) {\n  ctx.status = 304;\n  return;\n}\n\n// 缓存是陈旧的\n// 获取新数据\nctx.body = await db.find('something');\n\n\n\n# request.stale\n\n与 request.fresh 相反.\n\n\n# request.protocol\n\n返回请求协议，“https” 或 “http”。当 app.proxy 是 true 时支持 x-forwarded-proto。\n\n\n# request.secure\n\n通过 ctx.protocol == \"https\" 来检查请求是否通过 tls 发出。\n\n\n# request.ip\n\n请求远程地址。 当 app.proxy 是 true 时支持 x-forwarded-proto。\n\n\n# request.ips\n\n当 x-forwarded-for 存在并且 app.proxy 被启用时，这些 ips 的数组被返回，从上游 - >下游排序。 禁用时返回一个空数组。 例如，如果值是 \"client, proxy1, proxy2\"，将会得到数组 [\"client\", \"proxy1\", \"proxy2\"]。 大多数反向代理（nginx）都通过 proxy_add_x_forwarded_for 设置了 x-forwarded-for，这带来了一定的安全风险。恶意攻击者可以通过伪造 x-forwarded-for 请求头来伪造客户端的ip地址。 客户端发送的请求具有 'forged' 的 x-forwarded-for 请求头。 在由反向代理转发之后，request.ips 将是 ['forged', 'client', 'proxy1', 'proxy2']。\n\n\n# request.subdomains\n\n以数组形式返回子域。 子域是应用程序主域之前主机的点分隔部分。默认情况下，应用程序的域名假定为主机的最后两个部分。这可以通过设置 app.subdomainoffset 来更改。 例如，如果域名为“tobi.ferrets.example.com”： 如果 app.subdomainoffset 未设置, ctx.subdomains 是 [\"ferrets\", \"tobi\"]. 如果 app.subdomainoffset 是 3, ctx.subdomains 是 [\"tobi\"].\n\n\n# request.is(types...)\n\n检查传入请求是否包含 content-type 消息头字段， 并且包含任意的 mime type。 如果没有请求主体，返回 null。 如果没有内容类型，或者匹配失败，则返回 false。 反之则返回匹配的 content-type。\n\n// 使用 content-type: text/html; charset=utf-8\nctx.is('html'); // => 'html'\nctx.is('text/html'); // => 'text/html'\nctx.is('text/*', 'text/html'); // => 'text/html'\n\n// 当 content-type 是 application/json 时\nctx.is('json', 'urlencoded'); // => 'json'\nctx.is('application/json'); // => 'application/json'\nctx.is('html', 'application/*'); // => 'application/json'\n\nctx.is('html'); // => false\n\n\n例如，如果要确保仅将图像发送到给定路由：\n\nif (ctx.is('image/*')) {\n  // 处理\n} else {\n  ctx.throw(415, 'images only!');\n}\n\n\n\n# request.accepts(types)\n\n检查给定的 type(s) 是否可以接受，如果 true，返回最佳匹配，否则为 false。 type 值可能是一个或多个 mime 类型的字符串，如 application/json，扩展名称如 json，或数组 [\"json\", \"html\", \"text/plain\"]。\n\n// accept: text/html\nctx.accepts('html');\n// => \"html\"\n\n// accept: text/*, application/json\nctx.accepts('html');\n// => \"html\"\nctx.accepts('text/html');\n// => \"text/html\"\nctx.accepts('json', 'text');\n// => \"json\"\nctx.accepts('application/json');\n// => \"application/json\"\n\n// accept: text/*, application/json\nctx.accepts('image/png');\nctx.accepts('png');\n// => false\n\n// accept: text/*;q=.5, application/json\nctx.accepts(['html', 'json']);\nctx.accepts('html', 'json');\n// => \"json\"\n\n// no accept header\nctx.accepts('html', 'json');\n// => \"html\"\nctx.accepts('json', 'html');\n// => \"json\"\n\n\n你可以根据需要多次调用 ctx.accepts()，或使用 switch：\n\nswitch (ctx.accepts('json', 'html', 'text')) {\n  case 'json': break;\n  case 'html': break;\n  case 'text': break;\n  default: ctx.throw(406, 'json, html, or text only');\n}\n\n\n\n# request.acceptsencodings(encodings)\n\n检查 encodings 是否可以接受，返回最佳匹配为 true，否则为 false。 请注意，您应该将identity 作为编码之一！\n\n// accept-encoding: gzip\nctx.acceptsencodings('gzip', 'deflate', 'identity');\n// => \"gzip\"\n\nctx.acceptsencodings(['gzip', 'deflate', 'identity']);\n// => \"gzip\"\n\n\n当没有给出参数时，所有接受的编码将作为数组返回：\n\n// accept-encoding: gzip, deflate\nctx.acceptsencodings();\n// => [\"gzip\", \"deflate\", \"identity\"]\n\n\n请注意，如果客户端显式地发送 identity;q=0，那么 identity 编码（这意味着没有编码）可能是不可接受的。 虽然这是一个边缘的情况，你仍然应该处理这种方法返回 false 的情况。\n\n\n# request.acceptscharsets(charsets)\n\n检查 charsets 是否可以接受，在 true 时返回最佳匹配，否则为 false。\n\n// accept-charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5\nctx.acceptscharsets('utf-8', 'utf-7');\n// => \"utf-8\"\n\nctx.acceptscharsets(['utf-7', 'utf-8']);\n// => \"utf-8\"\n\n\n当没有参数被赋予所有被接受的字符集将作为数组返回：\n\n// accept-charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5\nctx.acceptscharsets();\n// => [\"utf-8\", \"utf-7\", \"iso-8859-1\"]\n\n\n\n# request.acceptslanguages(langs)\n\n检查 langs 是否可以接受，如果为 true，返回最佳匹配，否则为 false。\n\n// accept-language: en;q=0.8, es, pt\nctx.acceptslanguages('es', 'en');\n// => \"es\"\n\nctx.acceptslanguages(['en', 'es']);\n// => \"es\"\n\n\n当没有参数被赋予所有接受的语言将作为数组返回：\n\n// accept-language: en;q=0.8, es, pt\nctx.acceptslanguages();\n// => [\"es\", \"pt\", \"en\"]\n\n\n\n# request.idempotent\n\n检查请求是否是幂等的。\n\n\n# request.socket\n\n返回请求套接字。\n\n\n# request.get(field)\n\n返回请求头(header), field 不区分大小写.",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"response",frontmatter:{title:"response",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/d04c0c/",article:!1},regularPath:"/03.api/002.API/106.this-app/080.response.html",relativePath:"03.api/002.API/106.this-app/080.response.md",key:"v-0eece9f9",path:"/pages/d04c0c/",headers:[{level:3,title:"response",slug:"response",normalizedTitle:"response",charIndex:2},{level:3,title:"API",slug:"api",normalizedTitle:"api",charIndex:89},{level:3,title:"response.header",slug:"response-header",normalizedTitle:"response.header",charIndex:97},{level:3,title:"response.headers",slug:"response-headers",normalizedTitle:"response.headers",charIndex:125},{level:3,title:"response.socket",slug:"response-socket",normalizedTitle:"response.socket",charIndex:174},{level:3,title:"response.status",slug:"response-status",normalizedTitle:"response.status",charIndex:238},{level:3,title:"response.status=",slug:"response-status-2",normalizedTitle:"response.status=",charIndex:334},{level:3,title:"response.message",slug:"response-message",normalizedTitle:"response.message",charIndex:1987},{level:3,title:"response.message=",slug:"response-message-2",normalizedTitle:"response.message=",charIndex:2066},{level:3,title:"response.length=",slug:"response-length",normalizedTitle:"response.length=",charIndex:2105},{level:3,title:"response.length",slug:"response-length-2",normalizedTitle:"response.length",charIndex:2105},{level:3,title:"response.body",slug:"response-body",normalizedTitle:"response.body",charIndex:2229},{level:3,title:"response.body=",slug:"response-body-2",normalizedTitle:"response.body=",charIndex:2256},{level:4,title:"String",slug:"string",normalizedTitle:"string",charIndex:2671},{level:4,title:"Buffer",slug:"buffer",normalizedTitle:"buffer",charIndex:2326},{level:4,title:"Stream",slug:"stream",normalizedTitle:"stream",charIndex:2339},{level:4,title:"Object",slug:"object",normalizedTitle:"object",charIndex:2352},{level:3,title:"response.get(field)",slug:"response-get-field",normalizedTitle:"response.get(field)",charIndex:3314},{level:3,title:"response.has(field)",slug:"response-has-field",normalizedTitle:"response.has(field)",charIndex:3400},{level:3,title:"response.set(field, value)",slug:"response-set-field-value",normalizedTitle:"response.set(field, value)",charIndex:3531},{level:3,title:"response.append(field, value)",slug:"response-append-field-value",normalizedTitle:"response.append(field, value)",charIndex:3622},{level:3,title:"response.set(fields)",slug:"response-set-fields",normalizedTitle:"response.set(fields)",charIndex:3721},{level:3,title:"response.remove(field)",slug:"response-remove-field",normalizedTitle:"response.remove(field)",charIndex:3864},{level:3,title:"response.type",slug:"response-type",normalizedTitle:"response.type",charIndex:3905},{level:3,title:"response.type=",slug:"response-type-2",normalizedTitle:"response.type=",charIndex:4036},{level:3,title:"response.is(types...)",slug:"response-is-types",normalizedTitle:"response.is(types...)",charIndex:4332},{level:3,title:"response.redirect(url, [alt])",slug:"response-redirect-url-alt",normalizedTitle:"response.redirect(url, [alt])",charIndex:4725},{level:3,title:"response.attachment([filename], [options])",slug:"response-attachment-filename-options",normalizedTitle:"response.attachment([filename], [options])",charIndex:5099},{level:3,title:"response.headerSent",slug:"response-headersent",normalizedTitle:"response.headersent",charIndex:5216},{level:3,title:"response.lastModified",slug:"response-lastmodified",normalizedTitle:"response.lastmodified",charIndex:5277},{level:3,title:"response.lastModified=",slug:"response-lastmodified-2",normalizedTitle:"response.lastmodified=",charIndex:5339},{level:3,title:"response.etag=",slug:"response-etag",normalizedTitle:"response.etag=",charIndex:5463},{level:3,title:"response.vary(field)",slug:"response-vary-field",normalizedTitle:"response.vary(field)",charIndex:5612},{level:3,title:"response.flushHeaders()",slug:"response-flushheaders",normalizedTitle:"response.flushheaders()",charIndex:5655}],headersStr:"response API response.header response.headers response.socket response.status response.status= response.message response.message= response.length= response.length response.body response.body= String Buffer Stream Object response.get(field) response.has(field) response.set(field, value) response.append(field, value) response.set(fields) response.remove(field) response.type response.type= response.is(types...) response.redirect(url, [alt]) response.attachment([filename], [options]) response.headerSent response.lastModified response.lastModified= response.etag= response.vary(field) response.flushHeaders()",content:'# response\n\n如果你开启了内置http server服务，才能使用，该属性继承koa的response。\n\n使用方法：\n\nthis.app.response\n\n\n\n# API\n\n\n# response.header\n\n响应头对象。\n\n\n# response.headers\n\n响应头对象。别名是 response.header。\n\n\n# response.socket\n\n响应套接字。 作为 request.socket 指向 net.Socket 实例。\n\n\n# response.status\n\n获取响应状态。默认情况下，response.status 设置为 404 而不是像 node 的 res.statusCode 那样默认为 200。\n\n\n# response.status=\n\n通过数字代码设置响应状态：\n\n * 100 "continue"\n * 101 "switching protocols"\n * 102 "processing"\n * 200 "ok"\n * 201 "created"\n * 202 "accepted"\n * 203 "non-authoritative information"\n * 204 "no content"\n * 205 "reset content"\n * 206 "partial content"\n * 207 "multi-status"\n * 208 "already reported"\n * 226 "im used"\n * 300 "multiple choices"\n * 301 "moved permanently"\n * 302 "found"\n * 303 "see other"\n * 304 "not modified"\n * 305 "use proxy"\n * 307 "temporary redirect"\n * 308 "permanent redirect"\n * 400 "bad request"\n * 401 "unauthorized"\n * 402 "payment required"\n * 403 "forbidden"\n * 404 "not found"\n * 405 "method not allowed"\n * 406 "not acceptable"\n * 407 "proxy authentication required"\n * 408 "request timeout"\n * 409 "conflict"\n * 410 "gone"\n * 411 "length required"\n * 412 "precondition failed"\n * 413 "payload too large"\n * 414 "uri too long"\n * 415 "unsupported media type"\n * 416 "range not satisfiable"\n * 417 "expectation failed"\n * 418 "I\'m a teapot"\n * 422 "unprocessable entity"\n * 423 "locked"\n * 424 "failed dependency"\n * 426 "upgrade required"\n * 428 "precondition required"\n * 429 "too many requests"\n * 431 "request header fields too large"\n * 500 "internal server error"\n * 501 "not implemented"\n * 502 "bad gateway"\n * 503 "service unavailable"\n * 504 "gateway timeout"\n * 505 "http version not supported"\n * 506 "variant also negotiates"\n * 507 "insufficient storage"\n * 508 "loop detected"\n * 510 "not extended"\n * 511 "network authentication required"\n\n注意: 不用太在意记住这些字符串, 如果你写错了,可以查阅这个列表随时更正. 由于 response.status 默认设置为 404，因此发送没有 body 且状态不同的响应的操作如下： ctx.response.status = 200; // 或其他任何状态 ctx.response.status = 204;\n\n\n# response.message\n\n获取响应的状态消息. 默认情况下, response.message 与 response.status 关联.\n\n\n# response.message=\n\n将响应的状态消息设置为给定值。\n\n\n# response.length=\n\n将响应的 Content-Length 设置为给定值。\n\n\n# response.length\n\n以数字返回响应的 Content-Length，或者从ctx.body推导出来，或者undefined。\n\n\n# response.body\n\n获取响应主体。\n\n\n# response.body=\n\n默认或将控制器return的值，赋值给该属性。 将响应体设置为以下之一：\n\n * string 写入\n * Buffer 写入\n * Stream 管道\n * Object || Array JSON-字符串化\n * null 无内容响应\n\n如果 response.status 未被设置, Koa 将会自动设置状态为 200 或 204。 Koa 没有防范作为响应体的所有内容 - 函数没有有意义地序列化，返回布尔值可能会根据您的应用程序而有意义。并且当错误生效时，它可能无法正常工作 错误的属性无法枚举。 我们建议在您的应用中添加中间件，以确定每个应用的正文类型。 示例中间件可能是： app.use(async (ctx, next) => { await next() ctx.assert.equal(\'object\', typeof ctx, 500, \'某些开发错误\') })\n\n# String\n\nContent-Type 默认为 text/html 或 text/plain, 同时默认字符集是 utf-8。Content-Length 字段也是如此。\n\n# Buffer\n\nContent-Type 默认为 application/octet-stream, 并且 Content-Length 字段也是如此。\n\n# Stream\n\nContent-Type 默认为 application/octet-stream。 每当流被设置为响应主体时，.onerror 作为侦听器自动添加到 error 事件中以捕获任何错误。此外，每当请求关闭（甚至过早）时，流都将被销毁。如果你不想要这两个功能，请勿直接将流设为主体。例如，当将主体设置为代理中的 HTTP 流时，你可能不想要这样做，因为它会破坏底层连接。 以下是流错误处理的示例，而不会自动破坏流： const PassThrough = require(\'stream\').PassThrough; app.use(async ctx => { ctx.body = someHTTPStream.on(\'error\', (err) => ctx.onerror(err)).pipe(PassThrough()); });\n\n# Object\n\nContent-Type 默认为 application/json. 这包括普通的对象 { foo: \'bar\' } 和数组 [\'foo\', \'bar\']。\n\n\n# response.get(field)\n\n不区分大小写获取响应头字段值 field。 const etag = ctx.response.get(\'ETag\');\n\n\n# response.has(field)\n\n如果当前在响应头中设置了由名称标识的消息头，则返回 true. 消息头名称匹配不区分大小写. const rateLimited = ctx.response.has(\'X-RateLimit-Limit\');\n\n\n# response.set(field, value)\n\n设置响应头 field 到 value: ctx.set(\'Cache-Control\', \'no-cache\');\n\n\n# response.append(field, value)\n\n用值 val 附加额外的消息头 field。 ctx.append(\'Link\', \'http://127.0.0.1/\');\n\n\n# response.set(fields)\n\n用一个对象设置多个响应头fields: ctx.set({ \'Etag\': \'1234\', \'Last-Modified\': date }); 这将委托给 setHeader ，它通过指定的键设置或更新消息头，并且不重置整个消息头。\n\n\n# response.remove(field)\n\n删除消息头 field。\n\n\n# response.type\n\n获取响应 Content-Type, 不含 "charset" 等参数。 译者注: 这里其实是只获取 mime-type, 详见源码及其注释\n\nconst ct = ctx.type;\n// => "image/png"\n\n\n\n# response.type=\n\n设置响应 Content-Type 通过 mime 字符串或文件扩展名。\n\nctx.type = \'text/plain; charset=utf-8\';\nctx.type = \'image/png\';\nctx.type = \'.png\';\nctx.type = \'png\';\n\n\n注意: 在适当的情况下为你选择 charset, 比如 response.type = \'html\' 将默认是 "utf-8". 如果你想覆盖 charset, 使用 ctx.set(\'Content-Type\', \'text/html\') 将响应头字段设置为直接值。\n\n\n# response.is(types...)\n\n非常类似 ctx.request.is(). 检查响应类型是否是所提供的类型之一。这对于创建操纵响应的中间件特别有用。 例如, 这是一个中间件，可以削减除流之外的所有HTML响应。\n\nconst minify = require(\'html-minifier\');\n\napp.use(async (ctx, next) => {\n  await next();\n\n  if (!ctx.response.is(\'html\')) return;\n\n  let body = ctx.body;\n  if (!body || body.pipe) return;\n\n  if (Buffer.isBuffer(body)) body = body.toString();\n  ctx.body = minify(body);\n});\n\n\n\n# response.redirect(url, [alt])\n\n执行 [302] 重定向到 url. 字符串 “back” 是特别提供 Referrer 支持的，当 Referrer 不存在时，使用 alt 或 “/”。\n\nctx.redirect(\'back\');\nctx.redirect(\'back\', \'/index.html\');\nctx.redirect(\'/login\');\nctx.redirect(\'http://google.com\');\n\n\n要更改 “302” 的默认状态，只需在该调用之前或之后给 status 赋值。要变更主体请在此调用之后:\n\nctx.status = 301;\nctx.redirect(\'/cart\');\nctx.body = \'Redirecting to shopping cart\';\n\n\n\n# response.attachment([filename], [options])\n\n将 Content-Disposition 设置为 “附件” 以指示客户端提示下载。(可选)指定下载的 filename 和部分 参数。\n\n\n# response.headerSent\n\n检查是否已经发送了一个响应头。 用于查看客户端是否可能会收到错误通知。\n\n\n# response.lastModified\n\n将 Last-Modified 消息头返回为 Date, 如果存在。\n\n\n# response.lastModified=\n\n将 Last-Modified 消息头设置为适当的 UTC 字符串。您可以将其设置为 Date 或日期字符串。 ctx.response.lastModified = new Date();\n\n\n# response.etag=\n\n设置包含 " 包裹的 ETag 响应， 请注意，没有相应的 response.etag getter。 ctx.response.etag = crypto.createHash(\'md5\').update(ctx.body).digest(\'hex\');\n\n\n# response.vary(field)\n\n设置 field 的 vary。\n\n\n# response.flushHeaders()\n\n刷新任何设置的消息头，然后是主体(body)。',normalizedContent:'# response\n\n如果你开启了内置http server服务，才能使用，该属性继承koa的response。\n\n使用方法：\n\nthis.app.response\n\n\n\n# api\n\n\n# response.header\n\n响应头对象。\n\n\n# response.headers\n\n响应头对象。别名是 response.header。\n\n\n# response.socket\n\n响应套接字。 作为 request.socket 指向 net.socket 实例。\n\n\n# response.status\n\n获取响应状态。默认情况下，response.status 设置为 404 而不是像 node 的 res.statuscode 那样默认为 200。\n\n\n# response.status=\n\n通过数字代码设置响应状态：\n\n * 100 "continue"\n * 101 "switching protocols"\n * 102 "processing"\n * 200 "ok"\n * 201 "created"\n * 202 "accepted"\n * 203 "non-authoritative information"\n * 204 "no content"\n * 205 "reset content"\n * 206 "partial content"\n * 207 "multi-status"\n * 208 "already reported"\n * 226 "im used"\n * 300 "multiple choices"\n * 301 "moved permanently"\n * 302 "found"\n * 303 "see other"\n * 304 "not modified"\n * 305 "use proxy"\n * 307 "temporary redirect"\n * 308 "permanent redirect"\n * 400 "bad request"\n * 401 "unauthorized"\n * 402 "payment required"\n * 403 "forbidden"\n * 404 "not found"\n * 405 "method not allowed"\n * 406 "not acceptable"\n * 407 "proxy authentication required"\n * 408 "request timeout"\n * 409 "conflict"\n * 410 "gone"\n * 411 "length required"\n * 412 "precondition failed"\n * 413 "payload too large"\n * 414 "uri too long"\n * 415 "unsupported media type"\n * 416 "range not satisfiable"\n * 417 "expectation failed"\n * 418 "i\'m a teapot"\n * 422 "unprocessable entity"\n * 423 "locked"\n * 424 "failed dependency"\n * 426 "upgrade required"\n * 428 "precondition required"\n * 429 "too many requests"\n * 431 "request header fields too large"\n * 500 "internal server error"\n * 501 "not implemented"\n * 502 "bad gateway"\n * 503 "service unavailable"\n * 504 "gateway timeout"\n * 505 "http version not supported"\n * 506 "variant also negotiates"\n * 507 "insufficient storage"\n * 508 "loop detected"\n * 510 "not extended"\n * 511 "network authentication required"\n\n注意: 不用太在意记住这些字符串, 如果你写错了,可以查阅这个列表随时更正. 由于 response.status 默认设置为 404，因此发送没有 body 且状态不同的响应的操作如下： ctx.response.status = 200; // 或其他任何状态 ctx.response.status = 204;\n\n\n# response.message\n\n获取响应的状态消息. 默认情况下, response.message 与 response.status 关联.\n\n\n# response.message=\n\n将响应的状态消息设置为给定值。\n\n\n# response.length=\n\n将响应的 content-length 设置为给定值。\n\n\n# response.length\n\n以数字返回响应的 content-length，或者从ctx.body推导出来，或者undefined。\n\n\n# response.body\n\n获取响应主体。\n\n\n# response.body=\n\n默认或将控制器return的值，赋值给该属性。 将响应体设置为以下之一：\n\n * string 写入\n * buffer 写入\n * stream 管道\n * object || array json-字符串化\n * null 无内容响应\n\n如果 response.status 未被设置, koa 将会自动设置状态为 200 或 204。 koa 没有防范作为响应体的所有内容 - 函数没有有意义地序列化，返回布尔值可能会根据您的应用程序而有意义。并且当错误生效时，它可能无法正常工作 错误的属性无法枚举。 我们建议在您的应用中添加中间件，以确定每个应用的正文类型。 示例中间件可能是： app.use(async (ctx, next) => { await next() ctx.assert.equal(\'object\', typeof ctx, 500, \'某些开发错误\') })\n\n# string\n\ncontent-type 默认为 text/html 或 text/plain, 同时默认字符集是 utf-8。content-length 字段也是如此。\n\n# buffer\n\ncontent-type 默认为 application/octet-stream, 并且 content-length 字段也是如此。\n\n# stream\n\ncontent-type 默认为 application/octet-stream。 每当流被设置为响应主体时，.onerror 作为侦听器自动添加到 error 事件中以捕获任何错误。此外，每当请求关闭（甚至过早）时，流都将被销毁。如果你不想要这两个功能，请勿直接将流设为主体。例如，当将主体设置为代理中的 http 流时，你可能不想要这样做，因为它会破坏底层连接。 以下是流错误处理的示例，而不会自动破坏流： const passthrough = require(\'stream\').passthrough; app.use(async ctx => { ctx.body = somehttpstream.on(\'error\', (err) => ctx.onerror(err)).pipe(passthrough()); });\n\n# object\n\ncontent-type 默认为 application/json. 这包括普通的对象 { foo: \'bar\' } 和数组 [\'foo\', \'bar\']。\n\n\n# response.get(field)\n\n不区分大小写获取响应头字段值 field。 const etag = ctx.response.get(\'etag\');\n\n\n# response.has(field)\n\n如果当前在响应头中设置了由名称标识的消息头，则返回 true. 消息头名称匹配不区分大小写. const ratelimited = ctx.response.has(\'x-ratelimit-limit\');\n\n\n# response.set(field, value)\n\n设置响应头 field 到 value: ctx.set(\'cache-control\', \'no-cache\');\n\n\n# response.append(field, value)\n\n用值 val 附加额外的消息头 field。 ctx.append(\'link\', \'http://127.0.0.1/\');\n\n\n# response.set(fields)\n\n用一个对象设置多个响应头fields: ctx.set({ \'etag\': \'1234\', \'last-modified\': date }); 这将委托给 setheader ，它通过指定的键设置或更新消息头，并且不重置整个消息头。\n\n\n# response.remove(field)\n\n删除消息头 field。\n\n\n# response.type\n\n获取响应 content-type, 不含 "charset" 等参数。 译者注: 这里其实是只获取 mime-type, 详见源码及其注释\n\nconst ct = ctx.type;\n// => "image/png"\n\n\n\n# response.type=\n\n设置响应 content-type 通过 mime 字符串或文件扩展名。\n\nctx.type = \'text/plain; charset=utf-8\';\nctx.type = \'image/png\';\nctx.type = \'.png\';\nctx.type = \'png\';\n\n\n注意: 在适当的情况下为你选择 charset, 比如 response.type = \'html\' 将默认是 "utf-8". 如果你想覆盖 charset, 使用 ctx.set(\'content-type\', \'text/html\') 将响应头字段设置为直接值。\n\n\n# response.is(types...)\n\n非常类似 ctx.request.is(). 检查响应类型是否是所提供的类型之一。这对于创建操纵响应的中间件特别有用。 例如, 这是一个中间件，可以削减除流之外的所有html响应。\n\nconst minify = require(\'html-minifier\');\n\napp.use(async (ctx, next) => {\n  await next();\n\n  if (!ctx.response.is(\'html\')) return;\n\n  let body = ctx.body;\n  if (!body || body.pipe) return;\n\n  if (buffer.isbuffer(body)) body = body.tostring();\n  ctx.body = minify(body);\n});\n\n\n\n# response.redirect(url, [alt])\n\n执行 [302] 重定向到 url. 字符串 “back” 是特别提供 referrer 支持的，当 referrer 不存在时，使用 alt 或 “/”。\n\nctx.redirect(\'back\');\nctx.redirect(\'back\', \'/index.html\');\nctx.redirect(\'/login\');\nctx.redirect(\'http://google.com\');\n\n\n要更改 “302” 的默认状态，只需在该调用之前或之后给 status 赋值。要变更主体请在此调用之后:\n\nctx.status = 301;\nctx.redirect(\'/cart\');\nctx.body = \'redirecting to shopping cart\';\n\n\n\n# response.attachment([filename], [options])\n\n将 content-disposition 设置为 “附件” 以指示客户端提示下载。(可选)指定下载的 filename 和部分 参数。\n\n\n# response.headersent\n\n检查是否已经发送了一个响应头。 用于查看客户端是否可能会收到错误通知。\n\n\n# response.lastmodified\n\n将 last-modified 消息头返回为 date, 如果存在。\n\n\n# response.lastmodified=\n\n将 last-modified 消息头设置为适当的 utc 字符串。您可以将其设置为 date 或日期字符串。 ctx.response.lastmodified = new date();\n\n\n# response.etag=\n\n设置包含 " 包裹的 etag 响应， 请注意，没有相应的 response.etag getter。 ctx.response.etag = crypto.createhash(\'md5\').update(ctx.body).digest(\'hex\');\n\n\n# response.vary(field)\n\n设置 field 的 vary。\n\n\n# response.flushheaders()\n\n刷新任何设置的消息头，然后是主体(body)。',charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"service",frontmatter:{title:"service",date:"2023-05-26T11:12:19.000Z",permalink:"/pages/5f6665/",article:!1},regularPath:"/03.api/002.API/106.this-app/090.service.html",relativePath:"03.api/002.API/106.this-app/090.service.md",key:"v-07309b25",path:"/pages/5f6665/",headers:[{level:3,title:"service",slug:"service",normalizedTitle:"service",charIndex:2},{level:3,title:"推荐",slug:"推荐",normalizedTitle:"推荐",charIndex:23},{level:3,title:"使用方法：",slug:"使用方法",normalizedTitle:"使用方法：",charIndex:65}],headersStr:"service 推荐 使用方法：",content:"# service\n\n调用服务层功能\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n\n# 使用方法：\n\nthis.app.service.example.hello();\n",normalizedContent:"# service\n\n调用服务层功能\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n\n# 使用方法：\n\nthis.app.service.example.hello();\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"utils",frontmatter:{title:"utils",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/e0ef81/",article:!1},regularPath:"/03.api/002.API/110.utils.html",relativePath:"03.api/002.API/110.utils.md",key:"v-58b797ed",path:"/pages/e0ef81/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:36},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:87},{level:3,title:"getPackage()",slug:"getpackage",normalizedTitle:"getpackage()",charIndex:97},{level:3,title:"getMAC(iface)",slug:"getmac-iface",normalizedTitle:"getmac(iface)",charIndex:138},{level:3,title:"isMAC(macAddress)",slug:"ismac-macaddress",normalizedTitle:"ismac(macaddress)",charIndex:230},{level:3,title:"machineId()",slug:"machineid",normalizedTitle:"machineid()",charIndex:321},{level:3,title:"machineIdSync()",slug:"machineidsync",normalizedTitle:"machineidsync()",charIndex:515}],headersStr:"介绍 使用方法 API列表 getPackage() getMAC(iface) isMAC(macAddress) machineId() machineIdSync()",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n工具库模块。\n\n\n# 使用方法\n\nconst Utils = require('ee-core/utils');\n\n\n\n# API列表\n\n\n# getPackage()\n\n获取项目根目录package.json内容。\n\n\n# getMAC(iface)\n\n> ee-core：v2.1.0\n\n * iface [String] - 如果提供，则将MAC地址提取限制到此接口\n\n获取一个正确的MAC地址\n\n\n# isMAC(macAddress)\n\n> ee-core：v2.1.0\n\n * macAddress [String] - mac address\n\n是否为有效的Mac地址\n\n\n# machineId()\n\n> ee-core：v2.1.1\n\n * original [Boolean] - If true return original value of machine id, otherwise return hashed value (sha-256), default: false\n\n（异步）获取 machine id，返回 Promise 对象。\n\n\n# machineIdSync()\n\n> ee-core：v2.1.1\n\n * original [Boolean] - If true return original value of machine id, otherwise return hashed value (sha-256), default: false\n\n（同步）获取 machine id。",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n工具库模块。\n\n\n# 使用方法\n\nconst utils = require('ee-core/utils');\n\n\n\n# api列表\n\n\n# getpackage()\n\n获取项目根目录package.json内容。\n\n\n# getmac(iface)\n\n> ee-core：v2.1.0\n\n * iface [string] - 如果提供，则将mac地址提取限制到此接口\n\n获取一个正确的mac地址\n\n\n# ismac(macaddress)\n\n> ee-core：v2.1.0\n\n * macaddress [string] - mac address\n\n是否为有效的mac地址\n\n\n# machineid()\n\n> ee-core：v2.1.1\n\n * original [boolean] - if true return original value of machine id, otherwise return hashed value (sha-256), default: false\n\n（异步）获取 machine id，返回 promise 对象。\n\n\n# machineidsync()\n\n> ee-core：v2.1.1\n\n * original [boolean] - if true return original value of machine id, otherwise return hashed value (sha-256), default: false\n\n（同步）获取 machine id。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"utils/helper",frontmatter:{title:"utils/helper",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/fbf5b7/",article:!1},regularPath:"/03.api/002.API/111.utils-helper.html",relativePath:"03.api/002.API/111.utils-helper.md",key:"v-bed3c2f6",path:"/pages/fbf5b7/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:42},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:106},{level:3,title:"fnDebounce()",slug:"fndebounce",normalizedTitle:"fndebounce()",charIndex:116},{level:3,title:"getRandomString()",slug:"getrandomstring",normalizedTitle:"getrandomstring()",charIndex:258},{level:3,title:"mkdir(filepath)",slug:"mkdir-filepath",normalizedTitle:"mkdir(filepath)",charIndex:290},{level:3,title:"chmodPath(path, mode)",slug:"chmodpath-path-mode",normalizedTitle:"chmodpath(path, mode)",charIndex:346},{level:3,title:"compareVersion(v1, v2)",slug:"compareversion-v1-v2",normalizedTitle:"compareversion(v1, v2)",charIndex:436},{level:3,title:"stringify(obj, ignore = [])",slug:"stringify-obj-ignore",normalizedTitle:"stringify(obj, ignore = [])",charIndex:513},{level:3,title:"validValue(value)",slug:"validvalue-value",normalizedTitle:"validvalue(value)",charIndex:629}],headersStr:"介绍 使用方法 API列表 fnDebounce() getRandomString() mkdir(filepath) chmodPath(path, mode) compareVersion(v1, v2) stringify(obj, ignore = []) validValue(value)",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n工具库helper模块。\n\n\n# 使用方法\n\nconst UtilsHelper = require('ee-core/utils/helper');\n\n\n\n# API列表\n\n\n# fnDebounce()\n\n * fn [Function] - 回调函数\n * delayTime [Time] - 延迟时间(ms)\n * isImediate [Boolean] - 是否需要立即调用\n * args [type] - 回调函数传入参数\n\n去除抖动器。\n\n\n# getRandomString()\n\n随机10位字符串\n\n\n# mkdir(filepath)\n\n * filepath [String] - 文件路径\n\n创建文件夹\n\n\n# chmodPath(path, mode)\n\n * path [String] - 文件路径\n * mode [String] - 权限；如755、777\n\n修改文件权限\n\n\n# compareVersion(v1, v2)\n\n * v1 [String] - 版本号\n * v2 [String] - 版本号\n\n版本号比较\n\n\n# stringify(obj, ignore = [])\n\n> ee-core：v2.1.0\n\n * obj [String] - 对象\n * ignore [Array] - 忽略对象中的属性\n\n序列化对象为JSON字符串\n\n\n# validValue(value)\n\n> ee-core：v2.1.0\n\n * value [String]\n\n给定的参数是否为有效值，即：非 undefined / null / ''",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n工具库helper模块。\n\n\n# 使用方法\n\nconst utilshelper = require('ee-core/utils/helper');\n\n\n\n# api列表\n\n\n# fndebounce()\n\n * fn [function] - 回调函数\n * delaytime [time] - 延迟时间(ms)\n * isimediate [boolean] - 是否需要立即调用\n * args [type] - 回调函数传入参数\n\n去除抖动器。\n\n\n# getrandomstring()\n\n随机10位字符串\n\n\n# mkdir(filepath)\n\n * filepath [string] - 文件路径\n\n创建文件夹\n\n\n# chmodpath(path, mode)\n\n * path [string] - 文件路径\n * mode [string] - 权限；如755、777\n\n修改文件权限\n\n\n# compareversion(v1, v2)\n\n * v1 [string] - 版本号\n * v2 [string] - 版本号\n\n版本号比较\n\n\n# stringify(obj, ignore = [])\n\n> ee-core：v2.1.0\n\n * obj [string] - 对象\n * ignore [array] - 忽略对象中的属性\n\n序列化对象为json字符串\n\n\n# validvalue(value)\n\n> ee-core：v2.1.0\n\n * value [string]\n\n给定的参数是否为有效值，即：非 undefined / null / ''",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"utils/is",frontmatter:{title:"utils/is",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/70fa2b/",article:!1},regularPath:"/03.api/002.API/112.utils-is.html",relativePath:"03.api/002.API/112.utils-is.md",key:"v-b47cce36",path:"/pages/70fa2b/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:38},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:94},{level:3,title:"renderer()",slug:"renderer",normalizedTitle:"renderer()",charIndex:104},{level:3,title:"main()",slug:"main",normalizedTitle:"main()",charIndex:128},{level:3,title:"osx()",slug:"osx",normalizedTitle:"osx()",charIndex:147},{level:3,title:"macOS()",slug:"macos",normalizedTitle:"macos()",charIndex:170},{level:3,title:"windows()",slug:"windows",normalizedTitle:"windows()",charIndex:195},{level:3,title:"linux()",slug:"linux",normalizedTitle:"linux()",charIndex:223},{level:3,title:"x86()",slug:"x86",normalizedTitle:"x86()",charIndex:247},{level:3,title:"x64()",slug:"x64",normalizedTitle:"x64()",charIndex:267},{level:3,title:"sandbox()",slug:"sandbox",normalizedTitle:"sandbox()",charIndex:286},{level:3,title:"mas()",slug:"mas",normalizedTitle:"mas()",charIndex:317},{level:3,title:"windowsStore()",slug:"windowsstore",normalizedTitle:"windowsstore()",charIndex:350},{level:3,title:"all()",slug:"all",normalizedTitle:"all()",charIndex:394},{level:3,title:"none()",slug:"none",normalizedTitle:"none()",charIndex:428},{level:3,title:"one()",slug:"one",normalizedTitle:"one()",charIndex:429},{level:3,title:"release(requested)",slug:"release-requested",normalizedTitle:"release(requested)",charIndex:498},{level:3,title:"gtRelease(requested)",slug:"gtrelease-requested",normalizedTitle:"gtrelease(requested)",charIndex:538},{level:3,title:"ltRelease(requested)",slug:"ltrelease-requested",normalizedTitle:"ltrelease(requested)",charIndex:581}],headersStr:"介绍 使用方法 API列表 renderer() main() osx() macOS() windows() linux() x86() x64() sandbox() mas() windowsStore() all() none() one() release(requested) gtRelease(requested) ltRelease(requested)",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n工具库is模块。\n\n\n# 使用方法\n\nconst UtilsIs = require('ee-core/utils/is');\n\n\n\n# API列表\n\n\n# renderer()\n\n是否为渲染进程\n\n\n# main()\n\n是否为主进程\n\n\n# osx()\n\n是否为MacOS 平台\n\n\n# macOS()\n\n是否为MacOS 平台\n\n\n# windows()\n\n是否为windows平台\n\n\n# linux()\n\n是否为linux平台\n\n\n# x86()\n\n是否为x86架构\n\n\n# x64()\n\n是否为64架构\n\n\n# sandbox()\n\n是否运行在沙盒中（MacOS）\n\n\n# mas()\n\n是否正在运行，从MacOS应用商店中启动。\n\n\n# windowsStore()\n\n是否正在运行，从windows应用商店中启动。\n\n\n# all()\n\n检查传入的多个参数（函数）是否都为true。\n\n\n# none()\n\n检查传入的多个参数（函数）是否都为false。\n\n\n# one()\n\n检查传入的多个参数（函数）有一个为true。\n\n\n# release(requested)\n\n检查给定版本是否与操作系统相同\n\n\n# gtRelease(requested)\n\n检查给定版本是否大于当前OS版本\n\n\n# ltRelease(requested)\n\n检查给定版本是否小于当前OS版本",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n工具库is模块。\n\n\n# 使用方法\n\nconst utilsis = require('ee-core/utils/is');\n\n\n\n# api列表\n\n\n# renderer()\n\n是否为渲染进程\n\n\n# main()\n\n是否为主进程\n\n\n# osx()\n\n是否为macos 平台\n\n\n# macos()\n\n是否为macos 平台\n\n\n# windows()\n\n是否为windows平台\n\n\n# linux()\n\n是否为linux平台\n\n\n# x86()\n\n是否为x86架构\n\n\n# x64()\n\n是否为64架构\n\n\n# sandbox()\n\n是否运行在沙盒中（macos）\n\n\n# mas()\n\n是否正在运行，从macos应用商店中启动。\n\n\n# windowsstore()\n\n是否正在运行，从windows应用商店中启动。\n\n\n# all()\n\n检查传入的多个参数（函数）是否都为true。\n\n\n# none()\n\n检查传入的多个参数（函数）是否都为false。\n\n\n# one()\n\n检查传入的多个参数（函数）有一个为true。\n\n\n# release(requested)\n\n检查给定版本是否与操作系统相同\n\n\n# gtrelease(requested)\n\n检查给定版本是否大于当前os版本\n\n\n# ltrelease(requested)\n\n检查给定版本是否小于当前os版本",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"utils/json",frontmatter:{title:"utils/json",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/44cac6/",article:!1},regularPath:"/03.api/002.API/113.utils-json.html",relativePath:"03.api/002.API/113.utils-json.md",key:"v-87791df6",path:"/pages/44cac6/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:40},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:100},{level:3,title:"strictParse(str)",slug:"strictparse-str",normalizedTitle:"strictparse(str)",charIndex:110},{level:3,title:"readSync(filepath)",slug:"readsync-filepath",normalizedTitle:"readsync(filepath)",charIndex:162},{level:3,title:"writeSync(filepath, str, options)",slug:"writesync-filepath-str-options",normalizedTitle:"writesync(filepath, str, options)",charIndex:232},{level:3,title:"read(filepath)",slug:"read-filepath",normalizedTitle:"read(filepath)",charIndex:400},{level:3,title:"write(filepath, str, options)",slug:"write-filepath-str-options",normalizedTitle:"write(filepath, str, options)",charIndex:443}],headersStr:"介绍 使用方法 API列表 strictParse(str) readSync(filepath) writeSync(filepath, str, options) read(filepath) write(filepath, str, options)",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\n工具库Json模块。\n\n\n# 使用方法\n\nconst UtilsJson = require('ee-core/utils/json');\n\n\n\n# API列表\n\n\n# strictParse(str)\n\n * str [String] - 字符串\n\n字符串转对象\n\n\n# readSync(filepath)\n\n * filepath [String] - 文件的绝对路径\n\n同步读取一个json文件。\n\n\n# writeSync(filepath, str, options)\n\n * filepath [String] - json文件的绝对路径\n * str [String|Object] - 对象或字符串对象\n * options\n   * space [Number] - 缩进，默认2\n\n同步写入一个对象或对象字符串到文件。\n\n\n# read(filepath)\n\n异步读取一个json文件。返还promise\n\n\n# write(filepath, str, options)\n\n * filepath [String] - json文件的绝对路径\n * str [String|Object] - 对象或字符串对象\n * options\n   * space [Number] - 缩进，默认2\n\n异步写入一个对象或对象字符串到文件。",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\n工具库json模块。\n\n\n# 使用方法\n\nconst utilsjson = require('ee-core/utils/json');\n\n\n\n# api列表\n\n\n# strictparse(str)\n\n * str [string] - 字符串\n\n字符串转对象\n\n\n# readsync(filepath)\n\n * filepath [string] - 文件的绝对路径\n\n同步读取一个json文件。\n\n\n# writesync(filepath, str, options)\n\n * filepath [string] - json文件的绝对路径\n * str [string|object] - 对象或字符串对象\n * options\n   * space [number] - 缩进，默认2\n\n同步写入一个对象或对象字符串到文件。\n\n\n# read(filepath)\n\n异步读取一个json文件。返还promise\n\n\n# write(filepath, str, options)\n\n * filepath [string] - json文件的绝对路径\n * str [string|object] - 对象或字符串对象\n * options\n   * space [number] - 缩进，默认2\n\n异步写入一个对象或对象字符串到文件。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"utils/time",frontmatter:{title:"utils/time",date:"2023-04-26T11:00:40.000Z",permalink:"/pages/b7f46d/"},regularPath:"/03.api/002.API/114.utils-time.html",relativePath:"03.api/002.API/114.utils-time.md",key:"v-4dbd4885",path:"/pages/b7f46d/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:40},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:100},{level:3,title:"humanizeToMs(value)",slug:"humanizetoms-value",normalizedTitle:"humanizetoms(value)",charIndex:110},{level:3,title:"ms(value)",slug:"ms-value",normalizedTitle:"ms(value)",charIndex:627}],headersStr:"介绍 使用方法 API列表 humanizeToMs(value) ms(value)",content:"> ee-core：v2.1.0\n\n\n# 介绍\n\n工具库time模块。\n\n\n# 使用方法\n\nconst UtilsTime = require('ee-core/utils/time');\n\n\n\n# API列表\n\n\n# humanizeToMs(value)\n\n * value [Any]\n\n将各种时间格式转换为毫秒。如果参数为number类型，直接返回；如果为undefined，将抛出一个错误。\n\nhumanizeToMs('2 days')  // 172800000\nhumanizeToMs('1d')      // 86400000\nhumanizeToMs('10h')     // 36000000\nhumanizeToMs('2.5 hrs') // 9000000\nhumanizeToMs('2h')      // 7200000\nhumanizeToMs('1m')      // 60000\nhumanizeToMs('5s')      // 5000\nhumanizeToMs('1y')      // 31557600000\nhumanizeToMs('100')     // 100\nhumanizeToMs('-3 days') // -259200000\nhumanizeToMs('-1h')     // -3600000\nhumanizeToMs('-200')    // -200\n\n\n\n# ms(value)\n\n * value [Any]\n\n将各种时间格式转换为毫秒。\n\n# Convert from String\nms('2 days')  // 172800000\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2.5 hrs') // 9000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('1y')      // 31557600000\nms('100')     // 100\nms('-3 days') // -259200000\nms('-1h')     // -3600000\nms('-200')    // -200\n\n# Convert from Milliseconds\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(-3 * 60000)        // \"-3m\"\nms(ms('10 hours'))    // \"10h\"\n\n# Time Format Written-Out\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(-3 * 60000, { long: true })        // \"-3 minutes\"\nms(ms('10 hours'), { long: true })    // \"10 hours\"\n",normalizedContent:"> ee-core：v2.1.0\n\n\n# 介绍\n\n工具库time模块。\n\n\n# 使用方法\n\nconst utilstime = require('ee-core/utils/time');\n\n\n\n# api列表\n\n\n# humanizetoms(value)\n\n * value [any]\n\n将各种时间格式转换为毫秒。如果参数为number类型，直接返回；如果为undefined，将抛出一个错误。\n\nhumanizetoms('2 days')  // 172800000\nhumanizetoms('1d')      // 86400000\nhumanizetoms('10h')     // 36000000\nhumanizetoms('2.5 hrs') // 9000000\nhumanizetoms('2h')      // 7200000\nhumanizetoms('1m')      // 60000\nhumanizetoms('5s')      // 5000\nhumanizetoms('1y')      // 31557600000\nhumanizetoms('100')     // 100\nhumanizetoms('-3 days') // -259200000\nhumanizetoms('-1h')     // -3600000\nhumanizetoms('-200')    // -200\n\n\n\n# ms(value)\n\n * value [any]\n\n将各种时间格式转换为毫秒。\n\n# convert from string\nms('2 days')  // 172800000\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2.5 hrs') // 9000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('1y')      // 31557600000\nms('100')     // 100\nms('-3 days') // -259200000\nms('-1h')     // -3600000\nms('-200')    // -200\n\n# convert from milliseconds\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(-3 * 60000)        // \"-3m\"\nms(ms('10 hours'))    // \"10h\"\n\n# time format written-out\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(-3 * 60000, { long: true })        // \"-3 minutes\"\nms(ms('10 hours'), { long: true })    // \"10 hours\"\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"utils/ip",frontmatter:{title:"utils/ip",date:"2023-04-26T11:02:57.000Z",permalink:"/pages/451022/"},regularPath:"/03.api/002.API/115.utils-ip.html",relativePath:"03.api/002.API/115.utils-ip.md",key:"v-c0b707b6",path:"/pages/451022/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:38},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:94},{level:3,title:"publicIpv4(options)",slug:"publicipv4-options",normalizedTitle:"publicipv4(options)",charIndex:104},{level:3,title:"publicIpv6(options)",slug:"publicipv6-options",normalizedTitle:"publicipv6(options)",charIndex:245}],headersStr:"介绍 使用方法 API列表 publicIpv4(options) publicIpv6(options)",content:"> ee-core：v2.1.0\n\n\n# 介绍\n\n工具库IP模块。\n\n\n# 使用方法\n\nconst UtilsIP = require('ee-core/utils/ip');\n\n\n\n# API列表\n\n\n# publicIpv4(options)\n\n * options [Object]\n   * type [String] - 查询类型：'http' | 'dns' | 'all'\n   * timeout [Int] - 超时时间，默认 3000 毫秒\n\n获取公网ipv4\n\n\n# publicIpv6(options)\n\n * options [Object]\n   * type [String] - 查询类型：'http' | 'dns' | 'all'\n   * timeout [Int] - 超时时间，默认 3000 毫秒\n\n获取公网ipv6",normalizedContent:"> ee-core：v2.1.0\n\n\n# 介绍\n\n工具库ip模块。\n\n\n# 使用方法\n\nconst utilsip = require('ee-core/utils/ip');\n\n\n\n# api列表\n\n\n# publicipv4(options)\n\n * options [object]\n   * type [string] - 查询类型：'http' | 'dns' | 'all'\n   * timeout [int] - 超时时间，默认 3000 毫秒\n\n获取公网ipv4\n\n\n# publicipv6(options)\n\n * options [object]\n   * type [string] - 查询类型：'http' | 'dns' | 'all'\n   * timeout [int] - 超时时间，默认 3000 毫秒\n\n获取公网ipv6",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"utils/get-port",frontmatter:{title:"utils/get-port",date:"2023-05-16T11:02:57.000Z",permalink:"/pages/001df6/",article:!1},regularPath:"/03.api/002.API/116.utils-port.html",relativePath:"03.api/002.API/116.utils-port.md",key:"v-88fc4b76",path:"/pages/001df6/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:38},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:100},{level:3,title:"getPort(options)",slug:"getport-options",normalizedTitle:"getport(options)",charIndex:110}],headersStr:"介绍 使用方法 API列表 getPort(options)",content:"> ee-core：v2.1.0\n\n\n# 介绍\n\n工具库端口模块。\n\n\n# 使用方法\n\nconst GetPort = require('ee-core/utils/get-port');\n\n\n\n# API列表\n\n\n# getPort(options)\n\n * options [Object]\n   * port [number | array] - （可选）端口或要使用的端口的可迭代对象\n\n获取一个或多个可用的端口，返回 Promise 对象。\n\n// 随机获取一个端口\nconst port = await GetPort();\n\n// 获取一个指定端口，如果指定端口被占用，则随机获取。\nconst port = await GetPort({port: 3001});\n",normalizedContent:"> ee-core：v2.1.0\n\n\n# 介绍\n\n工具库端口模块。\n\n\n# 使用方法\n\nconst getport = require('ee-core/utils/get-port');\n\n\n\n# api列表\n\n\n# getport(options)\n\n * options [object]\n   * port [number | array] - （可选）端口或要使用的端口的可迭代对象\n\n获取一个或多个可用的端口，返回 promise 对象。\n\n// 随机获取一个端口\nconst port = await getport();\n\n// 获取一个指定端口，如果指定端口被占用，则随机获取。\nconst port = await getport({port: 3001});\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"oldUtils",frontmatter:{title:"oldUtils",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/7f6033/",article:!1},regularPath:"/03.api/002.API/999.oldUtils.html",relativePath:"03.api/002.API/999.oldUtils.md",key:"v-29741085",path:"/pages/7f6033/",headers:[{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:21},{level:3,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:65},{level:3,title:"API列表",slug:"api列表",normalizedTitle:"api列表",charIndex:170},{level:3,title:"getEnv()",slug:"getenv",normalizedTitle:"getenv()",charIndex:180},{level:3,title:"getHomeDir()",slug:"gethomedir",normalizedTitle:"gethomedir()",charIndex:224},{level:3,title:"getBaseDir()",slug:"getbasedir",normalizedTitle:"getbasedir()",charIndex:261},{level:3,title:"getRootDir()",slug:"getrootdir",normalizedTitle:"getrootdir()",charIndex:342},{level:3,title:"getAppVersion()",slug:"getappversion",normalizedTitle:"getappversion()",charIndex:398},{level:3,title:"getExecDir()",slug:"getexecdir",normalizedTitle:"getexecdir()",charIndex:437},{level:3,title:"getLogDir()",slug:"getlogdir",normalizedTitle:"getlogdir()",charIndex:498},{level:3,title:"getAppUserDataDir()",slug:"getappuserdatadir",normalizedTitle:"getappuserdatadir()",charIndex:526},{level:3,title:"getStorageDir()",slug:"getstoragedir",normalizedTitle:"getstoragedir()",charIndex:581},{level:3,title:"getExtraResourcesDir()",slug:"getextraresourcesdir",normalizedTitle:"getextraresourcesdir()",charIndex:616},{level:3,title:"getEeConfig()",slug:"geteeconfig",normalizedTitle:"geteeconfig()",charIndex:657},{level:3,title:"getAddonConfig()",slug:"getaddonconfig",normalizedTitle:"getaddonconfig()",charIndex:687},{level:3,title:"getMainServerConfig()",slug:"getmainserverconfig",normalizedTitle:"getmainserverconfig()",charIndex:720},{level:3,title:"getHttpServerConfig()",slug:"gethttpserverconfig",normalizedTitle:"gethttpserverconfig()",charIndex:766},{level:3,title:"getSocketServerConfig()",slug:"getsocketserverconfig",normalizedTitle:"getsocketserverconfig()",charIndex:812},{level:3,title:"getPackage()",slug:"getpackage",normalizedTitle:"getpackage()",charIndex:862},{level:3,title:"chmodPath()",slug:"chmodpath",normalizedTitle:"chmodpath()",charIndex:903},{level:3,title:"mkdir()",slug:"mkdir",normalizedTitle:"mkdir()",charIndex:930},{level:3,title:"callFn()",slug:"callfn",normalizedTitle:"callfn()",charIndex:951}],headersStr:"介绍 使用方法 API列表 getEnv() getHomeDir() getBaseDir() getRootDir() getAppVersion() getExecDir() getLogDir() getAppUserDataDir() getStorageDir() getExtraResourcesDir() getEeConfig() getAddonConfig() getMainServerConfig() getHttpServerConfig() getSocketServerConfig() getPackage() chmodPath() mkdir() callFn()",content:"> ee-core：v2.0.3\n\n\n# 介绍\n\nutils库api 注：不建议使用，只是为了兼容旧版本，不再追加功能。\n\n\n# 使用方法\n\nconst { Utils } = require('ee-core');\nconst Utils = require('ee-core').Utils;\n\n# 请使用新的utils模块\n\n\n\n# API列表\n\n\n# getEnv()\n\n说明：获取 当前环境，local-本地，prod-生产环境\n\n\n# getHomeDir()\n\n说明：获取 home目录，项目根目录\n\n\n# getBaseDir()\n\n说明：获取 base目录，框架中electron目录路径。如果使用加密功能，打包后路径为 ./public/electron\n\n\n# getRootDir()\n\n说明：获取 root目录，APP在操作系统中的数据目录，根据环境变量而变化\n\n\n# getAppVersion()\n\n说明：获取 app version\n\n\n# getExecDir()\n\n说明：获取 exec目录，APP安装后，可执行程序（exe、dmg、dep）的根目录\n\n\n# getLogDir()\n\n说明：获取 日志目录\n\n\n# getAppUserDataDir()\n\n说明：获取 应用程序数据目录 (开发环境时，为项目根目录)\n\n\n# getStorageDir()\n\n说明：获取 数据库存储路径\n\n\n# getExtraResourcesDir()\n\n说明：获取 额外资源目录\n\n\n# getEeConfig()\n\n说明：获取 ee配置\n\n\n# getAddonConfig()\n\n说明：获取 插件配置\n\n\n# getMainServerConfig()\n\n说明：获取 mainServer配置\n\n\n# getHttpServerConfig()\n\n说明：获取 httpServer配置\n\n\n# getSocketServerConfig()\n\n说明：获取 socketServer配置\n\n\n# getPackage()\n\n说明：获取项目根目录package.json\n\n\n# chmodPath()\n\n说明：修改文件属性\n\n\n# mkdir()\n\n说明：创建目录\n\n\n# callFn()\n\n说明：执行一个函数",normalizedContent:"> ee-core：v2.0.3\n\n\n# 介绍\n\nutils库api 注：不建议使用，只是为了兼容旧版本，不再追加功能。\n\n\n# 使用方法\n\nconst { utils } = require('ee-core');\nconst utils = require('ee-core').utils;\n\n# 请使用新的utils模块\n\n\n\n# api列表\n\n\n# getenv()\n\n说明：获取 当前环境，local-本地，prod-生产环境\n\n\n# gethomedir()\n\n说明：获取 home目录，项目根目录\n\n\n# getbasedir()\n\n说明：获取 base目录，框架中electron目录路径。如果使用加密功能，打包后路径为 ./public/electron\n\n\n# getrootdir()\n\n说明：获取 root目录，app在操作系统中的数据目录，根据环境变量而变化\n\n\n# getappversion()\n\n说明：获取 app version\n\n\n# getexecdir()\n\n说明：获取 exec目录，app安装后，可执行程序（exe、dmg、dep）的根目录\n\n\n# getlogdir()\n\n说明：获取 日志目录\n\n\n# getappuserdatadir()\n\n说明：获取 应用程序数据目录 (开发环境时，为项目根目录)\n\n\n# getstoragedir()\n\n说明：获取 数据库存储路径\n\n\n# getextraresourcesdir()\n\n说明：获取 额外资源目录\n\n\n# geteeconfig()\n\n说明：获取 ee配置\n\n\n# getaddonconfig()\n\n说明：获取 插件配置\n\n\n# getmainserverconfig()\n\n说明：获取 mainserver配置\n\n\n# gethttpserverconfig()\n\n说明：获取 httpserver配置\n\n\n# getsocketserverconfig()\n\n说明：获取 socketserver配置\n\n\n# getpackage()\n\n说明：获取项目根目录package.json\n\n\n# chmodpath()\n\n说明：修改文件属性\n\n\n# mkdir()\n\n说明：创建目录\n\n\n# callfn()\n\n说明：执行一个函数",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"案例展示",frontmatter:{title:"案例展示",date:"2023-04-19T11:12:21.000Z",permalink:"/pages/eadf46/",article:!1},regularPath:"/04.%E5%85%B6%E5%AE%83/010.%E6%A1%88%E4%BE%8B.html",relativePath:"04.其它/010.案例.md",key:"v-a1619a84",path:"/pages/eadf46/",headers:[{level:3,title:"时音音乐",slug:"时音音乐",normalizedTitle:"时音音乐",charIndex:40},{level:3,title:"Northstar 盈富量化交易软件 - 官网",slug:"northstar-盈富量化交易软件-官网",normalizedTitle:"northstar 盈富量化交易软件 - 官网",charIndex:51},{level:3,title:"软通桥",slug:"软通桥",normalizedTitle:"软通桥",charIndex:81},{level:3,title:"Serendipity 英雄联盟对局助手",slug:"serendipity-英雄联盟对局助手",normalizedTitle:"serendipity 英雄联盟对局助手",charIndex:91},{level:3,title:"GitHub阅读器",slug:"github阅读器",normalizedTitle:"github阅读器",charIndex:118},{level:3,title:"小明云存储",slug:"小明云存储",normalizedTitle:"小明云存储",charIndex:134},{level:3,title:"GitLike",slug:"gitlike",normalizedTitle:"gitlike",charIndex:146},{level:3,title:"匿名 - CRM",slug:"匿名-crm",normalizedTitle:"匿名 - crm",charIndex:160},{level:3,title:"匿名",slug:"匿名",normalizedTitle:"匿名",charIndex:160},{level:3,title:"etc",slug:"etc",normalizedTitle:"etc",charIndex:184}],headersStr:"时音音乐 Northstar 盈富量化交易软件 - 官网 软通桥 Serendipity 英雄联盟对局助手 GitHub阅读器 小明云存储 GitLike 匿名 - CRM 匿名 etc",content:"# 案例展示\n\n如果你想展示项目，请联系我（qq：530353222）\n\n\n# 时音音乐\n\n\n\n\n# Northstar 盈富量化交易软件 - 官网\n\n\n\n\n# 软通桥\n\n\n\n\n# Serendipity 英雄联盟对局助手\n\n\n\n\n# GitHub阅读器\n\n\n\n\n# 小明云存储\n\n\n\n\n# GitLike\n\n\n\n\n# 匿名 - CRM\n\n\n\n\n# 匿名\n\n\n\n\n# etc\n\n\n\n更多...",normalizedContent:"# 案例展示\n\n如果你想展示项目，请联系我（qq：530353222）\n\n\n# 时音音乐\n\n\n\n\n# northstar 盈富量化交易软件 - 官网\n\n\n\n\n# 软通桥\n\n\n\n\n# serendipity 英雄联盟对局助手\n\n\n\n\n# github阅读器\n\n\n\n\n# 小明云存储\n\n\n\n\n# gitlike\n\n\n\n\n# 匿名 - crm\n\n\n\n\n# 匿名\n\n\n\n\n# etc\n\n\n\n更多...",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"交流",frontmatter:{title:"交流",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/c2720e/",article:!1},regularPath:"/04.%E5%85%B6%E5%AE%83/011.%E4%BA%A4%E6%B5%81.html",relativePath:"04.其它/011.交流.md",key:"v-fbfd6272",path:"/pages/c2720e/",headers:[{level:3,title:"issue",slug:"issue",normalizedTitle:"issue",charIndex:9},{level:3,title:"交流群",slug:"交流群",normalizedTitle:"交流群",charIndex:133},{level:3,title:"如何参与贡献",slug:"如何参与贡献",normalizedTitle:"如何参与贡献",charIndex:259},{level:3,title:"项目：ee-core",slug:"项目-ee-core",normalizedTitle:"项目：ee-core",charIndex:270},{level:3,title:"项目：electron-egg",slug:"项目-electron-egg",normalizedTitle:"项目：electron-egg",charIndex:379}],headersStr:"issue 交流群 如何参与贡献 项目：ee-core 项目：electron-egg",content:"# 交流\n\n\n# issue\n\n框架问题，优先issue\n\n * https://github.com/dromara/electron-egg/issues\n * https://gitee.com/dromara/electron-egg/issues\n\n\n# 交流群\n\n经常有用户私聊我，让再建个群，便于初学者交流（非开发者勿进）\n\n添加我微信进群（备注：electron-egg）\n\nqq群已满，请加微信群\n\n * qq群2：495444940 (已满)\n * qq群1：735532437 (已满)\n\n\n# 如何参与贡献\n\n\n# 项目：ee-core\n\n地址：https://github.com/wallace5303/ee-core\n\n主分支：main\n\n开发分支：dev_v2\n\nfock项目，然后在dev_v2分支开发，并提交PR\n\n\n# 项目：electron-egg\n\n地址：https://github.com/dromara/electron-egg\n\n主分支：main\n\n开发分支：dev_v3\n\nfock项目，然后在dev_v3分支开发，并提交PR",normalizedContent:"# 交流\n\n\n# issue\n\n框架问题，优先issue\n\n * https://github.com/dromara/electron-egg/issues\n * https://gitee.com/dromara/electron-egg/issues\n\n\n# 交流群\n\n经常有用户私聊我，让再建个群，便于初学者交流（非开发者勿进）\n\n添加我微信进群（备注：electron-egg）\n\nqq群已满，请加微信群\n\n * qq群2：495444940 (已满)\n * qq群1：735532437 (已满)\n\n\n# 如何参与贡献\n\n\n# 项目：ee-core\n\n地址：https://github.com/wallace5303/ee-core\n\n主分支：main\n\n开发分支：dev_v2\n\nfock项目，然后在dev_v2分支开发，并提交pr\n\n\n# 项目：electron-egg\n\n地址：https://github.com/dromara/electron-egg\n\n主分支：main\n\n开发分支：dev_v3\n\nfock项目，然后在dev_v3分支开发，并提交pr",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"nvm安装",frontmatter:{title:"nvm安装",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/1f0f51/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/010.nvm.html",relativePath:"05.知识点/010.nvm.md",key:"v-0f3afd48",path:"/pages/1f0f51/",headers:[{level:3,title:"下载并安装 nvm",slug:"下载并安装-nvm",normalizedTitle:"下载并安装 nvm",charIndex:24},{level:3,title:"用nvm安装node.js",slug:"用nvm安装node-js",normalizedTitle:"用nvm安装node.js",charIndex:75}],headersStr:"下载并安装 nvm 用nvm安装node.js",content:"nvm是一个nodejs的版本管理工具\n\n\n# 下载并安装 nvm\n\n * windows：下载地址\n * linux/macOS：下载地址\n\n\n# 用nvm安装node.js\n\n安装命令：\n\n# 安装node.js版本\nnvm install 14.16.0\n\n\n使用指定版本的node.js： nvm use 版本号\n\nnvm use 14.16.0\n\n\n使用淘宝node镜像：nvm node_mirror\n\nnvm node_mirror https://npmmirror.com/mirrors/node/\n\n\n使用淘宝npm镜像：nvm npm_mirror\n\nnvm npm_mirror https://npmmirror.com/mirrors/npm/\n",normalizedContent:"nvm是一个nodejs的版本管理工具\n\n\n# 下载并安装 nvm\n\n * windows：下载地址\n * linux/macos：下载地址\n\n\n# 用nvm安装node.js\n\n安装命令：\n\n# 安装node.js版本\nnvm install 14.16.0\n\n\n使用指定版本的node.js： nvm use 版本号\n\nnvm use 14.16.0\n\n\n使用淘宝node镜像：nvm node_mirror\n\nnvm node_mirror https://npmmirror.com/mirrors/node/\n\n\n使用淘宝npm镜像：nvm npm_mirror\n\nnvm npm_mirror https://npmmirror.com/mirrors/npm/\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"macOS安装Python",frontmatter:{title:"macOS安装Python",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/cecb5a/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/020.macos/010.%E5%AE%89%E8%A3%85python.html",relativePath:"05.知识点/020.macos/010.安装python.md",key:"v-7cc1ad8e",path:"/pages/cecb5a/",headersStr:null,content:"macOS高版本（12），移除了默认Python\n\n 1. brew安装\n\nbrew install python@3.8\n\n\n 2. 编辑 ~/.zshrc\n\nvim ~/.zshrc\n\n# python\nalias python='/usr/local/bin/python3'\nexport PATH=\"/usr/local/opt/python@3.8/libexec/bin:$PATH\"\n\n\n 3. 使修改生效\n\nsource ~/.zshrc\n",normalizedContent:"macos高版本（12），移除了默认python\n\n 1. brew安装\n\nbrew install python@3.8\n\n\n 2. 编辑 ~/.zshrc\n\nvim ~/.zshrc\n\n# python\nalias python='/usr/local/bin/python3'\nexport path=\"/usr/local/opt/python@3.8/libexec/bin:$path\"\n\n\n 3. 使修改生效\n\nsource ~/.zshrc\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"Mac显示资源库Library",frontmatter:{title:"Mac显示资源库Library",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/a6916d/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/020.macos/020.Mac%E6%98%BE%E7%A4%BALibrary%E5%BA%93.html",relativePath:"05.知识点/020.macos/020.Mac显示Library库.md",key:"v-59a78690",path:"/pages/a6916d/",headersStr:null,content:" 1. 打开访达，选择当前用户\n\n\n\n 2. 勾选如下图标\n\n",normalizedContent:" 1. 打开访达，选择当前用户\n\n\n\n 2. 勾选如下图标\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"ssl证书",frontmatter:{title:"ssl证书",date:"2023-04-24T14:55:18.000Z",permalink:"/pages/afbd71/"},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/030.https/010.ssl%E8%AF%81%E4%B9%A6.html",relativePath:"05.知识点/030.https/010.ssl证书.md",key:"v-ccf099a6",path:"/pages/afbd71/",headersStr:null,content:" 1. 下载证书生成工具：\n\n地址：https://github.com/FiloSottile/mkcert/releases\n\n 2. 打开cmd/PowerShell，进入mkcert软件所在目录\n 3. 安装\n\n\n\n 4. 生成证书\n\n\n\n 5. （可选）证书名字修改\n\n如： 将 .pem 后缀修改为.crt，-key.pem后缀修改为.key",normalizedContent:" 1. 下载证书生成工具：\n\n地址：https://github.com/filosottile/mkcert/releases\n\n 2. 打开cmd/powershell，进入mkcert软件所在目录\n 3. 安装\n\n\n\n 4. 生成证书\n\n\n\n 5. （可选）证书名字修改\n\n如： 将 .pem 后缀修改为.crt，-key.pem后缀修改为.key",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v1版本关系",frontmatter:{title:"v1版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/39b969/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/001.v1.html",relativePath:"05.知识点/040.版本关系/001.v1.md",key:"v-ae509a02",path:"/pages/39b969/",headersStr:null,content:"https://www.npmjs.com/package/electron-releases\n\nELECTRON        发布日期         NPM     是否预览版   MODULE 版本   NODE     CHROME          下载量\nv1.8.8          2018-08-22   1-8-x   no      57          8.2.1    59.0.3071.115   5144978\nv1.8.7          2018-05-16           no      57          8.2.1    59.0.3071.115   1109144\nv1.8.6          2018-04-27           no      57          8.2.1    59.0.3071.115   283722\nv1.8.5          2018-04-26           no      57          8.2.1    59.0.3071.115   22292\nv1.8.4          2018-03-16           no      57          8.2.1    59.0.3071.115   947429\nv1.8.3          2018-03-06           no      57          8.2.1    59.0.3071.115   416256\nv1.8.2          2018-02-07           no      57          8.2.1    59.0.3071.115   619754\nv1.8.2-beta.5   2018-01-31           yes     57          8.2.1    59.0.3071.115   153544\nv1.8.2-beta.4   2018-01-23           yes     57          8.2.1    59.0.3071.115   23088\nv1.8.2-beta.3   2017-12-04           yes     57          8.2.1    59.0.3071.115   39448\nv1.8.2-beta.2   2017-11-06           yes     57          8.2.1    59.0.3071.115   33543\nv1.8.2-beta.1   2017-10-19           yes     57          8.2.1    59.0.3071.115   20393\nv1.8.1          2017-09-29           yes     57          8.2.1    59.0.3071.115   378483\nv1.8.0          2017-12-12           yes     57          8.2.1    59.0.3071.115   1852244\nv1.7.16         2018-08-22   1-7-x   no      54          7.9.0    58.0.3029.110   268726\nv1.7.15         2018-05-16           no      54          7.9.0    58.0.3029.110   34189\nv1.7.14         2018-04-27           no      54          7.9.0    58.0.3029.110   19414\nv1.7.13         2018-03-15           no      54          7.9.0    58.0.3029.110   84186\nv1.7.12         2018-01-31           no      54          7.9.0    58.0.3029.110   321305\nv1.7.11         2018-01-23           no      54          7.9.0    58.0.3029.110   487135\nv1.7.10         2017-12-18           no      54          7.9.0    58.0.3029.110   886009\nv1.7.9          2017-10-11           no      54          7.9.0    58.0.3029.110   1330746\nv1.7.8          2017-09-24           no      54          7.9.0    58.0.3029.110   369943\nv1.7.7          2017-09-05           yes     54          7.9.0    58.0.3029.110   150481\nv1.7.6          2017-08-09           no      54          7.9.0    58.0.3029.110   452600\nv1.7.5          2017-07-17           no      54          7.9.0    58.0.3029.110   443748\nv1.7.4          2017-06-28           yes     54          7.9.0    58.0.3029.110   81815\nv1.7.3          2017-06-08           yes     54          7.9.0    58.0.3029.110   94074\nv1.7.2          2017-05-26           yes     54          7.9.0    58.0.3029.110   51208\nv1.7.1          2017-05-16           yes     54          7.9.0    58.0.3029.110   222045\nv1.7.0          2017-05-10           yes     54          7.9.0    58.0.3029.110   833506\nv1.6.18         2018-05-15           no      53          7.4.0    56.0.2924.87    57066\nv1.6.17         2018-01-31           no      53          7.4.0    56.0.2924.87    25788\nv1.6.16         2018-01-23           no      53          7.4.0    56.0.2924.87    29997\nv1.6.15         2017-10-11           no      53          7.4.0    56.0.2924.87    82169\nv1.6.14         2017-09-28           no      53          7.4.0    56.0.2924.87    30100\nv1.6.13         2017-09-06           yes     53          7.4.0    56.0.2924.87    45243\nv1.6.12         2017-09-06           yes     53          7.4.0    56.0.2924.87    49913\nv1.6.11         2017-05-25           no      53          7.4.0    56.0.2924.87    792808\nv1.6.10         2017-05-16           no      53          7.4.0    56.0.2924.87    274487\nv1.6.9          2017-05-10           no      53          7.4.0    56.0.2924.87    18760\nv1.6.8          2017-05-01           no      53          7.4.0    56.0.2924.87    154632\nv1.6.7          2017-04-18           no      53          7.4.0    56.0.2924.87    151281\nv1.6.6          2017-04-07           no      53          7.4.0    56.0.2924.87    343162\nv1.6.5          2017-03-31           no      53          7.4.0    56.0.2924.87    159558\nv1.6.4          2017-03-22           yes     53          7.4.0    56.0.2924.87    36897\nv1.6.3          2017-03-07           yes     53          7.4.0    56.0.2924.87    57894\nv1.6.2          2017-03-01           no      53          7.4.0    56.0.2924.87    619960\nv1.6.1          2017-02-21           no      53          7.4.0    56.0.2924.87    222201\nv1.6.0          2017-02-07           yes     53          7.4.0    56.0.2924.87    412409\nv1.5.1          2017-02-06           yes     51          7.4.0    54.0.2840.101   19025\nv1.5.0          2017-01-24           yes     51          7.4.0    54.0.2840.101   207842\nv1.4.16         2017-04-05           no      50          6.5.0    53.0.2785.143   252372\nv1.4.15         2017-01-19           no      50          6.5.0    53.0.2785.143   1289120\nv1.4.14         2017-01-10           no      50          6.5.0    53.0.2785.143   188219\nv1.4.13         2016-12-20           no      50          6.5.0    53.0.2785.143   1220466\nv1.4.12         2016-12-10           no      50          6.5.0    54.0.2840.51    122457\nv1.4.11         2016-12-07           no      50          6.5.0    53.0.2785.143   27565\nv1.4.10         2016-11-28           no      50          6.5.0    53.0.2785.143   97473\nv1.4.8          2016-11-22           no      50          6.5.0    53.0.2785.143   46792\nv1.4.7          2016-11-16           no      50          6.5.0    53.0.2785.143   50930\nv1.4.6          2016-11-09           no      50          6.5.0    53.0.2785.143   124714\nv1.4.5          2016-11-01           no      50          6.5.0    53.0.2785.113   62922\nv1.4.4          2016-10-20           no      50          6.5.0    53.0.2785.113   100314\nv1.4.3          2016-10-06           no      50          6.5.0    53.0.2785.113   140812\nv1.4.2          2016-09-30           no      50          6.5.0    53.0.2785.113   41539\nv1.4.1          2016-09-22           no      50          6.5.0    53.0.2785.113   63028\nv1.4.0          2016-09-15           no      50          6.5.0    53.0.2785.113   245693\nv1.3.15         2017-04-21           no      49          6.5.0    52.0.2743.82    19442\nv1.3.14         2017-03-14           no      49          6.5.0    52.0.2743.82    20925\nv1.3.13         2016-12-06           no      49          6.5.0    52.0.2743.82    29251\nv1.3.12         2016-11-28           no                                           2139\nv1.3.10         2016-11-22           no      49          6.5.0    52.0.2743.82    1976\nv1.3.9          2016-11-16           no      49          6.5.0    52.0.2743.82    54742\nv1.3.8          2016-10-20           no                                           35937\nv1.3.7          2016-09-27           no      49          6.5.0    52.0.2743.82    13379\nv1.3.6          2016-09-15           no      49          6.3.0    52.0.2743.82    39296\nv1.3.5          2016-09-02           no      49          6.3.0    52.0.2743.82    92634\nv1.3.4          2016-08-23           no      49          6.3.0    52.0.2743.82    110250\nv1.3.3          2016-08-10           no      49          6.3.0    52.0.2743.82    135645\nv1.3.2          2016-08-02           no      49          6.3.0    52.0.2743.82    77186\nv1.3.1          2016-07-27           no      49          6.3.0    52.0.2743.82    135598\nv1.3.0          2016-07-25           no      49          6.3.0    52.0.2743.82    133637\nv1.2.8          2016-07-21           no      48          6.1.0    51.0.2704.106   114312\nv1.2.7          2016-07-13           no      48          6.1.0    51.0.2704.106   69813\nv1.2.6          2016-07-06           no      48          6.1.0    51.0.2704.106   75778\nv1.2.5          2016-06-23           no      48          6.1.0    51.0.2704.103   78329\nv1.2.4          2016-06-22           no      48          6.1.0    51.0.2704.103   30621\nv1.2.3          2016-06-16           no      48          6.1.0    51.0.2704.84    54297\nv1.2.2          2016-06-08           no      48          6.1.0    51.0.2704.84    156789\nv1.2.1          2016-06-01           no      48          6.1.0    51.0.2704.63    65164\nv1.2.0          2016-05-26           no      48          6.1.0    51.0.2704.63    119853\nv1.1.3          2016-05-25           no      48          6.1.0    50.0.2661.102   76359\nv1.1.2          2016-05-24           no      48          6.1.0    50.0.2661.102   31758\nv1.1.1          2016-05-20           no      48          6.1.0    50.0.2661.102   74747\nv1.1.0          2016-05-14           no      48          6.1.0    50.0.2661.102   83786\nv1.0.2          2016-05-13           no      47          5.10.0   49.0.2623.75    50585\nv1.0.1          2016-05-11           no      47          5.10.0   49.0.2623.75    44593\nv1.0.0          2016-05-11           no      47          5.10.0   49.0.2623.75    154977",normalizedContent:"https://www.npmjs.com/package/electron-releases\n\nelectron        发布日期         npm     是否预览版   module 版本   node     chrome          下载量\nv1.8.8          2018-08-22   1-8-x   no      57          8.2.1    59.0.3071.115   5144978\nv1.8.7          2018-05-16           no      57          8.2.1    59.0.3071.115   1109144\nv1.8.6          2018-04-27           no      57          8.2.1    59.0.3071.115   283722\nv1.8.5          2018-04-26           no      57          8.2.1    59.0.3071.115   22292\nv1.8.4          2018-03-16           no      57          8.2.1    59.0.3071.115   947429\nv1.8.3          2018-03-06           no      57          8.2.1    59.0.3071.115   416256\nv1.8.2          2018-02-07           no      57          8.2.1    59.0.3071.115   619754\nv1.8.2-beta.5   2018-01-31           yes     57          8.2.1    59.0.3071.115   153544\nv1.8.2-beta.4   2018-01-23           yes     57          8.2.1    59.0.3071.115   23088\nv1.8.2-beta.3   2017-12-04           yes     57          8.2.1    59.0.3071.115   39448\nv1.8.2-beta.2   2017-11-06           yes     57          8.2.1    59.0.3071.115   33543\nv1.8.2-beta.1   2017-10-19           yes     57          8.2.1    59.0.3071.115   20393\nv1.8.1          2017-09-29           yes     57          8.2.1    59.0.3071.115   378483\nv1.8.0          2017-12-12           yes     57          8.2.1    59.0.3071.115   1852244\nv1.7.16         2018-08-22   1-7-x   no      54          7.9.0    58.0.3029.110   268726\nv1.7.15         2018-05-16           no      54          7.9.0    58.0.3029.110   34189\nv1.7.14         2018-04-27           no      54          7.9.0    58.0.3029.110   19414\nv1.7.13         2018-03-15           no      54          7.9.0    58.0.3029.110   84186\nv1.7.12         2018-01-31           no      54          7.9.0    58.0.3029.110   321305\nv1.7.11         2018-01-23           no      54          7.9.0    58.0.3029.110   487135\nv1.7.10         2017-12-18           no      54          7.9.0    58.0.3029.110   886009\nv1.7.9          2017-10-11           no      54          7.9.0    58.0.3029.110   1330746\nv1.7.8          2017-09-24           no      54          7.9.0    58.0.3029.110   369943\nv1.7.7          2017-09-05           yes     54          7.9.0    58.0.3029.110   150481\nv1.7.6          2017-08-09           no      54          7.9.0    58.0.3029.110   452600\nv1.7.5          2017-07-17           no      54          7.9.0    58.0.3029.110   443748\nv1.7.4          2017-06-28           yes     54          7.9.0    58.0.3029.110   81815\nv1.7.3          2017-06-08           yes     54          7.9.0    58.0.3029.110   94074\nv1.7.2          2017-05-26           yes     54          7.9.0    58.0.3029.110   51208\nv1.7.1          2017-05-16           yes     54          7.9.0    58.0.3029.110   222045\nv1.7.0          2017-05-10           yes     54          7.9.0    58.0.3029.110   833506\nv1.6.18         2018-05-15           no      53          7.4.0    56.0.2924.87    57066\nv1.6.17         2018-01-31           no      53          7.4.0    56.0.2924.87    25788\nv1.6.16         2018-01-23           no      53          7.4.0    56.0.2924.87    29997\nv1.6.15         2017-10-11           no      53          7.4.0    56.0.2924.87    82169\nv1.6.14         2017-09-28           no      53          7.4.0    56.0.2924.87    30100\nv1.6.13         2017-09-06           yes     53          7.4.0    56.0.2924.87    45243\nv1.6.12         2017-09-06           yes     53          7.4.0    56.0.2924.87    49913\nv1.6.11         2017-05-25           no      53          7.4.0    56.0.2924.87    792808\nv1.6.10         2017-05-16           no      53          7.4.0    56.0.2924.87    274487\nv1.6.9          2017-05-10           no      53          7.4.0    56.0.2924.87    18760\nv1.6.8          2017-05-01           no      53          7.4.0    56.0.2924.87    154632\nv1.6.7          2017-04-18           no      53          7.4.0    56.0.2924.87    151281\nv1.6.6          2017-04-07           no      53          7.4.0    56.0.2924.87    343162\nv1.6.5          2017-03-31           no      53          7.4.0    56.0.2924.87    159558\nv1.6.4          2017-03-22           yes     53          7.4.0    56.0.2924.87    36897\nv1.6.3          2017-03-07           yes     53          7.4.0    56.0.2924.87    57894\nv1.6.2          2017-03-01           no      53          7.4.0    56.0.2924.87    619960\nv1.6.1          2017-02-21           no      53          7.4.0    56.0.2924.87    222201\nv1.6.0          2017-02-07           yes     53          7.4.0    56.0.2924.87    412409\nv1.5.1          2017-02-06           yes     51          7.4.0    54.0.2840.101   19025\nv1.5.0          2017-01-24           yes     51          7.4.0    54.0.2840.101   207842\nv1.4.16         2017-04-05           no      50          6.5.0    53.0.2785.143   252372\nv1.4.15         2017-01-19           no      50          6.5.0    53.0.2785.143   1289120\nv1.4.14         2017-01-10           no      50          6.5.0    53.0.2785.143   188219\nv1.4.13         2016-12-20           no      50          6.5.0    53.0.2785.143   1220466\nv1.4.12         2016-12-10           no      50          6.5.0    54.0.2840.51    122457\nv1.4.11         2016-12-07           no      50          6.5.0    53.0.2785.143   27565\nv1.4.10         2016-11-28           no      50          6.5.0    53.0.2785.143   97473\nv1.4.8          2016-11-22           no      50          6.5.0    53.0.2785.143   46792\nv1.4.7          2016-11-16           no      50          6.5.0    53.0.2785.143   50930\nv1.4.6          2016-11-09           no      50          6.5.0    53.0.2785.143   124714\nv1.4.5          2016-11-01           no      50          6.5.0    53.0.2785.113   62922\nv1.4.4          2016-10-20           no      50          6.5.0    53.0.2785.113   100314\nv1.4.3          2016-10-06           no      50          6.5.0    53.0.2785.113   140812\nv1.4.2          2016-09-30           no      50          6.5.0    53.0.2785.113   41539\nv1.4.1          2016-09-22           no      50          6.5.0    53.0.2785.113   63028\nv1.4.0          2016-09-15           no      50          6.5.0    53.0.2785.113   245693\nv1.3.15         2017-04-21           no      49          6.5.0    52.0.2743.82    19442\nv1.3.14         2017-03-14           no      49          6.5.0    52.0.2743.82    20925\nv1.3.13         2016-12-06           no      49          6.5.0    52.0.2743.82    29251\nv1.3.12         2016-11-28           no                                           2139\nv1.3.10         2016-11-22           no      49          6.5.0    52.0.2743.82    1976\nv1.3.9          2016-11-16           no      49          6.5.0    52.0.2743.82    54742\nv1.3.8          2016-10-20           no                                           35937\nv1.3.7          2016-09-27           no      49          6.5.0    52.0.2743.82    13379\nv1.3.6          2016-09-15           no      49          6.3.0    52.0.2743.82    39296\nv1.3.5          2016-09-02           no      49          6.3.0    52.0.2743.82    92634\nv1.3.4          2016-08-23           no      49          6.3.0    52.0.2743.82    110250\nv1.3.3          2016-08-10           no      49          6.3.0    52.0.2743.82    135645\nv1.3.2          2016-08-02           no      49          6.3.0    52.0.2743.82    77186\nv1.3.1          2016-07-27           no      49          6.3.0    52.0.2743.82    135598\nv1.3.0          2016-07-25           no      49          6.3.0    52.0.2743.82    133637\nv1.2.8          2016-07-21           no      48          6.1.0    51.0.2704.106   114312\nv1.2.7          2016-07-13           no      48          6.1.0    51.0.2704.106   69813\nv1.2.6          2016-07-06           no      48          6.1.0    51.0.2704.106   75778\nv1.2.5          2016-06-23           no      48          6.1.0    51.0.2704.103   78329\nv1.2.4          2016-06-22           no      48          6.1.0    51.0.2704.103   30621\nv1.2.3          2016-06-16           no      48          6.1.0    51.0.2704.84    54297\nv1.2.2          2016-06-08           no      48          6.1.0    51.0.2704.84    156789\nv1.2.1          2016-06-01           no      48          6.1.0    51.0.2704.63    65164\nv1.2.0          2016-05-26           no      48          6.1.0    51.0.2704.63    119853\nv1.1.3          2016-05-25           no      48          6.1.0    50.0.2661.102   76359\nv1.1.2          2016-05-24           no      48          6.1.0    50.0.2661.102   31758\nv1.1.1          2016-05-20           no      48          6.1.0    50.0.2661.102   74747\nv1.1.0          2016-05-14           no      48          6.1.0    50.0.2661.102   83786\nv1.0.2          2016-05-13           no      47          5.10.0   49.0.2623.75    50585\nv1.0.1          2016-05-11           no      47          5.10.0   49.0.2623.75    44593\nv1.0.0          2016-05-11           no      47          5.10.0   49.0.2623.75    154977",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v2版本关系",frontmatter:{title:"v2版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/52ba2e/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/002.v2.html",relativePath:"05.知识点/040.版本关系/002.v2.md",key:"v-67569a3f",path:"/pages/52ba2e/",headersStr:null,content:"ELECTRON                      发布日期         NPM           是否预览版   MODULE 版本   NODE    CHROME          下载量\nv2.1.0-unsupported.20180809   2018-08-09   unsupported   no      57          8.9.3   61.0.3163.100   8793\nv2.0.18                       2019-03-08   2-0-x         no      57          8.9.3   61.0.3163.100   2071728\nv2.0.17                       2019-01-31                 no      57          8.9.3   61.0.3163.100   110234\nv2.0.16                       2018-12-18                 no      57          8.9.3   61.0.3163.100   203154\nv2.0.15                       2018-12-13                 no      57          8.9.3   61.0.3163.100   17234\nv2.0.14                       2018-11-19                 no      57          8.9.3   61.0.3163.100   122998\nv2.0.13                       2018-11-01                 no      57          8.9.3   61.0.3163.100   118508\nv2.0.12                       2018-10-19                 no      57          8.9.3   61.0.3163.100   154680\nv2.0.11                       2018-10-01                 no      57          8.9.3   61.0.3163.100   107592\nv2.0.10                       2018-09-19                 no      57          8.9.3   61.0.3163.100   102706\nv2.0.9                        2018-09-10                 no      57          8.9.3   61.0.3163.100   304079\nv2.0.8                        2018-08-22                 no      57          8.9.3   61.0.3163.100   934820\nv2.0.7                        2018-08-08                 no      57          8.9.3   61.0.3163.100   230476\nv2.0.6                        2018-08-01                 no      57          8.9.3   61.0.3163.100   195440\nv2.0.5                        2018-07-13                 no      57          8.9.3   61.0.3163.100   280444\nv2.0.4                        2018-07-03                 no      57          8.9.3   61.0.3163.100   177521\nv2.0.3                        2018-06-21                 no      57          8.9.3   61.0.3163.100   146305\nv2.0.2                        2018-05-22                 no      57          8.9.3   61.0.3163.100   484349\nv2.0.1                        2018-05-16                 no      57          8.9.3   61.0.3163.100   128466\nv2.0.0                        2018-05-01                 no      57          8.9.3   61.0.3163.100   743275",normalizedContent:"electron                      发布日期         npm           是否预览版   module 版本   node    chrome          下载量\nv2.1.0-unsupported.20180809   2018-08-09   unsupported   no      57          8.9.3   61.0.3163.100   8793\nv2.0.18                       2019-03-08   2-0-x         no      57          8.9.3   61.0.3163.100   2071728\nv2.0.17                       2019-01-31                 no      57          8.9.3   61.0.3163.100   110234\nv2.0.16                       2018-12-18                 no      57          8.9.3   61.0.3163.100   203154\nv2.0.15                       2018-12-13                 no      57          8.9.3   61.0.3163.100   17234\nv2.0.14                       2018-11-19                 no      57          8.9.3   61.0.3163.100   122998\nv2.0.13                       2018-11-01                 no      57          8.9.3   61.0.3163.100   118508\nv2.0.12                       2018-10-19                 no      57          8.9.3   61.0.3163.100   154680\nv2.0.11                       2018-10-01                 no      57          8.9.3   61.0.3163.100   107592\nv2.0.10                       2018-09-19                 no      57          8.9.3   61.0.3163.100   102706\nv2.0.9                        2018-09-10                 no      57          8.9.3   61.0.3163.100   304079\nv2.0.8                        2018-08-22                 no      57          8.9.3   61.0.3163.100   934820\nv2.0.7                        2018-08-08                 no      57          8.9.3   61.0.3163.100   230476\nv2.0.6                        2018-08-01                 no      57          8.9.3   61.0.3163.100   195440\nv2.0.5                        2018-07-13                 no      57          8.9.3   61.0.3163.100   280444\nv2.0.4                        2018-07-03                 no      57          8.9.3   61.0.3163.100   177521\nv2.0.3                        2018-06-21                 no      57          8.9.3   61.0.3163.100   146305\nv2.0.2                        2018-05-22                 no      57          8.9.3   61.0.3163.100   484349\nv2.0.1                        2018-05-16                 no      57          8.9.3   61.0.3163.100   128466\nv2.0.0                        2018-05-01                 no      57          8.9.3   61.0.3163.100   743275",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v3版本关系",frontmatter:{title:"v3版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/8e1938/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/003.v3.html",relativePath:"05.知识点/040.版本关系/003.v3.md",key:"v-25d5817f",path:"/pages/8e1938/",headersStr:null,content:"ELECTRON   发布日期         NPM     是否预览版   MODULE 版本   NODE     CHROME          下载量\nv3.1.13    2019-07-31           no      64          10.2.0   66.0.3359.181   479339\nv3.1.12    2019-07-11   3-1-x   no      64          10.2.0   66.0.3359.181   47980\nv3.1.11    2019-06-06           no      64          10.2.0   66.0.3359.181   58972\nv3.1.10    2019-05-29           no      64          10.2.0   66.0.3359.181   48225\nv3.1.9     2019-05-01           no      64          10.2.0   66.0.3359.181   162383\nv3.1.8     2019-03-28           no      64          10.2.0   66.0.3359.181   158477\nv3.1.7     2019-03-21           no      64          10.2.0   66.0.3359.181   85544\nv3.1.6     2019-03-08           no      64          10.2.0   66.0.3359.181   119562\nv3.1.5     2019-03-04           no      64          10.2.0   66.0.3359.181   12249\nv3.1.4     2019-02-15           no      64          10.2.0   66.0.3359.181   43013\nv3.1.3     2019-01-31           no      64          10.2.0   66.0.3359.181   217780\nv3.1.2     2019-01-24           no      64          10.2.0   66.0.3359.181   33935\nv3.1.1     2019-01-14           no      64          10.2.0   66.0.3359.181   63177\nv3.1.0     2019-01-07           no      64          10.2.0   66.0.3359.181   54171\nv3.0.16    2019-03-08   3-0-x   no      64          10.2.0   66.0.3359.181   34506\nv3.0.15    2019-01-31           no      64          10.2.0   66.0.3359.181   9315\nv3.0.14    2019-01-04           no      64          10.2.0   66.0.3359.181   37890\nv3.0.13    2018-12-17           no      64          10.2.0   66.0.3359.181   227021\nv3.0.12    2018-12-14           no      64          10.2.0   66.0.3359.181   31748\nv3.0.11    2018-12-11           no      64          10.2.0   66.0.3359.181   105479\nv3.0.10    2018-11-19           no      64          10.2.0   66.0.3359.181   366660\nv3.0.9     2018-11-13           no      64          10.2.0   66.0.3359.181   175503\nv3.0.8     2018-11-05           no      64          10.2.0   66.0.3359.181   128916\nv3.0.7     2018-11-01           no      64          10.2.0   66.0.3359.181   129260\nv3.0.6     2018-10-24           no      64          10.2.0   66.0.3359.181   109253\nv3.0.5     2018-10-19           no      64          10.2.0   66.0.3359.181   96299\nv3.0.4     2018-10-11           no      64          10.2.0   66.0.3359.181   123203\nv3.0.3     2018-10-07           no      64          10.2.0   66.0.3359.181   75862\nv3.0.2     2018-09-27           no      64          10.2.0   66.0.3359.181   124228\nv3.0.1     2018-09-27           no      64          10.2.0   66.0.3359.181   16506\nv3.0.0     2018-09-18           no      64          10.2.0   66.0.3359.181   1500095",normalizedContent:"electron   发布日期         npm     是否预览版   module 版本   node     chrome          下载量\nv3.1.13    2019-07-31           no      64          10.2.0   66.0.3359.181   479339\nv3.1.12    2019-07-11   3-1-x   no      64          10.2.0   66.0.3359.181   47980\nv3.1.11    2019-06-06           no      64          10.2.0   66.0.3359.181   58972\nv3.1.10    2019-05-29           no      64          10.2.0   66.0.3359.181   48225\nv3.1.9     2019-05-01           no      64          10.2.0   66.0.3359.181   162383\nv3.1.8     2019-03-28           no      64          10.2.0   66.0.3359.181   158477\nv3.1.7     2019-03-21           no      64          10.2.0   66.0.3359.181   85544\nv3.1.6     2019-03-08           no      64          10.2.0   66.0.3359.181   119562\nv3.1.5     2019-03-04           no      64          10.2.0   66.0.3359.181   12249\nv3.1.4     2019-02-15           no      64          10.2.0   66.0.3359.181   43013\nv3.1.3     2019-01-31           no      64          10.2.0   66.0.3359.181   217780\nv3.1.2     2019-01-24           no      64          10.2.0   66.0.3359.181   33935\nv3.1.1     2019-01-14           no      64          10.2.0   66.0.3359.181   63177\nv3.1.0     2019-01-07           no      64          10.2.0   66.0.3359.181   54171\nv3.0.16    2019-03-08   3-0-x   no      64          10.2.0   66.0.3359.181   34506\nv3.0.15    2019-01-31           no      64          10.2.0   66.0.3359.181   9315\nv3.0.14    2019-01-04           no      64          10.2.0   66.0.3359.181   37890\nv3.0.13    2018-12-17           no      64          10.2.0   66.0.3359.181   227021\nv3.0.12    2018-12-14           no      64          10.2.0   66.0.3359.181   31748\nv3.0.11    2018-12-11           no      64          10.2.0   66.0.3359.181   105479\nv3.0.10    2018-11-19           no      64          10.2.0   66.0.3359.181   366660\nv3.0.9     2018-11-13           no      64          10.2.0   66.0.3359.181   175503\nv3.0.8     2018-11-05           no      64          10.2.0   66.0.3359.181   128916\nv3.0.7     2018-11-01           no      64          10.2.0   66.0.3359.181   129260\nv3.0.6     2018-10-24           no      64          10.2.0   66.0.3359.181   109253\nv3.0.5     2018-10-19           no      64          10.2.0   66.0.3359.181   96299\nv3.0.4     2018-10-11           no      64          10.2.0   66.0.3359.181   123203\nv3.0.3     2018-10-07           no      64          10.2.0   66.0.3359.181   75862\nv3.0.2     2018-09-27           no      64          10.2.0   66.0.3359.181   124228\nv3.0.1     2018-09-27           no      64          10.2.0   66.0.3359.181   16506\nv3.0.0     2018-09-18           no      64          10.2.0   66.0.3359.181   1500095",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v4版本关系",frontmatter:{title:"v4版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/4c62ae/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/004.v4.html",relativePath:"05.知识点/040.版本关系/004.v4.md",key:"v-37572e82",path:"/pages/4c62ae/",headersStr:null,content:"ELECTRON   发布日期         NPM     是否预览版   MODULE 版本   NODE      CHROME          下载量\nv4.2.12    2019-10-16   4-2-x   no      69          10.11.0   69.0.3497.128   751124\nv4.2.11    2019-09-24           no      69          10.11.0   69.0.3497.128   81349\nv4.2.10    2019-08-29           no      69          10.11.0   69.0.3497.128   97467\nv4.2.9     2019-08-06           no      69          10.11.0   69.0.3497.128   100254\nv4.2.8     2019-07-20           no      69          10.11.0   69.0.3497.128   71977\nv4.2.7     2019-07-16           no      69          10.11.0   69.0.3497.128   37422\nv4.2.6     2019-07-02           no      69          10.11.0   69.0.3497.128   88262\nv4.2.5     2019-06-21           no      69          10.11.0   69.0.3497.128   78473\nv4.2.4     2019-06-05           no      69          10.11.0   69.0.3497.128   118239\nv4.2.3     2019-05-31           no      69          10.11.0   69.0.3497.128   63738\nv4.2.2     2019-05-17           no      69          10.11.0   69.0.3497.128   90544\nv4.2.1     2019-05-14           no      69          10.11.0   69.0.3497.128   32683\nv4.2.0     2019-05-03           no      69          10.11.0   69.0.3497.128   249134\nv4.1.5     2019-04-24   4-1-x   no      69          10.11.0   69.0.3497.128   76084\nv4.1.4     2019-04-04           no      69          10.11.0   69.0.3497.128   442468\nv4.1.3     2019-03-29           no      69          10.11.0   69.0.3497.128   129024\nv4.1.2     2019-03-28           no      69          10.11.0   69.0.3497.128   18146\nv4.1.1     2019-03-20           no      69          10.11.0   69.0.3497.128   139828\nv4.1.0     2019-03-14           no      69          10.11.0   69.0.3497.128   156190\nv4.0.8     2019-03-08   4-0-x   no      69          10.11.0   69.0.3497.128   102800\nv4.0.7     2019-03-05           no      69          10.11.0   69.0.3497.128   87541\nv4.0.6     2019-02-27           no      69          10.11.0   69.0.3497.106   111585\nv4.0.5     2019-02-15           no      69          10.11.0   69.0.3497.106   165784\nv4.0.4     2019-02-02           no      69          10.11.0   69.0.3497.106   447516\nv4.0.3     2019-01-29           no      64          10.11.0   69.0.3497.106   83986\nv4.0.2     2019-01-22           no      64          10.11.0   69.0.3497.106   119086\nv4.0.1     2019-01-04           no      64          10.11.0   69.0.3497.106   356150\nv4.0.0     2018-12-20           no      64          10.11.0   69.0.3497.106   600264",normalizedContent:"electron   发布日期         npm     是否预览版   module 版本   node      chrome          下载量\nv4.2.12    2019-10-16   4-2-x   no      69          10.11.0   69.0.3497.128   751124\nv4.2.11    2019-09-24           no      69          10.11.0   69.0.3497.128   81349\nv4.2.10    2019-08-29           no      69          10.11.0   69.0.3497.128   97467\nv4.2.9     2019-08-06           no      69          10.11.0   69.0.3497.128   100254\nv4.2.8     2019-07-20           no      69          10.11.0   69.0.3497.128   71977\nv4.2.7     2019-07-16           no      69          10.11.0   69.0.3497.128   37422\nv4.2.6     2019-07-02           no      69          10.11.0   69.0.3497.128   88262\nv4.2.5     2019-06-21           no      69          10.11.0   69.0.3497.128   78473\nv4.2.4     2019-06-05           no      69          10.11.0   69.0.3497.128   118239\nv4.2.3     2019-05-31           no      69          10.11.0   69.0.3497.128   63738\nv4.2.2     2019-05-17           no      69          10.11.0   69.0.3497.128   90544\nv4.2.1     2019-05-14           no      69          10.11.0   69.0.3497.128   32683\nv4.2.0     2019-05-03           no      69          10.11.0   69.0.3497.128   249134\nv4.1.5     2019-04-24   4-1-x   no      69          10.11.0   69.0.3497.128   76084\nv4.1.4     2019-04-04           no      69          10.11.0   69.0.3497.128   442468\nv4.1.3     2019-03-29           no      69          10.11.0   69.0.3497.128   129024\nv4.1.2     2019-03-28           no      69          10.11.0   69.0.3497.128   18146\nv4.1.1     2019-03-20           no      69          10.11.0   69.0.3497.128   139828\nv4.1.0     2019-03-14           no      69          10.11.0   69.0.3497.128   156190\nv4.0.8     2019-03-08   4-0-x   no      69          10.11.0   69.0.3497.128   102800\nv4.0.7     2019-03-05           no      69          10.11.0   69.0.3497.128   87541\nv4.0.6     2019-02-27           no      69          10.11.0   69.0.3497.106   111585\nv4.0.5     2019-02-15           no      69          10.11.0   69.0.3497.106   165784\nv4.0.4     2019-02-02           no      69          10.11.0   69.0.3497.106   447516\nv4.0.3     2019-01-29           no      64          10.11.0   69.0.3497.106   83986\nv4.0.2     2019-01-22           no      64          10.11.0   69.0.3497.106   119086\nv4.0.1     2019-01-04           no      64          10.11.0   69.0.3497.106   356150\nv4.0.0     2018-12-20           no      64          10.11.0   69.0.3497.106   600264",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v5版本关系",frontmatter:{title:"v5版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/9ad977/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/005.v5.html",relativePath:"05.知识点/040.版本关系/005.v5.md",key:"v-ba596002",path:"/pages/9ad977/",headersStr:null,content:"ELECTRON   发布日期         NPM     是否预览版   MODULE 版本   NODE     CHROME          下载量\nv5.0.13    2019-12-17   5-0-x   no      70          12.0.0   73.0.3683.121   937880\nv5.0.12    2019-11-02           no      70          12.0.0   73.0.3683.121   180846\nv5.0.11    2019-09-24           no      70          12.0.0   73.0.3683.121   132151\nv5.0.10    2019-08-20           no      70          12.0.0   73.0.3683.121   220924\nv5.0.9     2019-08-06           no      70          12.0.0   73.0.3683.121   232477\nv5.0.8     2019-07-23           no      70          12.0.0   73.0.3683.121   199395\nv5.0.7     2019-07-16           no      70          12.0.0   73.0.3683.121   154371\nv5.0.6     2019-06-26           no      70          12.0.0   73.0.3683.121   335802\nv5.0.5     2019-06-21           no      70          12.0.0   73.0.3683.121   131364\nv5.0.4     2019-06-15           no      70          12.0.0   73.0.3683.121   148572\nv5.0.3     2019-06-07           no      70          12.0.0   73.0.3683.121   96548\nv5.0.2     2019-05-23           no      70          12.0.0   73.0.3683.121   216954\nv5.0.1     2019-05-04           no      70          12.0.0   73.0.3683.121   882575\nv5.0.0     2019-04-24           no      70          12.0.0   73.0.3683.119   204573",normalizedContent:"electron   发布日期         npm     是否预览版   module 版本   node     chrome          下载量\nv5.0.13    2019-12-17   5-0-x   no      70          12.0.0   73.0.3683.121   937880\nv5.0.12    2019-11-02           no      70          12.0.0   73.0.3683.121   180846\nv5.0.11    2019-09-24           no      70          12.0.0   73.0.3683.121   132151\nv5.0.10    2019-08-20           no      70          12.0.0   73.0.3683.121   220924\nv5.0.9     2019-08-06           no      70          12.0.0   73.0.3683.121   232477\nv5.0.8     2019-07-23           no      70          12.0.0   73.0.3683.121   199395\nv5.0.7     2019-07-16           no      70          12.0.0   73.0.3683.121   154371\nv5.0.6     2019-06-26           no      70          12.0.0   73.0.3683.121   335802\nv5.0.5     2019-06-21           no      70          12.0.0   73.0.3683.121   131364\nv5.0.4     2019-06-15           no      70          12.0.0   73.0.3683.121   148572\nv5.0.3     2019-06-07           no      70          12.0.0   73.0.3683.121   96548\nv5.0.2     2019-05-23           no      70          12.0.0   73.0.3683.121   216954\nv5.0.1     2019-05-04           no      70          12.0.0   73.0.3683.121   882575\nv5.0.0     2019-04-24           no      70          12.0.0   73.0.3683.119   204573",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v6版本关系",frontmatter:{title:"v6版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/b5bb02/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/006.v6.html",relativePath:"05.知识点/040.版本关系/006.v6.md",key:"v-6152373f",path:"/pages/b5bb02/",headersStr:null,content:"ELECTRON   发布日期         NPM     是否预览版   MODULE 版本   NODE     CHROME          下载量\nv6.1.12    2020-05-18   6-1-x   no      73          12.4.0   76.0.3809.146   492902\nv6.1.11    2020-05-05           no      73          12.4.0   76.0.3809.146   46822\nv6.1.10    2020-04-14           no      73          12.4.0   76.0.3809.146   78022\nv6.1.9     2020-02-28           no      73          12.4.0   76.0.3809.146   90683\nv6.1.8     2020-02-21           no      73          12.4.0   76.0.3809.146   13833\nv6.1.7     2019-12-17           no      73          12.4.0   76.0.3809.146   350367\nv6.1.6     2019-12-11           no      73          12.4.0   76.0.3809.146   136083\nv6.1.5     2019-11-21           no      73          12.4.0   76.0.3809.146   152076\nv6.1.4     2019-11-05           no      73          12.4.0   76.0.3809.146   284126\nv6.1.3     2019-11-01           no      73          12.4.0   76.0.3809.146   18065\nv6.1.2     2019-10-24           no      73          12.4.0   76.0.3809.146   77941\nv6.1.1     2019-10-23           no      73          12.4.0   76.0.3809.146   23132\nv6.1.0     2019-10-22           no      73          12.4.0   76.0.3809.146   16050\nv6.0.12    2019-10-08   6-0-x   no      73          12.4.0   76.0.3809.146   289240\nv6.0.11    2019-10-02           no      73          12.4.0   76.0.3809.146   147037\nv6.0.10    2019-09-19           no      73          12.4.0   76.0.3809.146   378096\nv6.0.9     2019-09-12           no      73          12.4.0   76.0.3809.146   119824\nv6.0.8     2019-09-09           no      73          12.4.0   76.0.3809.146   82841\nv6.0.7     2019-08-31           no      73          12.4.0   76.0.3809.139   230335\nv6.0.6     2019-08-30           no      73          12.4.0   76.0.3809.138   16010\nv6.0.5     2019-08-27           no      73          12.4.0   76.0.3809.136   97971\nv6.0.4     2019-08-24           no      73          12.4.0   76.0.3809.131   42757\nv6.0.3     2019-08-20           no      73          12.4.0   76.0.3809.126   66120\nv6.0.2     2019-08-12           no      73          12.4.0   76.0.3809.110   87293\nv6.0.1     2019-08-07           no      73          12.4.0   76.0.3809.102   89034\nv6.0.0     2019-07-29           no      73          12.4.0   76.0.3809.88    536317",normalizedContent:"electron   发布日期         npm     是否预览版   module 版本   node     chrome          下载量\nv6.1.12    2020-05-18   6-1-x   no      73          12.4.0   76.0.3809.146   492902\nv6.1.11    2020-05-05           no      73          12.4.0   76.0.3809.146   46822\nv6.1.10    2020-04-14           no      73          12.4.0   76.0.3809.146   78022\nv6.1.9     2020-02-28           no      73          12.4.0   76.0.3809.146   90683\nv6.1.8     2020-02-21           no      73          12.4.0   76.0.3809.146   13833\nv6.1.7     2019-12-17           no      73          12.4.0   76.0.3809.146   350367\nv6.1.6     2019-12-11           no      73          12.4.0   76.0.3809.146   136083\nv6.1.5     2019-11-21           no      73          12.4.0   76.0.3809.146   152076\nv6.1.4     2019-11-05           no      73          12.4.0   76.0.3809.146   284126\nv6.1.3     2019-11-01           no      73          12.4.0   76.0.3809.146   18065\nv6.1.2     2019-10-24           no      73          12.4.0   76.0.3809.146   77941\nv6.1.1     2019-10-23           no      73          12.4.0   76.0.3809.146   23132\nv6.1.0     2019-10-22           no      73          12.4.0   76.0.3809.146   16050\nv6.0.12    2019-10-08   6-0-x   no      73          12.4.0   76.0.3809.146   289240\nv6.0.11    2019-10-02           no      73          12.4.0   76.0.3809.146   147037\nv6.0.10    2019-09-19           no      73          12.4.0   76.0.3809.146   378096\nv6.0.9     2019-09-12           no      73          12.4.0   76.0.3809.146   119824\nv6.0.8     2019-09-09           no      73          12.4.0   76.0.3809.146   82841\nv6.0.7     2019-08-31           no      73          12.4.0   76.0.3809.139   230335\nv6.0.6     2019-08-30           no      73          12.4.0   76.0.3809.138   16010\nv6.0.5     2019-08-27           no      73          12.4.0   76.0.3809.136   97971\nv6.0.4     2019-08-24           no      73          12.4.0   76.0.3809.131   42757\nv6.0.3     2019-08-20           no      73          12.4.0   76.0.3809.126   66120\nv6.0.2     2019-08-12           no      73          12.4.0   76.0.3809.110   87293\nv6.0.1     2019-08-07           no      73          12.4.0   76.0.3809.102   89034\nv6.0.0     2019-07-29           no      73          12.4.0   76.0.3809.88    536317",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v7版本关系",frontmatter:{title:"v7版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/81c439/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/007.v7.html",relativePath:"05.知识点/040.版本关系/007.v7.md",key:"v-1fd11e7f",path:"/pages/81c439/",headersStr:null,content:"ELECTRON   发布日期         NPM     是否预览版   MODULE 版本   NODE     CHROME          下载量\nv7.3.3     2020-08-25   7-3-x   no      75          12.8.1   78.0.3904.130   683693\nv7.3.2     2020-06-24           no      75          12.8.1   78.0.3904.130   289296\nv7.3.1     2020-06-01           no      75          12.8.1   78.0.3904.130   84486\nv7.3.0     2020-05-15           no      75          12.8.1   78.0.3904.130   65172\nv7.2.4     2020-04-29   7-2-x   no      75          12.8.1   78.0.3904.130   187570\nv7.2.3     2020-04-17           no      75          12.8.1   78.0.3904.130   45344\nv7.2.2     2020-04-14           no      75          12.8.1   78.0.3904.130   25043\nv7.2.1     2020-03-24           no      75          12.8.1   78.0.3904.130   213653\nv7.2.0     2020-03-23           no      75          12.8.1   78.0.3904.130   4252\nv7.1.14    2020-02-28   7-1-x   no      75          12.8.1   78.0.3904.130   253256\nv7.1.13    2020-02-20           no      75          12.8.1   78.0.3904.130   117268\nv7.1.12    2020-02-10           no      75          12.8.1   78.0.3904.130   95631\nv7.1.11    2020-01-30           no      75          12.8.1   78.0.3904.130   377769\nv7.1.10    2020-01-22           no      75          12.8.1   78.0.3904.130   218418\nv7.1.9     2020-01-13           no      75          12.8.1   78.0.3904.130   225819\nv7.1.8     2020-01-08           no      75          12.8.1   78.0.3904.130   116559\nv7.1.7     2019-12-19           no      75          12.8.1   78.0.3904.130   452838\nv7.1.6     2019-12-18           no      75          12.8.1   78.0.3904.130   72941\nv7.1.5     2019-12-13           no      75          12.8.1   78.0.3904.130   102043\nv7.1.4     2019-12-10           no      75          12.8.1   78.0.3904.130   148264\nv7.1.3     2019-12-03           no      75          12.8.1   78.0.3904.126   170671\nv7.1.2     2019-11-20           no      75          12.8.1   78.0.3904.113   356977\nv7.1.1     2019-11-07           no      75          12.8.1   78.0.3904.99    257634\nv7.1.0     2019-11-05           no      75          12.8.1   78.0.3904.94    99522\nv7.0.1     2019-11-01   7-0-x   no      75          12.8.1   78.0.3904.92    120621\nv7.0.0     2019-10-21           no      75          12.8.1   78.0.3905.1     879538",normalizedContent:"electron   发布日期         npm     是否预览版   module 版本   node     chrome          下载量\nv7.3.3     2020-08-25   7-3-x   no      75          12.8.1   78.0.3904.130   683693\nv7.3.2     2020-06-24           no      75          12.8.1   78.0.3904.130   289296\nv7.3.1     2020-06-01           no      75          12.8.1   78.0.3904.130   84486\nv7.3.0     2020-05-15           no      75          12.8.1   78.0.3904.130   65172\nv7.2.4     2020-04-29   7-2-x   no      75          12.8.1   78.0.3904.130   187570\nv7.2.3     2020-04-17           no      75          12.8.1   78.0.3904.130   45344\nv7.2.2     2020-04-14           no      75          12.8.1   78.0.3904.130   25043\nv7.2.1     2020-03-24           no      75          12.8.1   78.0.3904.130   213653\nv7.2.0     2020-03-23           no      75          12.8.1   78.0.3904.130   4252\nv7.1.14    2020-02-28   7-1-x   no      75          12.8.1   78.0.3904.130   253256\nv7.1.13    2020-02-20           no      75          12.8.1   78.0.3904.130   117268\nv7.1.12    2020-02-10           no      75          12.8.1   78.0.3904.130   95631\nv7.1.11    2020-01-30           no      75          12.8.1   78.0.3904.130   377769\nv7.1.10    2020-01-22           no      75          12.8.1   78.0.3904.130   218418\nv7.1.9     2020-01-13           no      75          12.8.1   78.0.3904.130   225819\nv7.1.8     2020-01-08           no      75          12.8.1   78.0.3904.130   116559\nv7.1.7     2019-12-19           no      75          12.8.1   78.0.3904.130   452838\nv7.1.6     2019-12-18           no      75          12.8.1   78.0.3904.130   72941\nv7.1.5     2019-12-13           no      75          12.8.1   78.0.3904.130   102043\nv7.1.4     2019-12-10           no      75          12.8.1   78.0.3904.130   148264\nv7.1.3     2019-12-03           no      75          12.8.1   78.0.3904.126   170671\nv7.1.2     2019-11-20           no      75          12.8.1   78.0.3904.113   356977\nv7.1.1     2019-11-07           no      75          12.8.1   78.0.3904.99    257634\nv7.1.0     2019-11-05           no      75          12.8.1   78.0.3904.94    99522\nv7.0.1     2019-11-01   7-0-x   no      75          12.8.1   78.0.3904.92    120621\nv7.0.0     2019-10-21           no      75          12.8.1   78.0.3905.1     879538",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v8版本关系",frontmatter:{title:"v8版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/a96045/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/008.v8.html",relativePath:"05.知识点/040.版本关系/008.v8.md",key:"v-435ff482",path:"/pages/a96045/",headersStr:null,content:"ELECTRON   发布日期         NPM     是否预览版   MODULE 版本   NODE      CHROME          下载量\nv8.5.5     2020-11-18   8-x-y   no      76          12.13.0   80.0.3987.163   513148\nv8.5.4     2020-11-17           no      76          12.13.0   80.0.3987.163   17318\nv8.5.3     2020-10-30           no      76          12.13.0   80.0.3987.163   85351\nv8.5.2     2020-09-22           no      76          12.13.0   80.0.3987.165   304770\nv8.5.1     2020-09-03           no      76          12.13.0   80.0.3987.165   76797\nv8.5.0     2020-08-07           no      76          12.13.0   80.0.3987.165   120066\nv8.4.1     2020-07-23           no      76          12.13.0   80.0.3987.165   140906\nv8.4.0     2020-07-07           no      76          12.13.0   80.0.3987.165   78133\nv8.3.4     2020-06-25           no      76          12.13.0   80.0.3987.165   86086\nv8.3.3     2020-06-18           no      76          12.13.0   80.0.3987.165   130326\nv8.3.2     2020-06-15           no      76          12.13.0   80.0.3987.165   27862\nv8.3.1     2020-06-01           no      76          12.13.0   80.0.3987.165   83652\nv8.3.0     2020-05-15           no      76          12.13.0   80.0.3987.165   215560\nv8.2.5     2020-04-30           no      76          12.13.0   80.0.3987.165   460687\nv8.2.4     2020-04-28           no      76          12.13.0   80.0.3987.165   150606\nv8.2.3     2020-04-16           no      76          12.13.0   80.0.3987.163   291421\nv8.2.2     2020-04-13           no      76          12.13.0   80.0.3987.163   96190\nv8.2.1     2020-04-06           no      76          12.13.0   80.0.3987.163   133945\nv8.2.0     2020-03-24           no      76          12.13.0   80.0.3987.158   438108\nv8.1.1     2020-03-10           no      76          12.13.0   80.0.3987.141   254763\nv8.1.0     2020-03-06           no      76          12.13.0   80.0.3987.137   51526\nv8.0.3     2020-03-03           no      76          12.13.0   80.0.3987.134   122714\nv8.0.2     2020-02-26           no      76          12.13.0   80.0.3987.86    251194\nv8.0.1     2020-02-14           no      76          12.13.0   80.0.3987.86    207738\nv8.0.0     2020-02-03           no      76          12.13.0   80.0.3987.86    714296",normalizedContent:"electron   发布日期         npm     是否预览版   module 版本   node      chrome          下载量\nv8.5.5     2020-11-18   8-x-y   no      76          12.13.0   80.0.3987.163   513148\nv8.5.4     2020-11-17           no      76          12.13.0   80.0.3987.163   17318\nv8.5.3     2020-10-30           no      76          12.13.0   80.0.3987.163   85351\nv8.5.2     2020-09-22           no      76          12.13.0   80.0.3987.165   304770\nv8.5.1     2020-09-03           no      76          12.13.0   80.0.3987.165   76797\nv8.5.0     2020-08-07           no      76          12.13.0   80.0.3987.165   120066\nv8.4.1     2020-07-23           no      76          12.13.0   80.0.3987.165   140906\nv8.4.0     2020-07-07           no      76          12.13.0   80.0.3987.165   78133\nv8.3.4     2020-06-25           no      76          12.13.0   80.0.3987.165   86086\nv8.3.3     2020-06-18           no      76          12.13.0   80.0.3987.165   130326\nv8.3.2     2020-06-15           no      76          12.13.0   80.0.3987.165   27862\nv8.3.1     2020-06-01           no      76          12.13.0   80.0.3987.165   83652\nv8.3.0     2020-05-15           no      76          12.13.0   80.0.3987.165   215560\nv8.2.5     2020-04-30           no      76          12.13.0   80.0.3987.165   460687\nv8.2.4     2020-04-28           no      76          12.13.0   80.0.3987.165   150606\nv8.2.3     2020-04-16           no      76          12.13.0   80.0.3987.163   291421\nv8.2.2     2020-04-13           no      76          12.13.0   80.0.3987.163   96190\nv8.2.1     2020-04-06           no      76          12.13.0   80.0.3987.163   133945\nv8.2.0     2020-03-24           no      76          12.13.0   80.0.3987.158   438108\nv8.1.1     2020-03-10           no      76          12.13.0   80.0.3987.141   254763\nv8.1.0     2020-03-06           no      76          12.13.0   80.0.3987.137   51526\nv8.0.3     2020-03-03           no      76          12.13.0   80.0.3987.134   122714\nv8.0.2     2020-02-26           no      76          12.13.0   80.0.3987.86    251194\nv8.0.1     2020-02-14           no      76          12.13.0   80.0.3987.86    207738\nv8.0.0     2020-02-03           no      76          12.13.0   80.0.3987.86    714296",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v9版本关系",frontmatter:{title:"v9版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/c83c9f/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/009.v9.html",relativePath:"05.知识点/040.版本关系/009.v9.md",key:"v-c6622602",path:"/pages/c83c9f/",headersStr:null,content:"ELECTRON   发布日期         NPM     是否预览版   MODULE 版本   NODE      CHROME          下载量\nv9.4.4     2021-03-03   9-x-y   no      80          12.14.1   83.0.4103.122   741535\nv9.4.3     2021-02-05           no      80          12.14.1   83.0.4103.122   169449\nv9.4.2     2021-01-27           no      80          12.14.1   83.0.4103.122   122213\nv9.4.1     2021-01-13           no      80          12.14.1   83.0.4103.122   209140\nv9.4.0     2020-12-12           no      80          12.14.1   83.0.4103.122   398752\nv9.3.5     2020-11-24           no      80          12.14.1   83.0.4103.122   165332\nv9.3.4     2020-11-10           no      80          12.14.1   83.0.4103.122   103372\nv9.3.3     2020-10-26           no      80          12.14.1   83.0.4103.122   139267\nv9.3.2     2020-10-05           no      80          12.14.1   83.0.4103.122   324546\nv9.3.1     2020-09-15           no      80          12.14.1   83.0.4103.122   308100\nv9.3.0     2020-09-03           no      80          12.14.1   83.0.4103.122   163061\nv9.2.1     2020-08-18           no      80          12.14.1   83.0.4103.122   285060\nv9.2.0     2020-08-07           no      80          12.14.1   83.0.4103.122   361962\nv9.1.2     2020-07-28           no      80          12.14.1   83.0.4103.122   232476\nv9.1.1     2020-07-20           no      80          12.14.1   83.0.4103.122   179056\nv9.1.0     2020-07-06           no      80          12.14.1   83.0.4103.122   471759\nv9.0.5     2020-06-22           no      80          12.14.1   83.0.4103.119   314533\nv9.0.4     2020-06-12           no      80          12.14.1   83.0.4103.104   190894\nv9.0.3     2020-06-08           no      80          12.14.1   83.0.4103.100   94640\nv9.0.2     2020-06-02           no      80          12.14.1   83.0.4103.94    167599\nv9.0.1     2020-06-01           no      80          12.14.1   83.0.4103.94    59713\nv9.0.0     2020-05-19           no      80          12.14.1   83.0.4103.64    867009",normalizedContent:"electron   发布日期         npm     是否预览版   module 版本   node      chrome          下载量\nv9.4.4     2021-03-03   9-x-y   no      80          12.14.1   83.0.4103.122   741535\nv9.4.3     2021-02-05           no      80          12.14.1   83.0.4103.122   169449\nv9.4.2     2021-01-27           no      80          12.14.1   83.0.4103.122   122213\nv9.4.1     2021-01-13           no      80          12.14.1   83.0.4103.122   209140\nv9.4.0     2020-12-12           no      80          12.14.1   83.0.4103.122   398752\nv9.3.5     2020-11-24           no      80          12.14.1   83.0.4103.122   165332\nv9.3.4     2020-11-10           no      80          12.14.1   83.0.4103.122   103372\nv9.3.3     2020-10-26           no      80          12.14.1   83.0.4103.122   139267\nv9.3.2     2020-10-05           no      80          12.14.1   83.0.4103.122   324546\nv9.3.1     2020-09-15           no      80          12.14.1   83.0.4103.122   308100\nv9.3.0     2020-09-03           no      80          12.14.1   83.0.4103.122   163061\nv9.2.1     2020-08-18           no      80          12.14.1   83.0.4103.122   285060\nv9.2.0     2020-08-07           no      80          12.14.1   83.0.4103.122   361962\nv9.1.2     2020-07-28           no      80          12.14.1   83.0.4103.122   232476\nv9.1.1     2020-07-20           no      80          12.14.1   83.0.4103.122   179056\nv9.1.0     2020-07-06           no      80          12.14.1   83.0.4103.122   471759\nv9.0.5     2020-06-22           no      80          12.14.1   83.0.4103.119   314533\nv9.0.4     2020-06-12           no      80          12.14.1   83.0.4103.104   190894\nv9.0.3     2020-06-08           no      80          12.14.1   83.0.4103.100   94640\nv9.0.2     2020-06-02           no      80          12.14.1   83.0.4103.94    167599\nv9.0.1     2020-06-01           no      80          12.14.1   83.0.4103.94    59713\nv9.0.0     2020-05-19           no      80          12.14.1   83.0.4103.64    867009",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v10版本关系",frontmatter:{title:"v10版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/1d0701/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/010.v10.html",relativePath:"05.知识点/040.版本关系/010.v10.md",key:"v-91f20eb6",path:"/pages/1d0701/",headersStr:null,content:"ELECTRON   发布日期         NPM      是否预览版   MODULE 版本   NODE      CHROME          下载量\nv10.4.7    2021-05-24   10-x-y   no      82          12.16.3   85.0.4183.121   187103\nv10.4.6    2021-05-19            no      82          12.16.3   85.0.4183.121   8565\nv10.4.5    2021-05-05            no      82          12.16.3   85.0.4183.121   51314\nv10.4.4    2021-04-27            no      82          12.16.3   85.0.4183.121   23053\nv10.4.3    2021-04-14            no      82          12.16.3   85.0.4183.121   72180\nv10.4.2    2021-03-23            no      82          12.16.3   85.0.4183.121   46510\nv10.4.1    2021-03-15            no      82          12.16.3   85.0.4183.121   13847\nv10.4.0    2021-02-20            no      82          12.16.3   85.0.4183.121   43266\nv10.3.2    2021-02-05            no      82          12.16.3   85.0.4183.121   48648\nv10.3.1    2021-01-27            no      82          12.16.3   85.0.4183.121   37059\nv10.3.0    2021-01-15            no      82          12.16.3   85.0.4183.121   43457\nv10.2.0    2020-12-12            no      82          12.16.3   85.0.4183.121   161799\nv10.1.7    2020-12-08            no      82          12.16.3   85.0.4183.121   25327\nv10.1.6    2020-11-18            no      82          12.16.3   85.0.4183.121   114086\nv10.1.5    2020-10-23            no      82          12.16.3   85.0.4183.121   416358\nv10.1.4    2020-10-20            no      82          12.16.3   85.0.4183.121   179026\nv10.1.3    2020-09-29            no      82          12.16.3   85.0.4183.121   321509\nv10.1.2    2020-09-14            no      82          12.16.3   85.0.4183.98    216586\nv10.1.1    2020-09-01            no      82          12.16.3   85.0.4183.93    206829\nv10.1.0    2020-08-28            no      82          12.16.3   85.0.4183.87    72613\nv10.0.1    2020-08-27            no      82          12.16.3   85.0.4183.86    4721\nv10.0.0    2020-08-24            no      82          12.16.3   85.0.4183.84    286245",normalizedContent:"electron   发布日期         npm      是否预览版   module 版本   node      chrome          下载量\nv10.4.7    2021-05-24   10-x-y   no      82          12.16.3   85.0.4183.121   187103\nv10.4.6    2021-05-19            no      82          12.16.3   85.0.4183.121   8565\nv10.4.5    2021-05-05            no      82          12.16.3   85.0.4183.121   51314\nv10.4.4    2021-04-27            no      82          12.16.3   85.0.4183.121   23053\nv10.4.3    2021-04-14            no      82          12.16.3   85.0.4183.121   72180\nv10.4.2    2021-03-23            no      82          12.16.3   85.0.4183.121   46510\nv10.4.1    2021-03-15            no      82          12.16.3   85.0.4183.121   13847\nv10.4.0    2021-02-20            no      82          12.16.3   85.0.4183.121   43266\nv10.3.2    2021-02-05            no      82          12.16.3   85.0.4183.121   48648\nv10.3.1    2021-01-27            no      82          12.16.3   85.0.4183.121   37059\nv10.3.0    2021-01-15            no      82          12.16.3   85.0.4183.121   43457\nv10.2.0    2020-12-12            no      82          12.16.3   85.0.4183.121   161799\nv10.1.7    2020-12-08            no      82          12.16.3   85.0.4183.121   25327\nv10.1.6    2020-11-18            no      82          12.16.3   85.0.4183.121   114086\nv10.1.5    2020-10-23            no      82          12.16.3   85.0.4183.121   416358\nv10.1.4    2020-10-20            no      82          12.16.3   85.0.4183.121   179026\nv10.1.3    2020-09-29            no      82          12.16.3   85.0.4183.121   321509\nv10.1.2    2020-09-14            no      82          12.16.3   85.0.4183.98    216586\nv10.1.1    2020-09-01            no      82          12.16.3   85.0.4183.93    206829\nv10.1.0    2020-08-28            no      82          12.16.3   85.0.4183.87    72613\nv10.0.1    2020-08-27            no      82          12.16.3   85.0.4183.86    4721\nv10.0.0    2020-08-24            no      82          12.16.3   85.0.4183.84    286245",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v11版本关系",frontmatter:{title:"v11版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/964526/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/011.v11.html",relativePath:"05.知识点/040.版本关系/011.v11.md",key:"v-7bb863e5",path:"/pages/964526/",headersStr:null,content:"ELECTRON   发布日期         NPM             是否预览版   MODULE 版本   NODE      CHROME          下载量\nv11.5.0    2021-08-31   11-x-y          no      85          12.18.3   87.0.4280.141   865374\nv11.4.12   2021-08-18                   no      85          12.18.3   87.0.4280.141   111726\nv11.4.11   2021-08-03                   no      85          12.18.3   87.0.4280.141   94498\nv11.4.10   2021-07-06                   no      85          12.18.3   87.0.4280.141   237362\nv11.4.9    2021-06-21                   no      85          12.18.3   87.0.4280.141   185164\nv11.4.8    2021-06-03                   no      85          12.18.3   87.0.4280.141   186085\nv11.4.7    2021-05-17                   no      85          12.18.3   87.0.4280.141   144306\nv11.4.6    2021-05-08                   no      85          12.18.3   87.0.4280.141   184598\nv11.4.5    2021-05-05                   no      85          12.18.3   87.0.4280.141   45083\nv11.4.4    2021-04-27                   no      85          12.18.3   87.0.4280.141   92083\nv11.4.3    2021-04-14                   no      85          12.18.3   87.0.4280.141   233667\nv11.4.2    2021-04-02                   no      85          12.18.3   87.0.4280.141   114454\nv11.4.1    2021-03-23                   no      85          12.18.3   87.0.4280.141   89453\nv11.4.0    2021-03-23   origin/11-x-y   no      85          12.18.3   87.0.4280.141   10332\nv11.3.0    2021-02-19                   no      85          12.18.3   87.0.4280.141   571603\nv11.2.3    2021-02-06                   no      85          12.18.3   87.0.4280.141   376911\nv11.2.2    2021-02-02                   no      85          12.18.3   87.0.4280.141   119835\nv11.2.1    2021-01-23                   no      85          12.18.3   87.0.4280.141   266095\nv11.2.0    2021-01-13                   no      85          12.18.3   87.0.4280.141   721012\nv11.1.1    2020-12-21                   no      85          12.18.3   87.0.4280.88    473142\nv11.1.0    2020-12-12                   no      85          12.18.3   87.0.4280.88    358437\nv11.0.5    2020-12-11                   no      85          12.18.3   87.0.4280.88    68573\nv11.0.4    2020-12-07                   no      85          12.18.3   87.0.4280.67    111083\nv11.0.3    2020-11-24                   no      85          12.18.3   87.0.4280.67    263611\nv11.0.2    2020-11-19                   no      85          12.18.3   87.0.4280.67    77256\nv11.0.1    2020-11-17                   no      85          12.18.3   87.0.4280.60    127860\nv11.0.0    2020-11-16                   no      85          12.18.3   87.0.4280.60    627380",normalizedContent:"electron   发布日期         npm             是否预览版   module 版本   node      chrome          下载量\nv11.5.0    2021-08-31   11-x-y          no      85          12.18.3   87.0.4280.141   865374\nv11.4.12   2021-08-18                   no      85          12.18.3   87.0.4280.141   111726\nv11.4.11   2021-08-03                   no      85          12.18.3   87.0.4280.141   94498\nv11.4.10   2021-07-06                   no      85          12.18.3   87.0.4280.141   237362\nv11.4.9    2021-06-21                   no      85          12.18.3   87.0.4280.141   185164\nv11.4.8    2021-06-03                   no      85          12.18.3   87.0.4280.141   186085\nv11.4.7    2021-05-17                   no      85          12.18.3   87.0.4280.141   144306\nv11.4.6    2021-05-08                   no      85          12.18.3   87.0.4280.141   184598\nv11.4.5    2021-05-05                   no      85          12.18.3   87.0.4280.141   45083\nv11.4.4    2021-04-27                   no      85          12.18.3   87.0.4280.141   92083\nv11.4.3    2021-04-14                   no      85          12.18.3   87.0.4280.141   233667\nv11.4.2    2021-04-02                   no      85          12.18.3   87.0.4280.141   114454\nv11.4.1    2021-03-23                   no      85          12.18.3   87.0.4280.141   89453\nv11.4.0    2021-03-23   origin/11-x-y   no      85          12.18.3   87.0.4280.141   10332\nv11.3.0    2021-02-19                   no      85          12.18.3   87.0.4280.141   571603\nv11.2.3    2021-02-06                   no      85          12.18.3   87.0.4280.141   376911\nv11.2.2    2021-02-02                   no      85          12.18.3   87.0.4280.141   119835\nv11.2.1    2021-01-23                   no      85          12.18.3   87.0.4280.141   266095\nv11.2.0    2021-01-13                   no      85          12.18.3   87.0.4280.141   721012\nv11.1.1    2020-12-21                   no      85          12.18.3   87.0.4280.88    473142\nv11.1.0    2020-12-12                   no      85          12.18.3   87.0.4280.88    358437\nv11.0.5    2020-12-11                   no      85          12.18.3   87.0.4280.88    68573\nv11.0.4    2020-12-07                   no      85          12.18.3   87.0.4280.67    111083\nv11.0.3    2020-11-24                   no      85          12.18.3   87.0.4280.67    263611\nv11.0.2    2020-11-19                   no      85          12.18.3   87.0.4280.67    77256\nv11.0.1    2020-11-17                   no      85          12.18.3   87.0.4280.60    127860\nv11.0.0    2020-11-16                   no      85          12.18.3   87.0.4280.60    627380",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v12版本关系",frontmatter:{title:"v12版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/c5cca4/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/012.v12.html",relativePath:"05.知识点/040.版本关系/012.v12.md",key:"v-4069cf25",path:"/pages/c5cca4/",headersStr:null,content:"ELECTRON   发布日期         NPM      是否预览版   MODULE 版本   NODE      CHROME          下载量\nv12.2.3    2021-11-15   12-x-y   no      87          14.16.0   89.0.4389.128   314274\nv12.2.2    2021-10-11            no      87          14.16.0   89.0.4389.128   113500\nv12.2.1    2021-09-30            no      87          14.16.0   89.0.4389.128   129556\nv12.2.0    2021-09-28            no      87          14.16.0   89.0.4389.128   15752\nv12.1.2    2021-09-20            no      87          14.16.0   89.0.4389.128   33859\nv12.1.1    2021-09-13            no      87          14.16.0   89.0.4389.128   25477\nv12.1.0    2021-08-31            no      87          14.16.0   89.0.4389.128   113635\nv12.0.18   2021-08-27            no      87          14.16.0   89.0.4389.128   18767\nv12.0.17   2021-08-18            no      87          14.16.0   89.0.4389.128   44064\nv12.0.16   2021-08-03            no      87          14.16.0   89.0.4389.128   72672\nv12.0.15   2021-07-15            no      87          14.16.0   89.0.4389.128   59261\nv12.0.14   2021-07-06            no      87          14.16.0   89.0.4389.128   48132\nv12.0.13   2021-06-29            no      87          14.16.0   89.0.4389.128   110317\nv12.0.12   2021-06-21            no      87          14.16.0   89.0.4389.128   61783\nv12.0.11   2021-06-09            no      87          14.16.0   89.0.4389.128   73452\nv12.0.10   2021-06-03            no      87          14.16.0   89.0.4389.128   38361\nv12.0.9    2021-05-19            no      87          14.16.0   89.0.4389.128   197196\nv12.0.8    2021-05-17            no      87          14.16.0   89.0.4389.128   56951\nv12.0.7    2021-05-07            no      87          14.16.0   89.0.4389.128   197835\nv12.0.6    2021-04-30            no      87          14.16.0   89.0.4389.128   162540\nv12.0.5    2021-04-21            no      87          14.16.0   89.0.4389.128   226801\nv12.0.4    2021-04-13            no      87          14.16.0   89.0.4389.114   200040\nv12.0.3    2021-04-13            no      87          14.16.0   89.0.4389.114   76132\nv12.0.2    2021-03-24            no      87          14.16.0   89.0.4389.90    346522\nv12.0.1    2021-03-10            no      87          14.16.0   89.0.4389.82    245919\nv12.0.0    2021-03-02            no      87          14.16.0   89.0.4389.69    523002",normalizedContent:"electron   发布日期         npm      是否预览版   module 版本   node      chrome          下载量\nv12.2.3    2021-11-15   12-x-y   no      87          14.16.0   89.0.4389.128   314274\nv12.2.2    2021-10-11            no      87          14.16.0   89.0.4389.128   113500\nv12.2.1    2021-09-30            no      87          14.16.0   89.0.4389.128   129556\nv12.2.0    2021-09-28            no      87          14.16.0   89.0.4389.128   15752\nv12.1.2    2021-09-20            no      87          14.16.0   89.0.4389.128   33859\nv12.1.1    2021-09-13            no      87          14.16.0   89.0.4389.128   25477\nv12.1.0    2021-08-31            no      87          14.16.0   89.0.4389.128   113635\nv12.0.18   2021-08-27            no      87          14.16.0   89.0.4389.128   18767\nv12.0.17   2021-08-18            no      87          14.16.0   89.0.4389.128   44064\nv12.0.16   2021-08-03            no      87          14.16.0   89.0.4389.128   72672\nv12.0.15   2021-07-15            no      87          14.16.0   89.0.4389.128   59261\nv12.0.14   2021-07-06            no      87          14.16.0   89.0.4389.128   48132\nv12.0.13   2021-06-29            no      87          14.16.0   89.0.4389.128   110317\nv12.0.12   2021-06-21            no      87          14.16.0   89.0.4389.128   61783\nv12.0.11   2021-06-09            no      87          14.16.0   89.0.4389.128   73452\nv12.0.10   2021-06-03            no      87          14.16.0   89.0.4389.128   38361\nv12.0.9    2021-05-19            no      87          14.16.0   89.0.4389.128   197196\nv12.0.8    2021-05-17            no      87          14.16.0   89.0.4389.128   56951\nv12.0.7    2021-05-07            no      87          14.16.0   89.0.4389.128   197835\nv12.0.6    2021-04-30            no      87          14.16.0   89.0.4389.128   162540\nv12.0.5    2021-04-21            no      87          14.16.0   89.0.4389.128   226801\nv12.0.4    2021-04-13            no      87          14.16.0   89.0.4389.114   200040\nv12.0.3    2021-04-13            no      87          14.16.0   89.0.4389.114   76132\nv12.0.2    2021-03-24            no      87          14.16.0   89.0.4389.90    346522\nv12.0.1    2021-03-10            no      87          14.16.0   89.0.4389.82    245919\nv12.0.0    2021-03-02            no      87          14.16.0   89.0.4389.69    523002",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v13版本关系",frontmatter:{title:"v13版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/5638a8/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/013.v13.html",relativePath:"05.知识点/040.版本关系/013.v13.md",key:"v-051b3a65",path:"/pages/5638a8/",headersStr:null,content:"ELECTRON   发布日期         NPM      是否预览版   MODULE 版本   NODE      CHROME          下载量\nv13.6.9    2022-02-01   13-x-y   no      89          14.16.0   91.0.4472.164   139543\nv13.6.8    2022-01-26            no      89          14.16.0   91.0.4472.164   17964\nv13.6.7    2022-01-12            no      89          14.16.0   91.0.4472.164   69636\nv13.6.6    2022-01-04            no      89          14.16.0   91.0.4472.164   46409\nv13.6.3    2021-12-01            no      89          14.16.0   91.0.4472.164   108833\nv13.6.2    2021-11-16            no      89          14.16.0   91.0.4472.164   75212\nv13.6.1    2021-10-28            no      89          14.16.0   91.0.4472.164   134232\nv13.6.0    2021-10-21            no      89          14.16.0   91.0.4472.164   77591\nv13.5.2    2021-10-11            no      89          14.16.0   91.0.4472.164   163366\nv13.5.1    2021-09-30            no      89          14.16.0   91.0.4472.164   260651\nv13.5.0    2021-09-27            no      89          14.16.0   91.0.4472.164   69677\nv13.4.0    2021-09-13            no      89          14.16.0   91.0.4472.164   135358\nv13.3.0    2021-08-31            no      89          14.16.0   91.0.4472.164   171870\nv13.2.3    2021-08-27            no      89          14.16.0   91.0.4472.164   80565\nv13.2.2    2021-08-23            no      89          14.16.0   91.0.4472.164   68391\nv13.2.1    2021-08-17            no      89          14.16.0   91.0.4472.164   130222\nv13.2.0    2021-08-17            no      89          14.16.0   91.0.4472.164   17617\nv13.1.9    2021-08-10            no      89          14.16.0   91.0.4472.164   151033\nv13.1.8    2021-08-03            no      89          14.16.0   91.0.4472.164   161993\nv13.1.7    2021-07-15            no      89          14.16.0   91.0.4472.124   314563\nv13.1.6    2021-07-05            no      89          14.16.0   91.0.4472.124   182382\nv13.1.5    2021-07-01            no      89          14.16.0   91.0.4472.124   80334\nv13.1.4    2021-06-22            no      89          14.16.0   91.0.4472.106   178291\nv13.1.3    2021-06-21            no      89          14.16.0   91.0.4472.106   23423\nv13.1.2    2021-06-09            no      89          14.16.0   91.0.4472.77    184215\nv13.1.1    2021-06-04            no      89          14.16.0   91.0.4472.77    62800\nv13.1.0    2021-06-03            no      89          14.16.0   91.0.4472.77    41179\nv13.0.1    2021-05-25            no      89          14.16.0   91.0.4472.69    126200\nv13.0.0    2021-05-25            no      89          14.16.0   91.0.4472.69    419053",normalizedContent:"electron   发布日期         npm      是否预览版   module 版本   node      chrome          下载量\nv13.6.9    2022-02-01   13-x-y   no      89          14.16.0   91.0.4472.164   139543\nv13.6.8    2022-01-26            no      89          14.16.0   91.0.4472.164   17964\nv13.6.7    2022-01-12            no      89          14.16.0   91.0.4472.164   69636\nv13.6.6    2022-01-04            no      89          14.16.0   91.0.4472.164   46409\nv13.6.3    2021-12-01            no      89          14.16.0   91.0.4472.164   108833\nv13.6.2    2021-11-16            no      89          14.16.0   91.0.4472.164   75212\nv13.6.1    2021-10-28            no      89          14.16.0   91.0.4472.164   134232\nv13.6.0    2021-10-21            no      89          14.16.0   91.0.4472.164   77591\nv13.5.2    2021-10-11            no      89          14.16.0   91.0.4472.164   163366\nv13.5.1    2021-09-30            no      89          14.16.0   91.0.4472.164   260651\nv13.5.0    2021-09-27            no      89          14.16.0   91.0.4472.164   69677\nv13.4.0    2021-09-13            no      89          14.16.0   91.0.4472.164   135358\nv13.3.0    2021-08-31            no      89          14.16.0   91.0.4472.164   171870\nv13.2.3    2021-08-27            no      89          14.16.0   91.0.4472.164   80565\nv13.2.2    2021-08-23            no      89          14.16.0   91.0.4472.164   68391\nv13.2.1    2021-08-17            no      89          14.16.0   91.0.4472.164   130222\nv13.2.0    2021-08-17            no      89          14.16.0   91.0.4472.164   17617\nv13.1.9    2021-08-10            no      89          14.16.0   91.0.4472.164   151033\nv13.1.8    2021-08-03            no      89          14.16.0   91.0.4472.164   161993\nv13.1.7    2021-07-15            no      89          14.16.0   91.0.4472.124   314563\nv13.1.6    2021-07-05            no      89          14.16.0   91.0.4472.124   182382\nv13.1.5    2021-07-01            no      89          14.16.0   91.0.4472.124   80334\nv13.1.4    2021-06-22            no      89          14.16.0   91.0.4472.106   178291\nv13.1.3    2021-06-21            no      89          14.16.0   91.0.4472.106   23423\nv13.1.2    2021-06-09            no      89          14.16.0   91.0.4472.77    184215\nv13.1.1    2021-06-04            no      89          14.16.0   91.0.4472.77    62800\nv13.1.0    2021-06-03            no      89          14.16.0   91.0.4472.77    41179\nv13.0.1    2021-05-25            no      89          14.16.0   91.0.4472.69    126200\nv13.0.0    2021-05-25            no      89          14.16.0   91.0.4472.69    419053",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v14版本关系",frontmatter:{title:"v14版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/f50391/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/014.v14.html",relativePath:"05.知识点/040.版本关系/014.v14.md",key:"v-6c66b4b6",path:"/pages/f50391/",headersStr:null,content:"ELECTRON   发布日期         NPM      是否预览版   MODULE 版本   NODE      CHROME         下载量\nv14.2.9    2022-03-30   14-x-y   no      97          14.17.0   93.0.4577.82   17857\nv14.2.8    2022-03-24            no      97          14.17.0   93.0.4577.82   5851\nv14.2.7    2022-03-09            no      97          14.17.0   93.0.4577.82   12626\nv14.2.6    2022-02-15            no      97          14.17.0   93.0.4577.82   18013\nv14.2.5    2022-01-27            no      97          14.17.0   93.0.4577.82   15220\nv14.2.4    2022-01-11            no      97          14.17.0   93.0.4577.82   21361\nv14.2.3    2021-12-16            no      97          14.17.0   93.0.4577.82   38924\nv14.2.2    2021-12-01            no      97          14.17.0   93.0.4577.82   17688\nv14.2.1    2021-11-08            no      97          14.17.0   93.0.4577.82   41289\nv14.2.0    2021-10-20            no      97          14.17.0   93.0.4577.82   58483\nv14.1.1    2021-10-08            no      97          14.17.0   93.0.4577.82   33938\nv14.1.0    2021-09-30            no      97          14.17.0   93.0.4577.82   57375\nv14.0.2    2021-09-29            no      97          14.17.0   93.0.4577.82   13169\nv14.0.1    2021-09-13            no      89          14.17.0   93.0.4577.63   106909\nv14.0.0    2021-08-30            no      89          14.17.0   93.0.4577.58   227302",normalizedContent:"electron   发布日期         npm      是否预览版   module 版本   node      chrome         下载量\nv14.2.9    2022-03-30   14-x-y   no      97          14.17.0   93.0.4577.82   17857\nv14.2.8    2022-03-24            no      97          14.17.0   93.0.4577.82   5851\nv14.2.7    2022-03-09            no      97          14.17.0   93.0.4577.82   12626\nv14.2.6    2022-02-15            no      97          14.17.0   93.0.4577.82   18013\nv14.2.5    2022-01-27            no      97          14.17.0   93.0.4577.82   15220\nv14.2.4    2022-01-11            no      97          14.17.0   93.0.4577.82   21361\nv14.2.3    2021-12-16            no      97          14.17.0   93.0.4577.82   38924\nv14.2.2    2021-12-01            no      97          14.17.0   93.0.4577.82   17688\nv14.2.1    2021-11-08            no      97          14.17.0   93.0.4577.82   41289\nv14.2.0    2021-10-20            no      97          14.17.0   93.0.4577.82   58483\nv14.1.1    2021-10-08            no      97          14.17.0   93.0.4577.82   33938\nv14.1.0    2021-09-30            no      97          14.17.0   93.0.4577.82   57375\nv14.0.2    2021-09-29            no      97          14.17.0   93.0.4577.82   13169\nv14.0.1    2021-09-13            no      89          14.17.0   93.0.4577.63   106909\nv14.0.0    2021-08-30            no      89          14.17.0   93.0.4577.58   227302",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v15版本关系",frontmatter:{title:"v15版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/e6b75d/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/015.v15.html",relativePath:"05.知识点/040.版本关系/015.v15.md",key:"v-e303de36",path:"/pages/e6b75d/",headersStr:null,content:"ELECTRON   发布日期         NPM      是否预览版   MODULE 版本   NODE     CHROME         下载量\nv15.5.4    2022-05-04   15-x-y   no      98          16.5.0   94.0.4606.81   1753\nv15.5.3    2022-04-30            no      98          16.5.0   94.0.4606.81   2844\nv15.5.2    2022-04-06            no      98          16.5.0   94.0.4606.81   13567\nv15.5.1    2022-03-30            no      98          16.5.0   94.0.4606.81   14236\nv15.5.0    2022-03-29            no      98          16.5.0   94.0.4606.81   3170\nv15.4.2    2022-03-23            no      98          16.5.0   94.0.4606.81   14918\nv15.4.1    2022-03-09            no      98          16.5.0   94.0.4606.81   11023\nv15.4.0    2022-03-01            no      98          16.5.0   94.0.4606.81   11592\nv15.3.7    2022-02-14            no      98          16.5.0   94.0.4606.81   24901\nv15.3.6    2022-01-27            no      98          16.5.0   94.0.4606.81   55074\nv15.3.5    2022-01-11            no      98          16.5.0   94.0.4606.81   52400\nv15.3.4    2021-12-16            no      98          16.5.0   94.0.4606.81   80677\nv15.3.3    2021-11-30            no      98          16.5.0   94.0.4606.81   43611\nv15.3.2    2021-11-16            no      98          16.5.0   94.0.4606.81   71290\nv15.3.1    2021-11-08            no      98          16.5.0   94.0.4606.81   110900\nv15.3.0    2021-10-20            no      98          16.5.0   94.0.4606.81   296062\nv15.2.0    2021-10-14            no      98          16.5.0   94.0.4606.81   108116\nv15.1.2    2021-10-08            no      98          16.5.0   94.0.4606.71   82745\nv15.1.1    2021-10-04            no      98          16.5.0   94.0.4606.61   62488\nv15.1.0    2021-10-01            no      98          16.5.0   94.0.4606.61   52741\nv15.0.0    2021-09-21            no      98          16.5.0   94.0.4606.51   124652",normalizedContent:"electron   发布日期         npm      是否预览版   module 版本   node     chrome         下载量\nv15.5.4    2022-05-04   15-x-y   no      98          16.5.0   94.0.4606.81   1753\nv15.5.3    2022-04-30            no      98          16.5.0   94.0.4606.81   2844\nv15.5.2    2022-04-06            no      98          16.5.0   94.0.4606.81   13567\nv15.5.1    2022-03-30            no      98          16.5.0   94.0.4606.81   14236\nv15.5.0    2022-03-29            no      98          16.5.0   94.0.4606.81   3170\nv15.4.2    2022-03-23            no      98          16.5.0   94.0.4606.81   14918\nv15.4.1    2022-03-09            no      98          16.5.0   94.0.4606.81   11023\nv15.4.0    2022-03-01            no      98          16.5.0   94.0.4606.81   11592\nv15.3.7    2022-02-14            no      98          16.5.0   94.0.4606.81   24901\nv15.3.6    2022-01-27            no      98          16.5.0   94.0.4606.81   55074\nv15.3.5    2022-01-11            no      98          16.5.0   94.0.4606.81   52400\nv15.3.4    2021-12-16            no      98          16.5.0   94.0.4606.81   80677\nv15.3.3    2021-11-30            no      98          16.5.0   94.0.4606.81   43611\nv15.3.2    2021-11-16            no      98          16.5.0   94.0.4606.81   71290\nv15.3.1    2021-11-08            no      98          16.5.0   94.0.4606.81   110900\nv15.3.0    2021-10-20            no      98          16.5.0   94.0.4606.81   296062\nv15.2.0    2021-10-14            no      98          16.5.0   94.0.4606.81   108116\nv15.1.2    2021-10-08            no      98          16.5.0   94.0.4606.71   82745\nv15.1.1    2021-10-04            no      98          16.5.0   94.0.4606.61   62488\nv15.1.0    2021-10-01            no      98          16.5.0   94.0.4606.61   52741\nv15.0.0    2021-09-21            no      98          16.5.0   94.0.4606.51   124652",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v16版本关系",frontmatter:{title:"v16版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/e08a17/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/016.v16.html",relativePath:"05.知识点/040.版本关系/016.v16.md",key:"v-532f7c25",path:"/pages/e08a17/",headersStr:null,content:"ELECTRON   发布日期         NPM      是否预览版   MODULE 版本   NODE     CHROME          下载量\nv16.2.5    2022-05-04   16-x-y   no      99          16.9.1   96.0.4664.174   2452\nv16.2.4    2022-04-28            no      99          16.9.1   96.0.4664.174   4778\nv16.2.3    2022-04-20            no      99          16.9.1   96.0.4664.174   9476\nv16.2.2    2022-04-06            no      99          16.9.1   96.0.4664.174   19842\nv16.2.1    2022-03-30            no      99          16.9.1   96.0.4664.174   15888\nv16.2.0    2022-03-28            no      99          16.9.1   96.0.4664.174   9773\nv16.1.1    2022-03-23            no      99          16.9.1   96.0.4664.174   12178\nv16.1.0    2022-03-09            no      99          16.9.1   96.0.4664.174   37596\nv16.0.10   2022-02-23            no      99          16.9.1   96.0.4664.174   40536\nv16.0.9    2022-02-15            no      99          16.9.1   96.0.4664.174   55469\nv16.0.8    2022-01-27            no      99          16.9.1   96.0.4664.110   134374\nv16.0.7    2022-01-11            no      99          16.9.1   96.0.4664.110   190233\nv16.0.6    2022-01-03            no      99          16.9.1   96.0.4664.110   231145\nv16.0.5    2021-12-17            no      99          16.9.1   96.0.4664.55    225611\nv16.0.4    2021-12-03            no      99          16.9.1   96.0.4664.55    174058\nv16.0.3    2021-11-30            no      99          16.9.1   96.0.4664.55    46686\nv16.0.2    2021-11-24            no      99          16.9.1   96.0.4664.55    134974\nv16.0.1    2021-11-18            no      99          16.9.1   96.0.4664.45    64611\nv16.0.0    2021-11-16            no      99          16.9.1   96.0.4664.45    82535",normalizedContent:"electron   发布日期         npm      是否预览版   module 版本   node     chrome          下载量\nv16.2.5    2022-05-04   16-x-y   no      99          16.9.1   96.0.4664.174   2452\nv16.2.4    2022-04-28            no      99          16.9.1   96.0.4664.174   4778\nv16.2.3    2022-04-20            no      99          16.9.1   96.0.4664.174   9476\nv16.2.2    2022-04-06            no      99          16.9.1   96.0.4664.174   19842\nv16.2.1    2022-03-30            no      99          16.9.1   96.0.4664.174   15888\nv16.2.0    2022-03-28            no      99          16.9.1   96.0.4664.174   9773\nv16.1.1    2022-03-23            no      99          16.9.1   96.0.4664.174   12178\nv16.1.0    2022-03-09            no      99          16.9.1   96.0.4664.174   37596\nv16.0.10   2022-02-23            no      99          16.9.1   96.0.4664.174   40536\nv16.0.9    2022-02-15            no      99          16.9.1   96.0.4664.174   55469\nv16.0.8    2022-01-27            no      99          16.9.1   96.0.4664.110   134374\nv16.0.7    2022-01-11            no      99          16.9.1   96.0.4664.110   190233\nv16.0.6    2022-01-03            no      99          16.9.1   96.0.4664.110   231145\nv16.0.5    2021-12-17            no      99          16.9.1   96.0.4664.55    225611\nv16.0.4    2021-12-03            no      99          16.9.1   96.0.4664.55    174058\nv16.0.3    2021-11-30            no      99          16.9.1   96.0.4664.55    46686\nv16.0.2    2021-11-24            no      99          16.9.1   96.0.4664.55    134974\nv16.0.1    2021-11-18            no      99          16.9.1   96.0.4664.45    64611\nv16.0.0    2021-11-16            no      99          16.9.1   96.0.4664.45    82535",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v17版本关系",frontmatter:{title:"v17版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/631d92/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/017.v17.html",relativePath:"05.知识点/040.版本关系/017.v17.md",key:"v-17e0e765",path:"/pages/631d92/",headersStr:null,content:"ELECTRON   发布日期         NPM      是否预览版   MODULE 版本   NODE      CHROME          下载量\nv17.4.3    2022-05-05   17-x-y   no      101         16.13.0   98.0.4758.141   1877\nv17.4.2    2022-04-29            no      101         16.13.0   98.0.4758.141   9985\nv17.4.1    2022-04-20            no      101         16.13.0   98.0.4758.141   20096\nv17.4.0    2022-04-05            no      101         16.13.0   98.0.4758.141   40564\nv17.3.1    2022-03-30            no      101         16.13.0   98.0.4758.141   42411\nv17.3.0    2022-03-29            no      101         16.13.0   98.0.4758.141   19669\nv17.2.0    2022-03-23            no      101         16.13.0   98.0.4758.109   103221\nv17.1.2    2022-03-09            no      101         16.13.0   98.0.4758.109   138942\nv17.1.1    2022-03-07            no      101         16.13.0   98.0.4758.109   43198\nv17.1.0    2022-02-23            no      101         16.13.0   98.0.4758.102   143043\nv17.0.1    2022-02-15            no      101         16.13.0   98.0.4758.82    114714\nv17.0.0    2022-02-01            no      101         16.13.0   98.0.4758.74    204358",normalizedContent:"electron   发布日期         npm      是否预览版   module 版本   node      chrome          下载量\nv17.4.3    2022-05-05   17-x-y   no      101         16.13.0   98.0.4758.141   1877\nv17.4.2    2022-04-29            no      101         16.13.0   98.0.4758.141   9985\nv17.4.1    2022-04-20            no      101         16.13.0   98.0.4758.141   20096\nv17.4.0    2022-04-05            no      101         16.13.0   98.0.4758.141   40564\nv17.3.1    2022-03-30            no      101         16.13.0   98.0.4758.141   42411\nv17.3.0    2022-03-29            no      101         16.13.0   98.0.4758.141   19669\nv17.2.0    2022-03-23            no      101         16.13.0   98.0.4758.109   103221\nv17.1.2    2022-03-09            no      101         16.13.0   98.0.4758.109   138942\nv17.1.1    2022-03-07            no      101         16.13.0   98.0.4758.109   43198\nv17.1.0    2022-02-23            no      101         16.13.0   98.0.4758.102   143043\nv17.0.1    2022-02-15            no      101         16.13.0   98.0.4758.82    114714\nv17.0.0    2022-02-01            no      101         16.13.0   98.0.4758.74    204358",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v18版本关系",frontmatter:{title:"v18版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/e75f83/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/018.v18.html",relativePath:"05.知识点/040.版本关系/018.v18.md",key:"v-46db5ab6",path:"/pages/e75f83/",headersStr:null,content:"electron与node.js 版本对应关系（稳定版）\n\nELECTRON   发布日期         NPM              是否预览版   MODULE 版本   NODE      CHROME           下载量\nv18.2.1    2022-05-04                    no      103         16.13.2   100.0.4896.143   1807\nv18.2.0    2022-04-29   latest, 18-x-y   no      103         16.13.2   100.0.4896.143   39842\nv18.1.0    2022-04-21                    no      103         16.13.2   100.0.4896.127   65238\nv18.0.4    2022-04-14                    no      103         16.13.2   100.0.4896.75    52793\nv18.0.3    2022-04-07                    no      103         16.13.2   100.0.4896.75    80702\nv18.0.2    2022-04-05                    no      103         16.13.2   100.0.4896.60    19331\nv18.0.1    2022-03-30                    no      103         16.13.2   100.0.4896.60    57377\nv18.0.0    2022-03-29                    no      103         16.13.2   100.0.4896.56    30498",normalizedContent:"electron与node.js 版本对应关系（稳定版）\n\nelectron   发布日期         npm              是否预览版   module 版本   node      chrome           下载量\nv18.2.1    2022-05-04                    no      103         16.13.2   100.0.4896.143   1807\nv18.2.0    2022-04-29   latest, 18-x-y   no      103         16.13.2   100.0.4896.143   39842\nv18.1.0    2022-04-21                    no      103         16.13.2   100.0.4896.127   65238\nv18.0.4    2022-04-14                    no      103         16.13.2   100.0.4896.75    52793\nv18.0.3    2022-04-07                    no      103         16.13.2   100.0.4896.75    80702\nv18.0.2    2022-04-05                    no      103         16.13.2   100.0.4896.60    19331\nv18.0.1    2022-03-30                    no      103         16.13.2   100.0.4896.60    57377\nv18.0.0    2022-03-29                    no      103         16.13.2   100.0.4896.56    30498",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v19版本关系",frontmatter:{title:"v19版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/41624c/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/019.v19.html",relativePath:"05.知识点/040.版本关系/019.v19.md",key:"v-bd788436",path:"/pages/41624c/",headersStr:null,content:"V19.1.3    2022-10-12   19-X-Y   NO   106   16.14.2   102.0.5005.167   4778\nv19.1.2    2022-10-05            no   106   16.14.2   102.0.5005.167   9091\nv19.1.1    2022-09-28            no   106   16.14.2   102.0.5005.167   16952\nv19.1.0    2022-09-23            no   106   16.14.2   102.0.5005.167   17528\nv19.0.17   2022-09-14            no   106   16.14.2   102.0.5005.167   62972\nv19.0.16   2022-09-08            no   106   16.14.2   102.0.5005.167   32750\nv19.0.15   2022-08-31            no   106   16.14.2   102.0.5005.167   33059\nv19.0.14   2022-08-24            no   106   16.14.2   102.0.5005.167   23068\nv19.0.13   2022-08-17            no   106   16.14.2   102.0.5005.167   34228\nv19.0.12   2022-08-10            no   106   16.14.2   102.0.5005.167   66468\nv19.0.11   2022-08-03            no   106   16.14.2   102.0.5005.167   71112\nv19.0.10   2022-07-27            no   106   16.14.2   102.0.5005.167   117324\nv19.0.9    2022-07-21            no   106   16.14.2   102.0.5005.167   107898\nv19.0.8    2022-07-06            no   106   16.14.2   102.0.5005.148   230911\nv19.0.7    2022-06-30            no   106   16.14.2   102.0.5005.134   121331\nv19.0.6    2022-06-22            no   106   16.14.2   102.0.5005.115   157004\nv19.0.5    2022-06-20            no   106   16.14.2   102.0.5005.115   35154\nv19.0.4    2022-06-08            no   106   16.14.2   102.0.5005.63    164908\nv19.0.3    2022-06-03            no   106   16.14.2   102.0.5005.63    104142\nv19.0.2    2022-06-01            no   106   16.14.2   102.0.5005.63    41265\nv19.0.1    2022-05-25            no   106   16.14.2   102.0.5005.61    57614\nv19.0.0    2022-05-23            no   106   16.14.2   102.0.5005.61    73212",normalizedContent:"v19.1.3    2022-10-12   19-x-y   no   106   16.14.2   102.0.5005.167   4778\nv19.1.2    2022-10-05            no   106   16.14.2   102.0.5005.167   9091\nv19.1.1    2022-09-28            no   106   16.14.2   102.0.5005.167   16952\nv19.1.0    2022-09-23            no   106   16.14.2   102.0.5005.167   17528\nv19.0.17   2022-09-14            no   106   16.14.2   102.0.5005.167   62972\nv19.0.16   2022-09-08            no   106   16.14.2   102.0.5005.167   32750\nv19.0.15   2022-08-31            no   106   16.14.2   102.0.5005.167   33059\nv19.0.14   2022-08-24            no   106   16.14.2   102.0.5005.167   23068\nv19.0.13   2022-08-17            no   106   16.14.2   102.0.5005.167   34228\nv19.0.12   2022-08-10            no   106   16.14.2   102.0.5005.167   66468\nv19.0.11   2022-08-03            no   106   16.14.2   102.0.5005.167   71112\nv19.0.10   2022-07-27            no   106   16.14.2   102.0.5005.167   117324\nv19.0.9    2022-07-21            no   106   16.14.2   102.0.5005.167   107898\nv19.0.8    2022-07-06            no   106   16.14.2   102.0.5005.148   230911\nv19.0.7    2022-06-30            no   106   16.14.2   102.0.5005.134   121331\nv19.0.6    2022-06-22            no   106   16.14.2   102.0.5005.115   157004\nv19.0.5    2022-06-20            no   106   16.14.2   102.0.5005.115   35154\nv19.0.4    2022-06-08            no   106   16.14.2   102.0.5005.63    164908\nv19.0.3    2022-06-03            no   106   16.14.2   102.0.5005.63    104142\nv19.0.2    2022-06-01            no   106   16.14.2   102.0.5005.63    41265\nv19.0.1    2022-05-25            no   106   16.14.2   102.0.5005.61    57614\nv19.0.0    2022-05-23            no   106   16.14.2   102.0.5005.61    73212",charsets:{},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v20版本关系",frontmatter:{title:"v20版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/d93161/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/020.v20.html",relativePath:"05.知识点/040.版本关系/020.v20.md",key:"v-eefa1536",path:"/pages/d93161/",headersStr:null,content:"V20.3.2   2022-10-12   20-X-Y   NO   107   16.15.0   104.0.5112.124   4639\nv20.3.1   2022-10-05            no   107   16.15.0   104.0.5112.124   10594\nv20.3.0   2022-09-28            no   107   16.15.0   104.0.5112.124   14089\nv20.2.0   2022-09-22            no   107   16.15.0   104.0.5112.124   59968\nv20.1.4   2022-09-14            no   107   16.15.0   104.0.5112.114   91092\nv20.1.3   2022-09-08            no   107   16.15.0   104.0.5112.114   69290\nv20.1.2   2022-09-07            no   107   16.15.0   104.0.5112.114   18190\nv20.1.1   2022-08-31            no   107   16.15.0   104.0.5112.102   73605\nv20.1.0   2022-08-24            no   107   16.15.0   104.0.5112.102   66492\nv20.0.3   2022-08-17            no   107   16.15.0   104.0.5112.81    116265\nv20.0.2   2022-08-10            no   107   16.15.0   104.0.5112.81    104477\nv20.0.1   2022-08-03            no   107   16.15.0   104.0.5112.81    96531\nv20.0.0   2022-08-01            no   107   16.15.0   104.0.5112.65    48890",normalizedContent:"v20.3.2   2022-10-12   20-x-y   no   107   16.15.0   104.0.5112.124   4639\nv20.3.1   2022-10-05            no   107   16.15.0   104.0.5112.124   10594\nv20.3.0   2022-09-28            no   107   16.15.0   104.0.5112.124   14089\nv20.2.0   2022-09-22            no   107   16.15.0   104.0.5112.124   59968\nv20.1.4   2022-09-14            no   107   16.15.0   104.0.5112.114   91092\nv20.1.3   2022-09-08            no   107   16.15.0   104.0.5112.114   69290\nv20.1.2   2022-09-07            no   107   16.15.0   104.0.5112.114   18190\nv20.1.1   2022-08-31            no   107   16.15.0   104.0.5112.102   73605\nv20.1.0   2022-08-24            no   107   16.15.0   104.0.5112.102   66492\nv20.0.3   2022-08-17            no   107   16.15.0   104.0.5112.81    116265\nv20.0.2   2022-08-10            no   107   16.15.0   104.0.5112.81    104477\nv20.0.1   2022-08-03            no   107   16.15.0   104.0.5112.81    96531\nv20.0.0   2022-08-01            no   107   16.15.0   104.0.5112.65    48890",charsets:{},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"v21版本关系",frontmatter:{title:"v21版本关系",date:"2023-04-19T11:12:20.000Z",permalink:"/pages/4fce33/",article:!1},regularPath:"/05.%E7%9F%A5%E8%AF%86%E7%82%B9/040.%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/021.v21.html",relativePath:"05.知识点/040.版本关系/021.v21.md",key:"v-4d3460a5",path:"/pages/4fce33/",headersStr:null,content:"V21.1.1   2022-10-12   LATEST, 21-X-Y   NO   109   16.16.0   106.0.5249.103   25430\nv21.1.0   2022-10-05                    no   109   16.16.0   106.0.5249.91    52353\nv21.0.1   2022-09-28                    no   109   16.16.0   106.0.5249.61    68818\nv21.0.0   2022-09-26                    no   109   16.16.0   106.0.5249.51    22467",normalizedContent:"v21.1.1   2022-10-12   latest, 21-x-y   no   109   16.16.0   106.0.5249.103   25430\nv21.1.0   2022-10-05                    no   109   16.16.0   106.0.5249.91    52353\nv21.0.1   2022-09-28                    no   109   16.16.0   106.0.5249.61    68818\nv21.0.0   2022-09-26                    no   109   16.16.0   106.0.5249.51    22467",charsets:{},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"外包服务",frontmatter:{title:"外包服务",date:"2023-06-12T11:12:19.000Z",article:!1,permalink:"/pages/9365a8/"},regularPath:"/06.%E6%94%AF%E6%8C%81/015.%E5%A4%96%E5%8C%85.html",relativePath:"06.支持/015.外包.md",key:"v-8109bfa4",path:"/pages/9365a8/",headersStr:null,content:"# 项目外包\n\n我们也是接外包滴，如果你有项目想要外包，可以微信联系【gsx530353222】。\n\n团队包含专业的项目经理、架构师、前端工程师、后端工程师、测试工程师、运维工程师，可以提供全流程的外包服务。\n\n项目可以是商城、SCRM 系统、OA 系统、物流系统、ERP 系统、CMS 系统、HIS 系统、支付系统、IM 聊天、微信公众号、微信小程序等等。",normalizedContent:"# 项目外包\n\n我们也是接外包滴，如果你有项目想要外包，可以微信联系【gsx530353222】。\n\n团队包含专业的项目经理、架构师、前端工程师、后端工程师、测试工程师、运维工程师，可以提供全流程的外包服务。\n\n项目可以是商城、scrm 系统、oa 系统、物流系统、erp 系统、cms 系统、his 系统、支付系统、im 聊天、微信公众号、微信小程序等等。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"个人赞助",frontmatter:{title:"个人赞助",date:"2023-05-01T11:12:19.000Z",permalink:"/pages/cce31f/",article:!1},regularPath:"/06.%E6%94%AF%E6%8C%81/018.%E4%B8%AA%E4%BA%BA%E8%B5%9E%E5%8A%A9.html",relativePath:"06.支持/018.个人赞助.md",key:"v-7248d847",path:"/pages/cce31f/",headers:[{level:2,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:232},{level:2,title:"赞助者列表",slug:"赞助者列表",normalizedTitle:"赞助者列表",charIndex:274}],headersStr:"说明 赞助者列表",content:"# 个人赞助\n\nElectron-Egg 从 20 年末开源至今，已经广泛应用于医疗、学校、政务、股票交易、ERP、娱乐、企业等领域客户端。\n\n我们会长期坚持去完善这个项目，希望 Electron-Egg 能够服务更多的开发者及公司。\n\n您可以通过如下方式支持我们：\n\n 1. Star 并向您的朋友推荐或分享 Electron-Egg\n 2. 轻轻点击一次文档中最上面的广告（将当前域名加入广告拦截器的白名单）\n 3. 广告投放\n\n❤️ 非常感谢！❤️\n\n\n# 说明\n\n赞赏金额   服务时长   服务备注\n任意金额   永久     您将获得 赞助者列表 的永久留名。\n\n注意\n\n上述赞赏仅适合于个人场景\n\n----------------------------------------\n\n如果想获得 Electron-Egg 首页 以及 文档所有页面 广告栏位展示，请加联系方式询问。\n\n\n# 赞助者列表\n\n日期           渠道      金额    昵称         备注\n2023-04-03   gitee   10    吴嘉杰        感谢您的开源项目！\n2023-04-02   gitee   10    冯渊         感谢您的开源项目！\n2023-03-30   gitee   50    yundmb     感谢您的开源项目！\n2022-06-06   gitee   30    MastyJay   感谢您的开源项目！\n2022-03-01   gitee   100   nielz      感谢您的开源项目！\n2021-05-07   gitee   1     main2018   感谢您的开源项目！\n2022-07-15   微信      99    亮          感谢您的开源项目！\n2022-07-03   微信      79    蟹黄小笼包      感谢您的开源项目！\n2022-06-09   微信      79    好好学习天天向上   感谢您的开源项目！\n2022-05-11   微信      79    王兴荣        感谢您的开源项目！\n2022-03-22   微信      79    小猫两三只      感谢您的开源项目！\n2022-01-19   微信      79    bss        感谢您的开源项目！\n2021-09-06   qq      30    阿泽诶        感谢您的开源项目！\n2021-08-31   qq      50    涉川         感谢您的开源项目！\n2021-09-06   qq      20    李不知道       感谢您的开源项目！\n2021-09-06   qq      20    主旋律        感谢您的开源项目！\n2022-12-29   qq      90    紫天晨        感谢您的开源项目！\n2023-05-21   qq      30    Thui       感谢您的开源项目！\n......                                ",normalizedContent:"# 个人赞助\n\nelectron-egg 从 20 年末开源至今，已经广泛应用于医疗、学校、政务、股票交易、erp、娱乐、企业等领域客户端。\n\n我们会长期坚持去完善这个项目，希望 electron-egg 能够服务更多的开发者及公司。\n\n您可以通过如下方式支持我们：\n\n 1. star 并向您的朋友推荐或分享 electron-egg\n 2. 轻轻点击一次文档中最上面的广告（将当前域名加入广告拦截器的白名单）\n 3. 广告投放\n\n❤️ 非常感谢！❤️\n\n\n# 说明\n\n赞赏金额   服务时长   服务备注\n任意金额   永久     您将获得 赞助者列表 的永久留名。\n\n注意\n\n上述赞赏仅适合于个人场景\n\n----------------------------------------\n\n如果想获得 electron-egg 首页 以及 文档所有页面 广告栏位展示，请加联系方式询问。\n\n\n# 赞助者列表\n\n日期           渠道      金额    昵称         备注\n2023-04-03   gitee   10    吴嘉杰        感谢您的开源项目！\n2023-04-02   gitee   10    冯渊         感谢您的开源项目！\n2023-03-30   gitee   50    yundmb     感谢您的开源项目！\n2022-06-06   gitee   30    mastyjay   感谢您的开源项目！\n2022-03-01   gitee   100   nielz      感谢您的开源项目！\n2021-05-07   gitee   1     main2018   感谢您的开源项目！\n2022-07-15   微信      99    亮          感谢您的开源项目！\n2022-07-03   微信      79    蟹黄小笼包      感谢您的开源项目！\n2022-06-09   微信      79    好好学习天天向上   感谢您的开源项目！\n2022-05-11   微信      79    王兴荣        感谢您的开源项目！\n2022-03-22   微信      79    小猫两三只      感谢您的开源项目！\n2022-01-19   微信      79    bss        感谢您的开源项目！\n2021-09-06   qq      30    阿泽诶        感谢您的开源项目！\n2021-08-31   qq      50    涉川         感谢您的开源项目！\n2021-09-06   qq      20    李不知道       感谢您的开源项目！\n2021-09-06   qq      20    主旋律        感谢您的开源项目！\n2022-12-29   qq      90    紫天晨        感谢您的开源项目！\n2023-05-21   qq      30    thui       感谢您的开源项目！\n......                                ",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"成为赞助商",frontmatter:{title:"成为赞助商",date:"2023-05-01T11:12:19.000Z",permalink:"/pages/fe2b29/",article:!1},regularPath:"/06.%E6%94%AF%E6%8C%81/020.%E6%88%90%E4%B8%BA%E8%B5%9E%E5%8A%A9%E5%95%86.html",relativePath:"06.支持/020.成为赞助商.md",key:"v-a2020f60",path:"/pages/fe2b29/",headers:[{level:2,title:"用爱发电",slug:"用爱发电",normalizedTitle:"用爱发电",charIndex:2},{level:2,title:"赞助商广告",slug:"赞助商广告",normalizedTitle:"赞助商广告",charIndex:122}],headersStr:"用爱发电 赞助商广告",content:"# 用爱发电\n\nElectron-Egg 从 20 年末开源至今，已经广泛应用于医疗、学校、政务、股票交易、ERP、娱乐、企业等领域客户端。\n\n我们会长期坚持去完善这个项目，希望 Electron-Egg 能够服务更多的开发者及公司。\n\n\n# 赞助商广告\n\nElectron-Egg是开源的项目，但我们每年都在支付第三方域名，云服务器，CDN流量费，推广开发费用。为了项目能够健康长久的发展下去，我们在官网提供多个赞助商广告位。\n\n如您在Electron-Egg官网投放广告，可获得 首页 以及 文档所有页面 的展示。\n\n合作方式：\n\n * 合作费用：请加联系方式询问\n * 微信：gsx530353222\n * QQ：530353222\n * 电子邮箱：530353222@qq.com\n\n准备材料：\n\n * 首页特别赞助 LOGO 图：大小控制在 100k 以内\n * 首页特别赞助描述文字：一段不超过 30 字的简单介绍\n * 文档页 banner 图片格式：440px X 120px（3~4:1），支持gif动图，大小控制在500KB以内\n * 链接URL格式：https://xxx.com",normalizedContent:"# 用爱发电\n\nelectron-egg 从 20 年末开源至今，已经广泛应用于医疗、学校、政务、股票交易、erp、娱乐、企业等领域客户端。\n\n我们会长期坚持去完善这个项目，希望 electron-egg 能够服务更多的开发者及公司。\n\n\n# 赞助商广告\n\nelectron-egg是开源的项目，但我们每年都在支付第三方域名，云服务器，cdn流量费，推广开发费用。为了项目能够健康长久的发展下去，我们在官网提供多个赞助商广告位。\n\n如您在electron-egg官网投放广告，可获得 首页 以及 文档所有页面 的展示。\n\n合作方式：\n\n * 合作费用：请加联系方式询问\n * 微信：gsx530353222\n * qq：530353222\n * 电子邮箱：530353222@qq.com\n\n准备材料：\n\n * 首页特别赞助 logo 图：大小控制在 100k 以内\n * 首页特别赞助描述文字：一段不超过 30 字的简单介绍\n * 文档页 banner 图片格式：440px x 120px（3~4:1），支持gif动图，大小控制在500kb以内\n * 链接url格式：https://xxx.com",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"入门指引",frontmatter:{title:"入门指引",date:"2023-05-12T16:24:06.000Z",article:!1,permalink:"/pages/132909/"},regularPath:"/07.%E5%8A%9F%E8%83%BD/01.%E6%95%99%E7%A8%8B/01.%E4%BB%8B%E7%BB%8D.html",relativePath:"07.功能/01.教程/01.介绍.md",key:"v-79d8519c",path:"/pages/132909/",headers:[{level:3,title:"demo分类",slug:"demo分类",normalizedTitle:"demo分类",charIndex:62},{level:3,title:"如何运行",slug:"如何运行",normalizedTitle:"如何运行",charIndex:154}],headersStr:"demo分类 如何运行",content:"当前教程将介绍业务功能demo。目的是为了让开发者快速熟悉electron-egg框架，以及了解桌面软件常用功能。\n\n\n# demo分类\n\n框架 ：提供框架API的使用demo\n\n操作系统 ：提供常见桌面软件功能demo\n\n硬件 ：提供连接硬件设备demo\n\n特效 ：提供一些软件特效的实现demo\n\n\n# 如何运行\n\n 1. 下载项目\n\n# gitee\ngit clone https://gitee.com/dromara/electron-egg.git\n\n# github\ngit clone https://github.com/dromara/electron-egg.git\n\n\n 2. 检出demo分支并切换\n\ngit checkout -b demo remotes/origin/demo\n\n\n 3. 安装并运行\n\n注：better-sqlite3安装问题\n\n# 安装依赖\nnpm i\n\n# 预发布模块式查看效果\nnpm run start\n\n\n 4. 开发模式\n\n# 进入【前端目录】安装依赖 并 启动前端服务\ncd frontend \nnpm install\nnpm run serve\n\n# 启动主进程服务\ncd ..\nnpm run dev\n\n\n说明\n\n随着demo的增多，不可避免的安装了很多第三方模块。因此单独划分了demo分支，用来展示效果。\n\n主分支仅保留必要的依赖。",normalizedContent:"当前教程将介绍业务功能demo。目的是为了让开发者快速熟悉electron-egg框架，以及了解桌面软件常用功能。\n\n\n# demo分类\n\n框架 ：提供框架api的使用demo\n\n操作系统 ：提供常见桌面软件功能demo\n\n硬件 ：提供连接硬件设备demo\n\n特效 ：提供一些软件特效的实现demo\n\n\n# 如何运行\n\n 1. 下载项目\n\n# gitee\ngit clone https://gitee.com/dromara/electron-egg.git\n\n# github\ngit clone https://github.com/dromara/electron-egg.git\n\n\n 2. 检出demo分支并切换\n\ngit checkout -b demo remotes/origin/demo\n\n\n 3. 安装并运行\n\n注：better-sqlite3安装问题\n\n# 安装依赖\nnpm i\n\n# 预发布模块式查看效果\nnpm run start\n\n\n 4. 开发模式\n\n# 进入【前端目录】安装依赖 并 启动前端服务\ncd frontend \nnpm install\nnpm run serve\n\n# 启动主进程服务\ncd ..\nnpm run dev\n\n\n说明\n\n随着demo的增多，不可避免的安装了很多第三方模块。因此单独划分了demo分支，用来展示效果。\n\n主分支仅保留必要的依赖。",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"通信",frontmatter:{title:"通信",date:"2023-05-12T16:24:06.000Z",article:!1,permalink:"/pages/bb3659/"},regularPath:"/07.%E5%8A%9F%E8%83%BD/02.%E6%A1%86%E6%9E%B6/01.%E9%80%9A%E4%BF%A1.html",relativePath:"07.功能/02.框架/01.通信.md",key:"v-4db28903",path:"/pages/bb3659/",headers:[{level:3,title:"发送异步消息",slug:"发送异步消息",normalizedTitle:"发送异步消息",charIndex:29},{level:3,title:"同步消息",slug:"同步消息",normalizedTitle:"同步消息",charIndex:626},{level:3,title:"长消息",slug:"长消息",normalizedTitle:"长消息",charIndex:1051},{level:3,title:"多窗口通信",slug:"多窗口通信",normalizedTitle:"多窗口通信",charIndex:1897},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:3466}],headersStr:"发送异步消息 同步消息 长消息 多窗口通信 完整代码",content:"前端（渲染进程）与 主进程 通信 - ipc\n\n\n\n\n# 发送异步消息\n\n（推荐）异步回调\n\n// frontend/src/views/framework/socket/Ipc.vue\n<script>\n  import { ipcApiRoute } from '@/api/main'\n  handleInvoke () {\n    this.$ipc.invoke(ipcApiRoute.ipcInvokeMsg, '异步-回调').then(r => {\n      console.log('r:', r);\n    });\n  },\n  async handleInvoke2 () {\n    const msg = await this.$ipc.invoke(ipcApiRoute.ipcInvokeMsg, '异步');\n    console.log('msg:', msg);\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 异步消息类型\n */\nasync ipcInvokeMsg(args, event) {\n  let timeNow = dayjs().format('YYYY-MM-DD HH:mm:ss');\n  const data = args + ' - ' + timeNow;\n  return data;\n}\n\n\n\n# 同步消息\n\n（不推荐）阻塞执行。任何错误都可能引起界面卡死。\n\n// frontend/src/views/framework/socket/Ipc.vue\n<script>\n  handleSendSync () {\n    const msg = this.$ipc.sendSync(ipcApiRoute.ipcSendSyncMsg, '同步');\n    this.message3 = msg;\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n  * 同步消息类型\n  */ \nasync ipcSendSyncMsg(args) {\n  let timeNow = dayjs().format('YYYY-MM-DD HH:mm:ss');\n  const data = args + ' - ' + timeNow;\n  return data;\n}\n\n\n\n# 长消息\n\n服务端持续向前端页面发消息\n\n// frontend/src/views/framework/socket/Ipc.vue\n<script>\n  init () {\n    // 避免重复监听，或者将 on 功能写到一个统一的地方，只加载一次\n    this.$ipc.removeAllListeners(ipcApiRoute.ipcSendMsg);\n    this.$ipc.on(ipcApiRoute.ipcSendMsg, (event, result) => {\n      console.log('[ipcRenderer] [socketMsgStart] result:', result);\n    })\n  },\n  sendMsgStart() {\n    const params = {\n      type: 'start',\n      content: '开始'\n    }\n    this.$ipc.send(ipcApiRoute.ipcSendMsg, params)\n  },\n  sendMsgStop() {\n    const params = {\n      type: 'end',\n      content: ''\n    }\n    this.$ipc.send(ipcApiRoute.ipcSendMsg, params)\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 双向异步通信\n */\nasync ipcSendMsg(args, event) {\n  const { type, content } = args;\n  const data = await this.service.framework.bothWayMessage(type, content, event);\n  return data;\n}\n\n\n\n# 多窗口通信\n\n子窗口与主进程通信，子窗口互相通信\n\n// frontend/src/views/framework/socket/Ipc.vue\n<script>\n  createWindow(index) {\n    this.$ipc.invoke(ipcApiRoute.createWindow, this.views[index]).then(id => {\n      console.log('[createWindow] id:', id);\n    })\n  },\n  async sendTosubWindow() {\n    // 新窗口id\n    this.newWcId = await this.$ipc.invoke(ipcApiRoute.getWCid, this.windowName);\n    this.$ipc.sendTo(this.newWcId, specialIpcRoute.window1ToWindow2, '窗口1通过 sendTo 给窗口2发送消息');\n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 打开新窗口\n */\ncreateWindow (args) {\n  const { type, content, windowName, windowTitle } = args;\n  let contentUrl = null;\n  if (type == 'html') {\n    contentUrl = path.join('file://', electronApp.getAppPath(), content)\n  } else if (type == 'web') {\n    contentUrl = content;\n  } else if (type == 'vue') {\n    let addr = 'http://localhost:8080'\n    if (Ps.isProd()) {\n      const mainServer = Conf.getValue('mainServer');\n      addr = mainServer.protocol + mainServer.host + ':' + mainServer.port;\n    }\n    contentUrl = addr + content;\n  } else {\n    // some\n  }\n  console.log('contentUrl: ', contentUrl);\n  const addonWindow = this.app.addon.window;\n  let opt = {\n    title: windowTitle\n  }\n  const win = addonWindow.create(windowName, opt);\n  const winContentsId = win.webContents.id;\n  // load page\n  win.loadURL(contentUrl);\n  return winContentsId;\n}\n/**\n * 获取窗口contents id\n */\ngetWCid (args) {\n  const addonWindow = this.app.addon.window;\n  // 主窗口的name默认是main，其它窗口name开发者自己定义\n  const name = args;\n  const id = addonWindow.getWCid(name);\n  return id;\n}\n\n\n\n# 完整代码\n\n * github前端代码 -\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"前端（渲染进程）与 主进程 通信 - ipc\n\n\n\n\n# 发送异步消息\n\n（推荐）异步回调\n\n// frontend/src/views/framework/socket/ipc.vue\n<script>\n  import { ipcapiroute } from '@/api/main'\n  handleinvoke () {\n    this.$ipc.invoke(ipcapiroute.ipcinvokemsg, '异步-回调').then(r => {\n      console.log('r:', r);\n    });\n  },\n  async handleinvoke2 () {\n    const msg = await this.$ipc.invoke(ipcapiroute.ipcinvokemsg, '异步');\n    console.log('msg:', msg);\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 异步消息类型\n */\nasync ipcinvokemsg(args, event) {\n  let timenow = dayjs().format('yyyy-mm-dd hh:mm:ss');\n  const data = args + ' - ' + timenow;\n  return data;\n}\n\n\n\n# 同步消息\n\n（不推荐）阻塞执行。任何错误都可能引起界面卡死。\n\n// frontend/src/views/framework/socket/ipc.vue\n<script>\n  handlesendsync () {\n    const msg = this.$ipc.sendsync(ipcapiroute.ipcsendsyncmsg, '同步');\n    this.message3 = msg;\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n  * 同步消息类型\n  */ \nasync ipcsendsyncmsg(args) {\n  let timenow = dayjs().format('yyyy-mm-dd hh:mm:ss');\n  const data = args + ' - ' + timenow;\n  return data;\n}\n\n\n\n# 长消息\n\n服务端持续向前端页面发消息\n\n// frontend/src/views/framework/socket/ipc.vue\n<script>\n  init () {\n    // 避免重复监听，或者将 on 功能写到一个统一的地方，只加载一次\n    this.$ipc.removealllisteners(ipcapiroute.ipcsendmsg);\n    this.$ipc.on(ipcapiroute.ipcsendmsg, (event, result) => {\n      console.log('[ipcrenderer] [socketmsgstart] result:', result);\n    })\n  },\n  sendmsgstart() {\n    const params = {\n      type: 'start',\n      content: '开始'\n    }\n    this.$ipc.send(ipcapiroute.ipcsendmsg, params)\n  },\n  sendmsgstop() {\n    const params = {\n      type: 'end',\n      content: ''\n    }\n    this.$ipc.send(ipcapiroute.ipcsendmsg, params)\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 双向异步通信\n */\nasync ipcsendmsg(args, event) {\n  const { type, content } = args;\n  const data = await this.service.framework.bothwaymessage(type, content, event);\n  return data;\n}\n\n\n\n# 多窗口通信\n\n子窗口与主进程通信，子窗口互相通信\n\n// frontend/src/views/framework/socket/ipc.vue\n<script>\n  createwindow(index) {\n    this.$ipc.invoke(ipcapiroute.createwindow, this.views[index]).then(id => {\n      console.log('[createwindow] id:', id);\n    })\n  },\n  async sendtosubwindow() {\n    // 新窗口id\n    this.newwcid = await this.$ipc.invoke(ipcapiroute.getwcid, this.windowname);\n    this.$ipc.sendto(this.newwcid, specialipcroute.window1towindow2, '窗口1通过 sendto 给窗口2发送消息');\n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 打开新窗口\n */\ncreatewindow (args) {\n  const { type, content, windowname, windowtitle } = args;\n  let contenturl = null;\n  if (type == 'html') {\n    contenturl = path.join('file://', electronapp.getapppath(), content)\n  } else if (type == 'web') {\n    contenturl = content;\n  } else if (type == 'vue') {\n    let addr = 'http://localhost:8080'\n    if (ps.isprod()) {\n      const mainserver = conf.getvalue('mainserver');\n      addr = mainserver.protocol + mainserver.host + ':' + mainserver.port;\n    }\n    contenturl = addr + content;\n  } else {\n    // some\n  }\n  console.log('contenturl: ', contenturl);\n  const addonwindow = this.app.addon.window;\n  let opt = {\n    title: windowtitle\n  }\n  const win = addonwindow.create(windowname, opt);\n  const wincontentsid = win.webcontents.id;\n  // load page\n  win.loadurl(contenturl);\n  return wincontentsid;\n}\n/**\n * 获取窗口contents id\n */\ngetwcid (args) {\n  const addonwindow = this.app.addon.window;\n  // 主窗口的name默认是main，其它窗口name开发者自己定义\n  const name = args;\n  const id = addonwindow.getwcid(name);\n  return id;\n}\n\n\n\n# 完整代码\n\n * github前端代码 -\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"http服务",frontmatter:{title:"http服务",date:"2023-05-12T16:27:59.000Z",permalink:"/pages/67c56b/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/02.%E6%A1%86%E6%9E%B6/02.http%E6%9C%8D%E5%8A%A1.html",relativePath:"07.功能/02.框架/02.http服务.md",key:"v-f1bc02ba",path:"/pages/67c56b/",headers:[{level:3,title:"发送http请求到主进程",slug:"发送http请求到主进程",normalizedTitle:"发送http请求到主进程",charIndex:28},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:971}],headersStr:"发送http请求到主进程 完整代码",content:"前端（渲染进程）与主进程通信 - http\n\n\n\n\n# 发送http请求到主进程\n\n内置http server服务\n\n特点：可在前端（渲染进程）、浏览器、终端命令（curl）等，跨界访问主进程的方法。\n\n// frontend/src/views/framework/socket/HttpServer.vue\nimport { ipcApiRoute, requestHttp } from '@/api/main'\n<script>\n  sendRequest () {\n    // 打开【我的图片】\n    requestHttp(ipcApiRoute.doHttpRequest, {id: 'pictures'}).then(res => {\n      //console.log('res:', res)\n    })\n  },  \n<\/script> \n\n\n// electron/controller/framework.js\nconst { app: electronApp, shell } = require('electron');\n/**\n * 一个http请求访问此方法\n */ \nasync doHttpRequest() {\n  // http方法\n  const method = this.app.request.method;\n  // http get 参数\n  let params = this.app.request.query;\n  params = (params instanceof Object) ? params : JSON.parse(JSON.stringify(params));\n  // http post 参数\n  const body = this.app.request.body;\n  const httpInfo = {\n    method,\n    params,\n    body\n  }\n  if (!body.id) {\n    return false;\n  }\n  const dir = electronApp.getPath(body.id);\n  shell.openPath(dir);\n  return true;\n} \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"前端（渲染进程）与主进程通信 - http\n\n\n\n\n# 发送http请求到主进程\n\n内置http server服务\n\n特点：可在前端（渲染进程）、浏览器、终端命令（curl）等，跨界访问主进程的方法。\n\n// frontend/src/views/framework/socket/httpserver.vue\nimport { ipcapiroute, requesthttp } from '@/api/main'\n<script>\n  sendrequest () {\n    // 打开【我的图片】\n    requesthttp(ipcapiroute.dohttprequest, {id: 'pictures'}).then(res => {\n      //console.log('res:', res)\n    })\n  },  \n<\/script> \n\n\n// electron/controller/framework.js\nconst { app: electronapp, shell } = require('electron');\n/**\n * 一个http请求访问此方法\n */ \nasync dohttprequest() {\n  // http方法\n  const method = this.app.request.method;\n  // http get 参数\n  let params = this.app.request.query;\n  params = (params instanceof object) ? params : json.parse(json.stringify(params));\n  // http post 参数\n  const body = this.app.request.body;\n  const httpinfo = {\n    method,\n    params,\n    body\n  }\n  if (!body.id) {\n    return false;\n  }\n  const dir = electronapp.getpath(body.id);\n  shell.openpath(dir);\n  return true;\n} \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"socket服务",frontmatter:{title:"socket服务",date:"2023-05-12T16:28:17.000Z",permalink:"/pages/3703d6/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/02.%E6%A1%86%E6%9E%B6/03.socket%E6%9C%8D%E5%8A%A1.html",relativePath:"07.功能/02.框架/03.socket服务.md",key:"v-a7b481ba",path:"/pages/3703d6/",headers:[{level:3,title:"内置websocket服务",slug:"内置websocket服务",normalizedTitle:"内置websocket服务",charIndex:33},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:735}],headersStr:"内置websocket服务 完整代码",content:"前端（渲染进程）与主进程通信 - websocket\n\n\n\n\n# 内置websocket服务\n\n利用websocket与主进程通信\n\n// frontend/src/views/framework/socket/SocketServer.vue\n<script>\n  import { io } from 'socket.io-client'\n  import { ipcApiRoute } from '@/api/main'\n  sendRequest () {\n    // 打开【我的图片】\n    const method = ipcApiRoute.doSocketRequest;\n    this.socket.emit('c1', { cmd: method, params: {id: 'pictures'} }, (response) => {\n      console.log('response:', response)\n    });\n  }, \n<\/script> \n\n\n// electron/controller/framework.js\nconst { app: electronApp, shell } = require('electron');\n/**\n * 一个socket io请求访问此方法\n */ \nasync doSocketRequest(args) {\n  if (!args.id) {\n    return false;\n  }\n  const dir = electronApp.getPath(args.id);\n  shell.openPath(dir);\n  return true;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"前端（渲染进程）与主进程通信 - websocket\n\n\n\n\n# 内置websocket服务\n\n利用websocket与主进程通信\n\n// frontend/src/views/framework/socket/socketserver.vue\n<script>\n  import { io } from 'socket.io-client'\n  import { ipcapiroute } from '@/api/main'\n  sendrequest () {\n    // 打开【我的图片】\n    const method = ipcapiroute.dosocketrequest;\n    this.socket.emit('c1', { cmd: method, params: {id: 'pictures'} }, (response) => {\n      console.log('response:', response)\n    });\n  }, \n<\/script> \n\n\n// electron/controller/framework.js\nconst { app: electronapp, shell } = require('electron');\n/**\n * 一个socket io请求访问此方法\n */ \nasync dosocketrequest(args) {\n  if (!args.id) {\n    return false;\n  }\n  const dir = electronapp.getpath(args.id);\n  shell.openpath(dir);\n  return true;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"json数据库",frontmatter:{title:"json数据库",date:"2023-05-12T16:28:28.000Z",permalink:"/pages/f5a534/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/02.%E6%A1%86%E6%9E%B6/04.json%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"07.功能/02.框架/04.json数据库.md",key:"v-2ec19c8e",path:"/pages/f5a534/",headers:[{level:3,title:"增删改查数据",slug:"增删改查数据",normalizedTitle:"增删改查数据",charIndex:21},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:2085}],headersStr:"增删改查数据 完整代码",content:"jsondb数据库的常用操作\n\n\n\n\n# 增删改查数据\n\n// frontend/src/views/framework/db/Index.vue\nimport { ipcApiRoute } from '@/api/main'\n<script>\n  // ac: 'add' | 'del' | 'update' | 'get'\n  dbOperation (ac) {\n    const params = {\n      action: ac,\n      info: {\n        name: this.name,\n        age: parseInt(this.age)\n      },\n      search_age: parseInt(this.search_age),\n      update_name: this.update_name,\n      update_age: parseInt(this.update_age),\n      delete_name: this.delete_name,\n    }\n    if (ac == 'add' && this.name.length == 0) {\n      this.$message.error(`请填写数据`);\n    }\n    this.$ipc.invoke(ipcApiRoute.dbOperation, params).then(res => {\n      console.log('res:', res);\n      if (ac == 'get') {\n        if (res.result.length == 0) {\n          this.$message.error(`没有数据`);\n          return;\n        }\n        this.userList = res.result;\n      }\n      if (res.all_list.length == 0) {\n        this.all_list = ['空'];\n        return;\n      }\n      this.all_list = res.all_list;\n      this.$message.success(`success`);\n    }) \n  },\n  getAllTestData () {\n    const params = {\n      action: 'all',\n    }\n    this.$ipc.invoke(ipcApiRoute.dbOperation, params).then(res => {\n      if (res.all_list.length == 0) {\n        return false;\n      }\n      this.all_list = res.all_list;\n    }) \n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * json数据库操作\n */   \nasync dbOperation(args) {\n  const { service } = this;\n  const paramsObj = args;\n  const data = {\n    action: paramsObj.action,\n    result: null,\n    all_list: []\n  };\n  switch (paramsObj.action) {\n    case 'add' :\n      data.result = await service.storage.addTestData(paramsObj.info);;\n      break;\n    case 'del' :\n      data.result = await service.storage.delTestData(paramsObj.delete_name);;\n      break;\n    case 'update' :\n      data.result = await service.storage.updateTestData(paramsObj.update_name, paramsObj.update_age);\n      break;\n    case 'get' :\n      data.result = await service.storage.getTestData(paramsObj.search_age);\n      break;\n  }\n  data.all_list = await service.storage.getAllTestData();\n  return data;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"jsondb数据库的常用操作\n\n\n\n\n# 增删改查数据\n\n// frontend/src/views/framework/db/index.vue\nimport { ipcapiroute } from '@/api/main'\n<script>\n  // ac: 'add' | 'del' | 'update' | 'get'\n  dboperation (ac) {\n    const params = {\n      action: ac,\n      info: {\n        name: this.name,\n        age: parseint(this.age)\n      },\n      search_age: parseint(this.search_age),\n      update_name: this.update_name,\n      update_age: parseint(this.update_age),\n      delete_name: this.delete_name,\n    }\n    if (ac == 'add' && this.name.length == 0) {\n      this.$message.error(`请填写数据`);\n    }\n    this.$ipc.invoke(ipcapiroute.dboperation, params).then(res => {\n      console.log('res:', res);\n      if (ac == 'get') {\n        if (res.result.length == 0) {\n          this.$message.error(`没有数据`);\n          return;\n        }\n        this.userlist = res.result;\n      }\n      if (res.all_list.length == 0) {\n        this.all_list = ['空'];\n        return;\n      }\n      this.all_list = res.all_list;\n      this.$message.success(`success`);\n    }) \n  },\n  getalltestdata () {\n    const params = {\n      action: 'all',\n    }\n    this.$ipc.invoke(ipcapiroute.dboperation, params).then(res => {\n      if (res.all_list.length == 0) {\n        return false;\n      }\n      this.all_list = res.all_list;\n    }) \n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * json数据库操作\n */   \nasync dboperation(args) {\n  const { service } = this;\n  const paramsobj = args;\n  const data = {\n    action: paramsobj.action,\n    result: null,\n    all_list: []\n  };\n  switch (paramsobj.action) {\n    case 'add' :\n      data.result = await service.storage.addtestdata(paramsobj.info);;\n      break;\n    case 'del' :\n      data.result = await service.storage.deltestdata(paramsobj.delete_name);;\n      break;\n    case 'update' :\n      data.result = await service.storage.updatetestdata(paramsobj.update_name, paramsobj.update_age);\n      break;\n    case 'get' :\n      data.result = await service.storage.gettestdata(paramsobj.search_age);\n      break;\n  }\n  data.all_list = await service.storage.getalltestdata();\n  return data;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"sqlite数据库",frontmatter:{title:"sqlite数据库",date:"2023-05-12T16:28:26.000Z",permalink:"/pages/ed4289/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/02.%E6%A1%86%E6%9E%B6/05.sqlite%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"07.功能/02.框架/05.sqlite数据库.md",key:"v-cda616d8",path:"/pages/ed4289/",headers:[{level:3,title:"增删改查数据数据",slug:"增删改查数据数据",normalizedTitle:"增删改查数据数据",charIndex:21},{level:3,title:"修改数据文件（xx.db）的存储目录",slug:"修改数据文件-xx-db-的存储目录",normalizedTitle:"修改数据文件（xx.db）的存储目录",charIndex:2071},{level:3,title:"打开数据文件（xx.db）所在目录",slug:"打开数据文件-xx-db-所在目录",normalizedTitle:"打开数据文件（xx.db）所在目录",charIndex:2796},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:3340}],headersStr:"增删改查数据数据 修改数据文件（xx.db）的存储目录 打开数据文件（xx.db）所在目录 完整代码",content:"sqlite数据库的常用操作\n\n\n\n\n# 增删改查数据数据\n\n// frontend/src/views/framework/sqlitedb/Index.vue\n<script>\n  // ac: 'add' | 'del' | 'update' | 'get'\n  sqlitedbOperation (ac) {\n    const params = {\n      action: ac,\n      info: {\n        name: this.name,\n        age: parseInt(this.age)\n      },\n      search_age: parseInt(this.search_age),\n      update_name: this.update_name,\n      update_age: parseInt(this.update_age),\n      delete_name: this.delete_name,\n    }\n    if (ac == 'add' && this.name.length == 0) {\n      this.$message.error(`请填写数据`);\n    }\n    this.$ipc.invoke(ipcApiRoute.sqlitedbOperation, params).then(res => {\n      console.log('res:', res);\n      if (ac == 'get') {\n        if (res.result.length == 0) {\n          this.$message.error(`没有数据`);\n          return;\n        }\n        this.userList = res.result;\n      }\n      if (res.all_list.length == 0) {\n        this.all_list = ['空'];\n        return;\n      }\n      this.all_list = res.all_list;\n      this.$message.success(`success`);\n    }) \n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * sqlite数据库操作\n */   \nasync sqlitedbOperation(args) {\n  const { service } = this;\n  const paramsObj = args;\n  const data = {\n    action: paramsObj.action,\n    result: null,\n    all_list: []\n  };\n  switch (paramsObj.action) {\n    case 'add' :\n      data.result = await service.storage.addTestDataSqlite(paramsObj.info);;\n      break;\n    case 'del' :\n      data.result = await service.storage.delTestDataSqlite(paramsObj.delete_name);;\n      break;\n    case 'update' :\n      data.result = await service.storage.updateTestDataSqlite(paramsObj.update_name, paramsObj.update_age);\n      break;\n    case 'get' :\n      data.result = await service.storage.getTestDataSqlite(paramsObj.search_age);\n      break;\n    case 'getDataDir' :\n      data.result = await service.storage.getDataDir();\n      break;\n    case 'setDataDir' :\n      data.result = await service.storage.setCustomDataDir(paramsObj.data_dir);\n      break;            \n  }\n  data.all_list = await service.storage.getAllTestDataSqlite();\n  return data;\n}  \n\n\n\n# 修改数据文件（xx.db）的存储目录\n\n// frontend/src/views/framework/sqlitedb/Index.vue\n<script>\n  selectDir() {\n    this.$ipc.invoke(ipcApiRoute.selectFolder, '').then(r => {\n      this.data_dir = r;\n      // 修改数据目录\n      this.modifyDataDir(r);\n    })\n  },\n  modifyDataDir(dir) {\n    const params = {\n      action: 'setDataDir',\n      data_dir: dir\n    }\n    this.$ipc.invoke(ipcApiRoute.sqlitedbOperation, params).then(res => {\n      this.all_list = res.all_list;\n    }) \n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 选择目录\n */\nselectFolder() {\n  const filePaths = dialog.showOpenDialogSync({\n    properties: ['openDirectory', 'createDirectory']\n  });\n  if (_.isEmpty(filePaths)) {\n    return null\n  }\n  return filePaths[0];\n} \n\n\n\n# 打开数据文件（xx.db）所在目录\n\n// frontend/src/views/framework/sqlitedb/Index.vue\n<script>\n  openDir() {\n    this.$ipc.invoke(ipcApiRoute.openDirectory, {id: this.data_dir}).then(res => {\n      //\n    })\n  }, \n<\/script> \n\n\n// electron/controller/os.js\nconst { app: electronApp, shell } = require('electron');\n/**\n * 打开目录\n */\nopenDirectory(args) {\n  if (!args.id) {\n    return false;\n  }\n  let dir = '';\n  if (path.isAbsolute(args.id)) {\n    dir = args.id;\n  } else {\n    dir = electronApp.getPath(args.id);\n  }\n  shell.openPath(dir);\n  return true;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"sqlite数据库的常用操作\n\n\n\n\n# 增删改查数据数据\n\n// frontend/src/views/framework/sqlitedb/index.vue\n<script>\n  // ac: 'add' | 'del' | 'update' | 'get'\n  sqlitedboperation (ac) {\n    const params = {\n      action: ac,\n      info: {\n        name: this.name,\n        age: parseint(this.age)\n      },\n      search_age: parseint(this.search_age),\n      update_name: this.update_name,\n      update_age: parseint(this.update_age),\n      delete_name: this.delete_name,\n    }\n    if (ac == 'add' && this.name.length == 0) {\n      this.$message.error(`请填写数据`);\n    }\n    this.$ipc.invoke(ipcapiroute.sqlitedboperation, params).then(res => {\n      console.log('res:', res);\n      if (ac == 'get') {\n        if (res.result.length == 0) {\n          this.$message.error(`没有数据`);\n          return;\n        }\n        this.userlist = res.result;\n      }\n      if (res.all_list.length == 0) {\n        this.all_list = ['空'];\n        return;\n      }\n      this.all_list = res.all_list;\n      this.$message.success(`success`);\n    }) \n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * sqlite数据库操作\n */   \nasync sqlitedboperation(args) {\n  const { service } = this;\n  const paramsobj = args;\n  const data = {\n    action: paramsobj.action,\n    result: null,\n    all_list: []\n  };\n  switch (paramsobj.action) {\n    case 'add' :\n      data.result = await service.storage.addtestdatasqlite(paramsobj.info);;\n      break;\n    case 'del' :\n      data.result = await service.storage.deltestdatasqlite(paramsobj.delete_name);;\n      break;\n    case 'update' :\n      data.result = await service.storage.updatetestdatasqlite(paramsobj.update_name, paramsobj.update_age);\n      break;\n    case 'get' :\n      data.result = await service.storage.gettestdatasqlite(paramsobj.search_age);\n      break;\n    case 'getdatadir' :\n      data.result = await service.storage.getdatadir();\n      break;\n    case 'setdatadir' :\n      data.result = await service.storage.setcustomdatadir(paramsobj.data_dir);\n      break;            \n  }\n  data.all_list = await service.storage.getalltestdatasqlite();\n  return data;\n}  \n\n\n\n# 修改数据文件（xx.db）的存储目录\n\n// frontend/src/views/framework/sqlitedb/index.vue\n<script>\n  selectdir() {\n    this.$ipc.invoke(ipcapiroute.selectfolder, '').then(r => {\n      this.data_dir = r;\n      // 修改数据目录\n      this.modifydatadir(r);\n    })\n  },\n  modifydatadir(dir) {\n    const params = {\n      action: 'setdatadir',\n      data_dir: dir\n    }\n    this.$ipc.invoke(ipcapiroute.sqlitedboperation, params).then(res => {\n      this.all_list = res.all_list;\n    }) \n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 选择目录\n */\nselectfolder() {\n  const filepaths = dialog.showopendialogsync({\n    properties: ['opendirectory', 'createdirectory']\n  });\n  if (_.isempty(filepaths)) {\n    return null\n  }\n  return filepaths[0];\n} \n\n\n\n# 打开数据文件（xx.db）所在目录\n\n// frontend/src/views/framework/sqlitedb/index.vue\n<script>\n  opendir() {\n    this.$ipc.invoke(ipcapiroute.opendirectory, {id: this.data_dir}).then(res => {\n      //\n    })\n  }, \n<\/script> \n\n\n// electron/controller/os.js\nconst { app: electronapp, shell } = require('electron');\n/**\n * 打开目录\n */\nopendirectory(args) {\n  if (!args.id) {\n    return false;\n  }\n  let dir = '';\n  if (path.isabsolute(args.id)) {\n    dir = args.id;\n  } else {\n    dir = electronapp.getpath(args.id);\n  }\n  shell.openpath(dir);\n  return true;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"任务",frontmatter:{title:"任务",date:"2023-05-12T16:28:25.000Z",permalink:"/pages/98c38b/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/02.%E6%A1%86%E6%9E%B6/06.%E4%BB%BB%E5%8A%A1.html",relativePath:"07.功能/02.框架/06.任务.md",key:"v-16b2c9d1",path:"/pages/98c38b/",headers:[{level:3,title:"任务 / 并发任务",slug:"任务-并发任务",normalizedTitle:"任务 / 并发任务",charIndex:34},{level:3,title:"任务池 / 并发任务",slug:"任务池-并发任务",normalizedTitle:"任务池 / 并发任务",charIndex:1063},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:2273}],headersStr:"任务 / 并发任务 任务池 / 并发任务 完整代码",content:"执行计算密集型业务或耗时业务时，你可以用job来处理。\n\n\n\n\n# 任务 / 并发任务\n\n// frontend/src/views/framework/jobs/Index.vue\n<script>\n  runJob(jobId, operation) {\n    let params = {\n      id: jobId,\n      type: 'timer',\n      action: operation\n    }\n    this.$ipc.invoke(ipcApiRoute.someJob, params).then(data => {\n      switch (data.jobId) {\n        case 1:\n          if (data.action == 'create') {\n            this.progress1_pid = data.result.pid;\n          }\n          break;\n        case 2:\n          if (data.action == 'create') {\n            this.progress2_pid = data.result.pid;\n          }\n          break;\n      }\n    })\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 任务\n */ \nsomeJob(args, event) {\n  let jobId = args.id;\n  let action = args.action;\n  let result;\n  switch (action) {\n    case 'create':\n      result = this.service.framework.doJob(jobId, action, event);\n      break;       \n    case 'close':\n      this.service.framework.doJob(jobId, action, event);\n      break;\n    default:  \n  }\n  let data = {\n    jobId,\n    action,\n    result\n  }\n  return data;\n}\n\n\n\n# 任务池 / 并发任务\n\n// frontend/src/views/framework/jobs/Index.vue\n<script>\n  createPool() {\n    let params = {\n      number: 3,\n    }\n    this.$ipc.send(ipcApiRoute.createPool, params);\n  },\n  runJobByPool(jobId, operation) {\n    let params = {\n      id: jobId,\n      type: 'timer',\n      action: operation\n    }\n    this.$ipc.invoke(ipcApiRoute.someJobByPool, params).then(data => {\n      switch (data.jobId) {\n        case 3:\n          if (data.action == 'run') {\n            this.progress3_pid = data.result.pid;\n          }\n          break;\n        case 4:\n          if (data.action == 'run') {\n            this.progress4_pid = data.result.pid;\n          }\n          break;\n      }\n    })\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 创建任务池\n */ \nasync createPool(args, event) {\n  let num = args.number;\n  this.service.framework.doCreatePool(num, event);\n  return;\n}\n/**\n * 通过进程池执行任务\n */ \nsomeJobByPool(args, event) {\n  let jobId = args.id;\n  let action = args.action;\n  let result;\n  switch (action) {\n    case 'run':\n      result = this.service.framework.doJobByPool(jobId, action, event);\n      break;\n    default:  \n  }\n  let data = {\n    jobId,\n    action,\n    result\n  }\n  return data;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"执行计算密集型业务或耗时业务时，你可以用job来处理。\n\n\n\n\n# 任务 / 并发任务\n\n// frontend/src/views/framework/jobs/index.vue\n<script>\n  runjob(jobid, operation) {\n    let params = {\n      id: jobid,\n      type: 'timer',\n      action: operation\n    }\n    this.$ipc.invoke(ipcapiroute.somejob, params).then(data => {\n      switch (data.jobid) {\n        case 1:\n          if (data.action == 'create') {\n            this.progress1_pid = data.result.pid;\n          }\n          break;\n        case 2:\n          if (data.action == 'create') {\n            this.progress2_pid = data.result.pid;\n          }\n          break;\n      }\n    })\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 任务\n */ \nsomejob(args, event) {\n  let jobid = args.id;\n  let action = args.action;\n  let result;\n  switch (action) {\n    case 'create':\n      result = this.service.framework.dojob(jobid, action, event);\n      break;       \n    case 'close':\n      this.service.framework.dojob(jobid, action, event);\n      break;\n    default:  \n  }\n  let data = {\n    jobid,\n    action,\n    result\n  }\n  return data;\n}\n\n\n\n# 任务池 / 并发任务\n\n// frontend/src/views/framework/jobs/index.vue\n<script>\n  createpool() {\n    let params = {\n      number: 3,\n    }\n    this.$ipc.send(ipcapiroute.createpool, params);\n  },\n  runjobbypool(jobid, operation) {\n    let params = {\n      id: jobid,\n      type: 'timer',\n      action: operation\n    }\n    this.$ipc.invoke(ipcapiroute.somejobbypool, params).then(data => {\n      switch (data.jobid) {\n        case 3:\n          if (data.action == 'run') {\n            this.progress3_pid = data.result.pid;\n          }\n          break;\n        case 4:\n          if (data.action == 'run') {\n            this.progress4_pid = data.result.pid;\n          }\n          break;\n      }\n    })\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 创建任务池\n */ \nasync createpool(args, event) {\n  let num = args.number;\n  this.service.framework.docreatepool(num, event);\n  return;\n}\n/**\n * 通过进程池执行任务\n */ \nsomejobbypool(args, event) {\n  let jobid = args.id;\n  let action = args.action;\n  let result;\n  switch (action) {\n    case 'run':\n      result = this.service.framework.dojobbypool(jobid, action, event);\n      break;\n    default:  \n  }\n  let data = {\n    jobid,\n    action,\n    result\n  }\n  return data;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"自动更新",frontmatter:{title:"自动更新",date:"2023-05-12T16:28:21.000Z",permalink:"/pages/500e33/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/02.%E6%A1%86%E6%9E%B6/07.%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.html",relativePath:"07.功能/02.框架/07.自动更新.md",key:"v-1769b69b",path:"/pages/500e33/",headers:[{level:3,title:"自动更新",slug:"自动更新",normalizedTitle:"自动更新",charIndex:5},{level:3,title:"下载 & 进度",slug:"下载-进度",normalizedTitle:"下载 &amp; 进度",charIndex:null},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:1249}],headersStr:"自动更新 下载 & 进度 完整代码",content:"应用客户端自动更新\n\n\n\n\n# 自动更新\n\n// frontend/src/views/framework/updater/Index.vue\n<script>\n  checkForUpdater () {\n    this.$ipc.invoke(ipcApiRoute.checkForUpdater).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 检查是否有新版本\n */\ncheckForUpdater() { \n  const autoUpdaterAddon = this.app.addon.autoUpdater;\n  autoUpdaterAddon.checkUpdate();  \n  return;\n}\n\n\n\n# 下载 & 进度\n\n// frontend/src/views/framework/updater/Index.vue\n<script>\n  init () {\n    this.$ipc.removeAllListeners(specialIpcRoute.appUpdater);\n    this.$ipc.on(specialIpcRoute.appUpdater, (event, result) => {\n      result = JSON.parse(result);\n      this.status = result.status;\n      if (result.status == 3) {\n        this.progress = result.desc;\n        this.percentNumber = result.percentNumber;\n      } else {\n        this.$message.info(result.desc);\n      }\n    })\n  },\n  download () {\n    if (this.status !== 1) {\n      this.$message.info('没有可用版本');\n      return\n    }\n    this.$ipc.invoke(ipcApiRoute.downloadApp).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 下载新版本\n */\ndownloadApp() {\n  const autoUpdaterAddon = this.app.addon.autoUpdater;\n  autoUpdaterAddon.download();\n  return;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"应用客户端自动更新\n\n\n\n\n# 自动更新\n\n// frontend/src/views/framework/updater/index.vue\n<script>\n  checkforupdater () {\n    this.$ipc.invoke(ipcapiroute.checkforupdater).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 检查是否有新版本\n */\ncheckforupdater() { \n  const autoupdateraddon = this.app.addon.autoupdater;\n  autoupdateraddon.checkupdate();  \n  return;\n}\n\n\n\n# 下载 & 进度\n\n// frontend/src/views/framework/updater/index.vue\n<script>\n  init () {\n    this.$ipc.removealllisteners(specialipcroute.appupdater);\n    this.$ipc.on(specialipcroute.appupdater, (event, result) => {\n      result = json.parse(result);\n      this.status = result.status;\n      if (result.status == 3) {\n        this.progress = result.desc;\n        this.percentnumber = result.percentnumber;\n      } else {\n        this.$message.info(result.desc);\n      }\n    })\n  },\n  download () {\n    if (this.status !== 1) {\n      this.$message.info('没有可用版本');\n      return\n    }\n    this.$ipc.invoke(ipcapiroute.downloadapp).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 下载新版本\n */\ndownloadapp() {\n  const autoupdateraddon = this.app.addon.autoupdater;\n  autoupdateraddon.download();\n  return;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"软件调用",frontmatter:{title:"软件调用",date:"2023-05-12T16:28:19.000Z",permalink:"/pages/d5125f/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/02.%E6%A1%86%E6%9E%B6/08.%E8%BD%AF%E4%BB%B6%E8%B0%83%E7%94%A8.html",relativePath:"07.功能/02.框架/08.软件调用.md",key:"v-2f8b72a4",path:"/pages/d5125f/",headers:[{level:3,title:"调用其它软件（exe、bash等可执行程序）",slug:"调用其它软件-exe、bash等可执行程序",normalizedTitle:"调用其它软件（exe、bash等可执行程序）",charIndex:80},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:784}],headersStr:"调用其它软件（exe、bash等可执行程序） 完整代码",content:"调用第三方程序\n\n\n\n注意\n\n请先将【powershell.exe】复制到【electron-egg/build/extraResources】目录中\n\n\n# 调用其它软件（exe、bash等可执行程序）\n\n// frontend/src/views/framework/software/Index.vue\n<script>\n  openSoft (id) { \n    this.$ipc.invoke(ipcApiRoute.openSoftware, id).then(result => {\n      if (!result) {\n        this.$message.error('程序不存在');\n      }\n    })       \n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 调用其它程序（exe、bash等可执行程序）\n */\nopenSoftware(softName) {\n  if (!softName) {\n    return false;\n  }\n  let softwarePath = path.join(Ps.getExtraResourcesDir(), softName);\n  Log.info('[openSoftware] softwarePath:', softwarePath);\n  // 检查程序是否存在\n  if (!fs.existsSync(softwarePath)) {\n    return false;\n  }\n  // 命令行字符串 并 执行\n  let cmdStr = 'start ' + softwarePath;\n  exec(cmdStr);\n  return true;\n}  \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"调用第三方程序\n\n\n\n注意\n\n请先将【powershell.exe】复制到【electron-egg/build/extraresources】目录中\n\n\n# 调用其它软件（exe、bash等可执行程序）\n\n// frontend/src/views/framework/software/index.vue\n<script>\n  opensoft (id) { \n    this.$ipc.invoke(ipcapiroute.opensoftware, id).then(result => {\n      if (!result) {\n        this.$message.error('程序不存在');\n      }\n    })       \n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 调用其它程序（exe、bash等可执行程序）\n */\nopensoftware(softname) {\n  if (!softname) {\n    return false;\n  }\n  let softwarepath = path.join(ps.getextraresourcesdir(), softname);\n  log.info('[opensoftware] softwarepath:', softwarepath);\n  // 检查程序是否存在\n  if (!fs.existssync(softwarepath)) {\n    return false;\n  }\n  // 命令行字符串 并 执行\n  let cmdstr = 'start ' + softwarepath;\n  exec(cmdstr);\n  return true;\n}  \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"Java服务",frontmatter:{title:"Java服务",date:"2023-05-12T16:30:11.000Z",permalink:"/pages/56f285/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/02.%E6%A1%86%E6%9E%B6/09.Java%E6%9C%8D%E5%8A%A1.html",relativePath:"07.功能/02.框架/09.Java服务.md",key:"v-518abb43",path:"/pages/56f285/",headers:[{level:3,title:"启动/关闭java服务",slug:"启动-关闭java服务",normalizedTitle:"启动/关闭java服务",charIndex:33},{level:3,title:"测试接口",slug:"测试接口",normalizedTitle:"测试接口",charIndex:1362},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:1857}],headersStr:"启动/关闭java服务 测试接口 完整代码",content:"java功能demo，请结合 java插件模块 阅读\n\n\n\n\n# 启动/关闭java服务\n\n// frontend/src/views/framework/java/Index.vue\n<script>\n  startServer () {\n    this.$ipc.invoke(ipcApiRoute.startJavaServer, {}).then(r => {\n      if (r.code != 0) {\n        this.$message.error(r.msg);\n      } else {\n        this.$message.info('异步启动');\n      }\n    })\n  },\n  closeServer () {\n    this.$ipc.invoke(ipcApiRoute.closeJavaServer, {}).then(r => {\n      if (r.code != 0) {\n        this.$message.error(r.msg);\n      }\n      this.$message.info('异步关闭');\n    })\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 启动java项目\n */ \nasync startJavaServer() {\n  let data = {\n    code: 0,\n    msg: '',\n    server: ''\n  }\n  const javaCfg = Conf.getValue('addons.javaServer') || {};\n  if (!javaCfg.enable) {\n    data.code = -1;\n    data.msg = 'addon not enabled!';\n    return data;\n  }\n  const javaServerAddon = this.app.addon.javaServer;\n  await javaServerAddon.createServer();\n  data.server = 'http://localhost:' + javaCfg.port;\n  return data;\n}\n/**\n * 关闭java项目\n */ \nasync closeJavaServer() {\n  let data = {\n    code: 0,\n    msg: '',\n  }\n  const javaCfg = Conf.getValue('addons.javaServer') || {};\n  if (!javaCfg.enable) {\n    data.code = -1;\n    data.msg = 'addon not enabled!';\n    return data;\n  }\n  const javaServerAddon = this.app.addon.javaServer;\n  await javaServerAddon.kill();\n  return data;\n}\n\n\n\n# 测试接口\n\n// frontend/src/views/framework/java/Index.vue\n<script>\n  sendRequest () {\n    const server = storage.get('javaService') || '';\n    if (server == '') {\n      this.$message.error('服务未开启 或 正在启动中');\n      return\n    }\n    let testApi = server + '/test1/get';\n    let params = {\n      url: testApi,\n      method: 'get',\n      params: { id: '1111111'},\n      timeout: 60000,\n    }\n    this.$http(params).then(res => {\n      this.$message.info(`java服务返回: ${res}`, );\n    })\n  },\n<\/script> \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"java功能demo，请结合 java插件模块 阅读\n\n\n\n\n# 启动/关闭java服务\n\n// frontend/src/views/framework/java/index.vue\n<script>\n  startserver () {\n    this.$ipc.invoke(ipcapiroute.startjavaserver, {}).then(r => {\n      if (r.code != 0) {\n        this.$message.error(r.msg);\n      } else {\n        this.$message.info('异步启动');\n      }\n    })\n  },\n  closeserver () {\n    this.$ipc.invoke(ipcapiroute.closejavaserver, {}).then(r => {\n      if (r.code != 0) {\n        this.$message.error(r.msg);\n      }\n      this.$message.info('异步关闭');\n    })\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 启动java项目\n */ \nasync startjavaserver() {\n  let data = {\n    code: 0,\n    msg: '',\n    server: ''\n  }\n  const javacfg = conf.getvalue('addons.javaserver') || {};\n  if (!javacfg.enable) {\n    data.code = -1;\n    data.msg = 'addon not enabled!';\n    return data;\n  }\n  const javaserveraddon = this.app.addon.javaserver;\n  await javaserveraddon.createserver();\n  data.server = 'http://localhost:' + javacfg.port;\n  return data;\n}\n/**\n * 关闭java项目\n */ \nasync closejavaserver() {\n  let data = {\n    code: 0,\n    msg: '',\n  }\n  const javacfg = conf.getvalue('addons.javaserver') || {};\n  if (!javacfg.enable) {\n    data.code = -1;\n    data.msg = 'addon not enabled!';\n    return data;\n  }\n  const javaserveraddon = this.app.addon.javaserver;\n  await javaserveraddon.kill();\n  return data;\n}\n\n\n\n# 测试接口\n\n// frontend/src/views/framework/java/index.vue\n<script>\n  sendrequest () {\n    const server = storage.get('javaservice') || '';\n    if (server == '') {\n      this.$message.error('服务未开启 或 正在启动中');\n      return\n    }\n    let testapi = server + '/test1/get';\n    let params = {\n      url: testapi,\n      method: 'get',\n      params: { id: '1111111'},\n      timeout: 60000,\n    }\n    this.$http(params).then(res => {\n      this.$message.info(`java服务返回: ${res}`, );\n    })\n  },\n<\/script> \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"文件",frontmatter:{title:"文件",date:"2023-05-12T16:24:18.000Z",permalink:"/pages/b44b48/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/03.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/01.%E6%96%87%E4%BB%B6.html",relativePath:"07.功能/03.操作系统/01.文件.md",key:"v-7cf65ffd",path:"/pages/b44b48/",headers:[{level:3,title:"系统原生对话框",slug:"系统原生对话框",normalizedTitle:"系统原生对话框",charIndex:21},{level:3,title:"选择目录",slug:"选择目录",normalizedTitle:"选择目录",charIndex:1011},{level:3,title:"打开文件夹",slug:"打开文件夹",normalizedTitle:"打开文件夹",charIndex:1520},{level:3,title:"上传文件到图床",slug:"上传文件到图床",normalizedTitle:"上传文件到图床",charIndex:2152},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:3588}],headersStr:"系统原生对话框 选择目录 打开文件夹 上传文件到图床 完整代码",content:"文件 & 文件夹 & 对话框\n\n\n\n\n# 系统原生对话框\n\n// frontend/src/views/os/file/Ipc.vue\n<script>\n  \tmessageShow() {\n    this.$ipc.invoke(ipcApiRoute.messageShow, '').then(r => {\n      this.$message.info(r);\n    })\n  },    \n  messageShowConfirm() {\n    this.$ipc.invoke(ipcApiRoute.messageShowConfirm, '').then(r => {\n      this.$message.info(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\nconst { dialog } = require('electron');\n/**\n * 消息提示对话框\n */\nmessageShow() {\n  dialog.showMessageBoxSync({\n    type: 'info', // \"none\", \"info\", \"error\", \"question\" 或者 \"warning\"\n    title: '自定义标题-message',\n    message: '自定义消息内容',\n    detail: '其它的额外信息'\n  })\n  return '打开了消息框';\n}\n/**\n * 消息提示与确认对话框\n */\nmessageShowConfirm() {\n  const res = dialog.showMessageBoxSync({\n    type: 'info',\n    title: '自定义标题-message',\n    message: '自定义消息内容',\n    detail: '其它的额外信息',\n    cancelId: 1, // 用于取消对话框的按钮的索引\n    defaultId: 0, // 设置默认选中的按钮\n    buttons: ['确认', '取消'], // 按钮及索引\n  })\n  let data = (res === 0) ? '点击确认按钮' : '点击取消按钮';\n  return data;\n}\n\n\n\n# 选择目录\n\n// frontend/src/views/os/file/Index.vue\n<script>\n  selectDir() {\n    this.$ipc.invoke(ipcApiRoute.selectFolder, '').then(r => {\n      this.dir_path = r;\n      this.$message.info(r);\n    })      \n  },\n<\/script> \n\n\n// electron/controller/os.js\nconst { dialog } = require('electron');\n/**\n * 选择目录\n */\nselectFolder() {\n  const filePaths = dialog.showOpenDialogSync({\n    properties: ['openDirectory', 'createDirectory']\n  });\n  if (_.isEmpty(filePaths)) {\n    return null\n  }\n  return filePaths[0];\n} \n\n\n\n# 打开文件夹\n\n// frontend/src/views/os/file/Index.vue\n<script>\n  // id: 'downloads' | 'pictures' | 'documents' | 'music'\n  openDirectry (id) {\n    this.$ipc.invoke(ipcApiRoute.openDirectory, {id: id}).then(res => {\n      //console.log('res:', res)\n    })   \n  },\n<\/script> \n\n\n// electron/controller/os.js\nconst path = require('path');\nconst { app: electronApp, shell } = require('electron');\n/**\n * 打开目录\n */\nopenDirectory(args) {\n  if (!args.id) {\n    return false;\n  }\n  let dir = '';\n  if (path.isAbsolute(args.id)) {\n    dir = args.id;\n  } else {\n    dir = electronApp.getPath(args.id);\n  }\n  shell.openPath(dir);\n  return true;\n}\n\n\n\n# 上传文件到图床\n\n// frontend/src/views/os/file/Index.vue\n<script>\n  handleFileChange(info) {\n    if (this.action_url == '') {\n      this.$message.error('http服务未开启');\n      return;\n    }\n    const status = info.file.status;\n    if (status !== 'uploading') {\n      console.log(info.file);\n    }\n    if (status === 'done') {\n      const uploadRes = info.file.response;\n      if (uploadRes.code !== 'success') {\n        this.$message.error(`file upload failed ${uploadRes.code} .`);\n        return false;\n      }\n      this.num++;\n      const picInfo = uploadRes.data;\n      picInfo.id = this.num;\n      picInfo.imageUrlText = 'image url';\n      this.image_info.push(picInfo);\n      this.$message.success(`${info.file.name} file uploaded successfully.`);\n    } else if (status === 'error') {\n      this.$message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 上传文件\n */  \nasync uploadFile() {\n  let tmpDir = Ps.getLogDir();\n  const files = this.app.request.files;\n  let file = files.file;\n  let tmpFilePath = path.join(tmpDir, file.originalFilename);\n  try {\n    let tmpFile = fs.readFileSync(file.filepath);\n    fs.writeFileSync(tmpFilePath, tmpFile);\n  } finally {\n    await fs.unlink(file.filepath, function(){});\n  }\n  const fileStream = fs.createReadStream(tmpFilePath);\n  const uploadRes = await this.service.framework.uploadFileToSMMS(fileStream);\n  return uploadRes;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"文件 & 文件夹 & 对话框\n\n\n\n\n# 系统原生对话框\n\n// frontend/src/views/os/file/ipc.vue\n<script>\n  \tmessageshow() {\n    this.$ipc.invoke(ipcapiroute.messageshow, '').then(r => {\n      this.$message.info(r);\n    })\n  },    \n  messageshowconfirm() {\n    this.$ipc.invoke(ipcapiroute.messageshowconfirm, '').then(r => {\n      this.$message.info(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\nconst { dialog } = require('electron');\n/**\n * 消息提示对话框\n */\nmessageshow() {\n  dialog.showmessageboxsync({\n    type: 'info', // \"none\", \"info\", \"error\", \"question\" 或者 \"warning\"\n    title: '自定义标题-message',\n    message: '自定义消息内容',\n    detail: '其它的额外信息'\n  })\n  return '打开了消息框';\n}\n/**\n * 消息提示与确认对话框\n */\nmessageshowconfirm() {\n  const res = dialog.showmessageboxsync({\n    type: 'info',\n    title: '自定义标题-message',\n    message: '自定义消息内容',\n    detail: '其它的额外信息',\n    cancelid: 1, // 用于取消对话框的按钮的索引\n    defaultid: 0, // 设置默认选中的按钮\n    buttons: ['确认', '取消'], // 按钮及索引\n  })\n  let data = (res === 0) ? '点击确认按钮' : '点击取消按钮';\n  return data;\n}\n\n\n\n# 选择目录\n\n// frontend/src/views/os/file/index.vue\n<script>\n  selectdir() {\n    this.$ipc.invoke(ipcapiroute.selectfolder, '').then(r => {\n      this.dir_path = r;\n      this.$message.info(r);\n    })      \n  },\n<\/script> \n\n\n// electron/controller/os.js\nconst { dialog } = require('electron');\n/**\n * 选择目录\n */\nselectfolder() {\n  const filepaths = dialog.showopendialogsync({\n    properties: ['opendirectory', 'createdirectory']\n  });\n  if (_.isempty(filepaths)) {\n    return null\n  }\n  return filepaths[0];\n} \n\n\n\n# 打开文件夹\n\n// frontend/src/views/os/file/index.vue\n<script>\n  // id: 'downloads' | 'pictures' | 'documents' | 'music'\n  opendirectry (id) {\n    this.$ipc.invoke(ipcapiroute.opendirectory, {id: id}).then(res => {\n      //console.log('res:', res)\n    })   \n  },\n<\/script> \n\n\n// electron/controller/os.js\nconst path = require('path');\nconst { app: electronapp, shell } = require('electron');\n/**\n * 打开目录\n */\nopendirectory(args) {\n  if (!args.id) {\n    return false;\n  }\n  let dir = '';\n  if (path.isabsolute(args.id)) {\n    dir = args.id;\n  } else {\n    dir = electronapp.getpath(args.id);\n  }\n  shell.openpath(dir);\n  return true;\n}\n\n\n\n# 上传文件到图床\n\n// frontend/src/views/os/file/index.vue\n<script>\n  handlefilechange(info) {\n    if (this.action_url == '') {\n      this.$message.error('http服务未开启');\n      return;\n    }\n    const status = info.file.status;\n    if (status !== 'uploading') {\n      console.log(info.file);\n    }\n    if (status === 'done') {\n      const uploadres = info.file.response;\n      if (uploadres.code !== 'success') {\n        this.$message.error(`file upload failed ${uploadres.code} .`);\n        return false;\n      }\n      this.num++;\n      const picinfo = uploadres.data;\n      picinfo.id = this.num;\n      picinfo.imageurltext = 'image url';\n      this.image_info.push(picinfo);\n      this.$message.success(`${info.file.name} file uploaded successfully.`);\n    } else if (status === 'error') {\n      this.$message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n<\/script> \n\n\n// electron/controller/framework.js\n/**\n * 上传文件\n */  \nasync uploadfile() {\n  let tmpdir = ps.getlogdir();\n  const files = this.app.request.files;\n  let file = files.file;\n  let tmpfilepath = path.join(tmpdir, file.originalfilename);\n  try {\n    let tmpfile = fs.readfilesync(file.filepath);\n    fs.writefilesync(tmpfilepath, tmpfile);\n  } finally {\n    await fs.unlink(file.filepath, function(){});\n  }\n  const filestream = fs.createreadstream(tmpfilepath);\n  const uploadres = await this.service.framework.uploadfiletosmms(filestream);\n  return uploadres;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"视图",frontmatter:{title:"视图",date:"2023-05-12T16:30:41.000Z",permalink:"/pages/7fd8ae/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/03.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/02.%E8%A7%86%E5%9B%BE.html",relativePath:"07.功能/03.操作系统/02.视图.md",key:"v-0d673e87",path:"/pages/7fd8ae/",headers:[{level:3,title:"嵌入web/html内容",slug:"嵌入web-html内容",normalizedTitle:"嵌入web/html内容",charIndex:27},{level:3,title:"移除web/html内容",slug:"移除web-html内容",normalizedTitle:"移除web/html内容",charIndex:738},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:881}],headersStr:"嵌入web/html内容 移除web/html内容 完整代码",content:"在UI页面中嵌入url页面或html页面\n\n\n\n\n# 嵌入web/html内容\n\n// frontend/src/views/os/windowview/Index.vue\n<script>\n  let views: [\n    {\n      type: 'web',\n      content: 'https://www.baidu.com/'\n    },\n    {\n      type: 'html',\n      content: '/public/html/view_example.html'\n    },        \n  ],\n  loadViewContent (index) {\n    this.$ipc.invoke(ipcApiRoute.loadViewContent, this.views[index]).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 加载视图内容\n */\nloadViewContent(args) {\n  const { type, content } = args;\n  let contentUrl = content;\n  if (type == 'html') {\n    contentUrl = path.join('file://', electronApp.getAppPath(), content);\n  }\n  this.service.os.createBrowserView(contentUrl);\n  return true\n}\n\n\n\n# 移除web/html内容\n\n// electron/controller/os.js\n/**\n * 移除视图内容\n */\nremoveViewContent() {\n  this.service.os.removeBrowserView();\n  return true\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"在ui页面中嵌入url页面或html页面\n\n\n\n\n# 嵌入web/html内容\n\n// frontend/src/views/os/windowview/index.vue\n<script>\n  let views: [\n    {\n      type: 'web',\n      content: 'https://www.baidu.com/'\n    },\n    {\n      type: 'html',\n      content: '/public/html/view_example.html'\n    },        \n  ],\n  loadviewcontent (index) {\n    this.$ipc.invoke(ipcapiroute.loadviewcontent, this.views[index]).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 加载视图内容\n */\nloadviewcontent(args) {\n  const { type, content } = args;\n  let contenturl = content;\n  if (type == 'html') {\n    contenturl = path.join('file://', electronapp.getapppath(), content);\n  }\n  this.service.os.createbrowserview(contenturl);\n  return true\n}\n\n\n\n# 移除web/html内容\n\n// electron/controller/os.js\n/**\n * 移除视图内容\n */\nremoveviewcontent() {\n  this.service.os.removebrowserview();\n  return true\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"窗口",frontmatter:{title:"窗口",date:"2023-05-12T16:30:41.000Z",permalink:"/pages/cb40d7/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/03.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/03.%E7%AA%97%E5%8F%A3.html",relativePath:"07.功能/03.操作系统/03.窗口.md",key:"v-95598034",path:"/pages/cb40d7/",headers:[{level:3,title:"新窗口中加载web内容",slug:"新窗口中加载web内容",normalizedTitle:"新窗口中加载web内容",charIndex:10},{level:3,title:"新窗口中加载html内容",slug:"新窗口中加载html内容",normalizedTitle:"新窗口中加载html内容",charIndex:1267},{level:3,title:"新窗口中加载当前项目页面",slug:"新窗口中加载当前项目页面",normalizedTitle:"新窗口中加载当前项目页面",charIndex:1686},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:2092}],headersStr:"新窗口中加载web内容 新窗口中加载html内容 新窗口中加载当前项目页面 完整代码",content:"新窗口\n\n\n\n\n# 新窗口中加载web内容\n\n// frontend/src/views/os/window/Index.vue\n<script>\n  let viewContent = {\n        type: 'web',\n        content: 'https://www.bilibili.com/',\n        windowName: 'window-web',\n        windowTitle: 'bilibili'\n  },\n  createWindow (index) {\n    this.$ipc.invoke(ipcApiRoute.createWindow, viewContent).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 打开新窗口\n */\ncreateWindow(args) {\n  const { type, content, windowName, windowTitle } = args;\n  let contentUrl = null;\n  if (type == 'html') {\n    contentUrl = path.join('file://', electronApp.getAppPath(), content)\n  } else if (type == 'web') {\n    contentUrl = content;\n  } else if (type == 'vue') {\n    let addr = 'http://localhost:8080'\n    if (Ps.isProd()) {\n      const mainServer = Conf.getValue('mainServer');\n      addr = mainServer.protocol + mainServer.host + ':' + mainServer.port;\n    }\n    contentUrl = addr + content;\n  } else {\n    // some\n  }\n  console.log('contentUrl: ', contentUrl);\n  const addonWindow = this.app.addon.window;\n  let opt = {\n    title: windowTitle\n  }\n  const win = addonWindow.create(windowName, opt);\n  const winContentsId = win.webContents.id;\n  // load page\n  win.loadURL(contentUrl);\n  return winContentsId;\n}\n\n\n\n# 新窗口中加载html内容\n\n// frontend/src/views/os/window/Index.vue\n<script>\n  let viewContent = {\n        type: 'html',\n        content: '/public/html/view_example.html',\n        windowName: 'window-html',\n        windowTitle: 'html window'\n  },\n  createWindow (index) {\n    this.$ipc.invoke(ipcApiRoute.createWindow, viewContent).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\n// 同上\n\n\n\n# 新窗口中加载当前项目页面\n\n// frontend/src/views/os/window/Index.vue\n<script>\n  let viewContent = {\n        type: 'vue',\n        content: '/#/special/subwindow',\n        windowName: 'window-vue',\n        windowTitle: 'vue window'\n  },\n  createWindow (index) {\n    this.$ipc.invoke(ipcApiRoute.createWindow, viewContent).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\n// 同上\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"新窗口\n\n\n\n\n# 新窗口中加载web内容\n\n// frontend/src/views/os/window/index.vue\n<script>\n  let viewcontent = {\n        type: 'web',\n        content: 'https://www.bilibili.com/',\n        windowname: 'window-web',\n        windowtitle: 'bilibili'\n  },\n  createwindow (index) {\n    this.$ipc.invoke(ipcapiroute.createwindow, viewcontent).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 打开新窗口\n */\ncreatewindow(args) {\n  const { type, content, windowname, windowtitle } = args;\n  let contenturl = null;\n  if (type == 'html') {\n    contenturl = path.join('file://', electronapp.getapppath(), content)\n  } else if (type == 'web') {\n    contenturl = content;\n  } else if (type == 'vue') {\n    let addr = 'http://localhost:8080'\n    if (ps.isprod()) {\n      const mainserver = conf.getvalue('mainserver');\n      addr = mainserver.protocol + mainserver.host + ':' + mainserver.port;\n    }\n    contenturl = addr + content;\n  } else {\n    // some\n  }\n  console.log('contenturl: ', contenturl);\n  const addonwindow = this.app.addon.window;\n  let opt = {\n    title: windowtitle\n  }\n  const win = addonwindow.create(windowname, opt);\n  const wincontentsid = win.webcontents.id;\n  // load page\n  win.loadurl(contenturl);\n  return wincontentsid;\n}\n\n\n\n# 新窗口中加载html内容\n\n// frontend/src/views/os/window/index.vue\n<script>\n  let viewcontent = {\n        type: 'html',\n        content: '/public/html/view_example.html',\n        windowname: 'window-html',\n        windowtitle: 'html window'\n  },\n  createwindow (index) {\n    this.$ipc.invoke(ipcapiroute.createwindow, viewcontent).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\n// 同上\n\n\n\n# 新窗口中加载当前项目页面\n\n// frontend/src/views/os/window/index.vue\n<script>\n  let viewcontent = {\n        type: 'vue',\n        content: '/#/special/subwindow',\n        windowname: 'window-vue',\n        windowtitle: 'vue window'\n  },\n  createwindow (index) {\n    this.$ipc.invoke(ipcapiroute.createwindow, viewcontent).then(r => {\n      console.log(r);\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\n// 同上\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"桌面通知",frontmatter:{title:"桌面通知",date:"2023-05-12T16:30:41.000Z",permalink:"/pages/58d5cb/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/03.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/04.%E6%A1%8C%E9%9D%A2%E9%80%9A%E7%9F%A5.html",relativePath:"07.功能/03.操作系统/04.桌面通知.md",key:"v-e8f6dcc8",path:"/pages/58d5cb/",headers:[{level:3,title:"弹出桌面通知",slug:"弹出桌面通知",normalizedTitle:"弹出桌面通知",charIndex:18},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:1365}],headersStr:"弹出桌面通知 完整代码",content:"调用操作系统通知api\n\n\n\n\n# 弹出桌面通知\n\n// frontend/src/views/os/notification/Index.vue\n<script>\n  let content = [\n      {\n        type: 'main',\n        title: '通知标题',\n        subtitle: '副标题', // macOS系统专有属性\n        body: '这是通知内容-默认',\n        silent: true,\n      },\n      {\n        type: 'main',\n        title: '提示音',\n        subtitle: '副标题-提示音',\n        body: '这是通知内容-提示音',\n        silent: false,\n      },\n      {\n        type: 'main',\n        title: '点击通知事件',\n        subtitle: '副标题-点击通知事件',\n        body: '这是通知内容-点击通知事件',\n        clickEvent: true\n      },\n      {\n        type: 'main',\n        title: '关闭通知事件',\n        subtitle: '副标题-关闭通知事件',\n        body: '这是通知内容-点击通知事件',\n        closeEvent: true\n      },             \n    ],\n  sendNotification (index) {\n    this.$ipc.send(ipcApiRoute.sendNotification, this.content[index]);\n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 创建系统通知\n */\nsendNotification(args, event) {\n  const { title, subtitle, body, silent} = args;\n  if (!Notification.isSupported()) {\n    return '当前系统不支持通知';\n  }\n  let options = {};\n  if (!_.isEmpty(title)) {\n    options.title = title;\n  }\n  if (!_.isEmpty(subtitle)) {\n    options.subtitle = subtitle;\n  }\n  if (!_.isEmpty(body)) {\n    options.body = body;\n  }\n  if (!_.isEmpty(silent)) {\n    options.silent = silent;\n  }\n  this.service.os.createNotification(options, event);\n  return true\n} \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"调用操作系统通知api\n\n\n\n\n# 弹出桌面通知\n\n// frontend/src/views/os/notification/index.vue\n<script>\n  let content = [\n      {\n        type: 'main',\n        title: '通知标题',\n        subtitle: '副标题', // macos系统专有属性\n        body: '这是通知内容-默认',\n        silent: true,\n      },\n      {\n        type: 'main',\n        title: '提示音',\n        subtitle: '副标题-提示音',\n        body: '这是通知内容-提示音',\n        silent: false,\n      },\n      {\n        type: 'main',\n        title: '点击通知事件',\n        subtitle: '副标题-点击通知事件',\n        body: '这是通知内容-点击通知事件',\n        clickevent: true\n      },\n      {\n        type: 'main',\n        title: '关闭通知事件',\n        subtitle: '副标题-关闭通知事件',\n        body: '这是通知内容-点击通知事件',\n        closeevent: true\n      },             \n    ],\n  sendnotification (index) {\n    this.$ipc.send(ipcapiroute.sendnotification, this.content[index]);\n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 创建系统通知\n */\nsendnotification(args, event) {\n  const { title, subtitle, body, silent} = args;\n  if (!notification.issupported()) {\n    return '当前系统不支持通知';\n  }\n  let options = {};\n  if (!_.isempty(title)) {\n    options.title = title;\n  }\n  if (!_.isempty(subtitle)) {\n    options.subtitle = subtitle;\n  }\n  if (!_.isempty(body)) {\n    options.body = body;\n  }\n  if (!_.isempty(silent)) {\n    options.silent = silent;\n  }\n  this.service.os.createnotification(options, event);\n  return true\n} \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"电源监控",frontmatter:{title:"电源监控",date:"2023-05-12T16:30:41.000Z",permalink:"/pages/e1061b/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/03.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/05.%E7%94%B5%E6%BA%90%E7%9B%91%E6%8E%A7.html",relativePath:"07.功能/03.操作系统/05.电源监控.md",key:"v-2dd55657",path:"/pages/e1061b/",headers:[{level:3,title:"监控电源状态",slug:"监控电源状态",normalizedTitle:"监控电源状态",charIndex:23},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:1257}],headersStr:"监控电源状态 完整代码",content:"电脑（笔记本）电源 & 锁屏状态\n\n\n\n\n# 监控电源状态\n\n * 拔掉电源，使用电池供电\n * 接入电源\n * 锁屏\n * 解锁\n\n// frontend/src/views/os/powermonitor/Index.vue\n<script>\n  init () {\n    this.$ipc.removeAllListeners(ipcApiRoute.initPowerMonitor);\n    this.$ipc.on(ipcApiRoute.initPowerMonitor, (event, result) => {\n      if (Object.prototype.toString.call(result) == '[object Object]') {\n        this.currentStatus = result.msg;\n        this.$message.info(result.msg);\n      }\n    })\n    this.$ipc.send(ipcApiRoute.initPowerMonitor, '');\n  }\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 电源监控\n */\ninitPowerMonitor(args, event) {\n  const channel = 'controller.os.initPowerMonitor';\n  powerMonitor.on('on-ac', (e) => {\n    let data = {\n      type: 'on-ac',\n      msg: '接入了电源'\n    }\n    event.reply(`${channel}`, data)\n  });\n  powerMonitor.on('on-battery', (e) => {\n    let data = {\n      type: 'on-battery',\n      msg: '使用电池中'\n    }\n    event.reply(`${channel}`, data)\n  });\n  powerMonitor.on('lock-screen', (e) => {\n    let data = {\n      type: 'lock-screen',\n      msg: '锁屏了'\n    }\n    event.reply(`${channel}`, data)\n  });\n  powerMonitor.on('unlock-screen', (e) => {\n    let data = {\n      type: 'unlock-screen',\n      msg: '解锁了'\n    }\n    event.reply(`${channel}`, data)\n  });\n  return true\n} \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"电脑（笔记本）电源 & 锁屏状态\n\n\n\n\n# 监控电源状态\n\n * 拔掉电源，使用电池供电\n * 接入电源\n * 锁屏\n * 解锁\n\n// frontend/src/views/os/powermonitor/index.vue\n<script>\n  init () {\n    this.$ipc.removealllisteners(ipcapiroute.initpowermonitor);\n    this.$ipc.on(ipcapiroute.initpowermonitor, (event, result) => {\n      if (object.prototype.tostring.call(result) == '[object object]') {\n        this.currentstatus = result.msg;\n        this.$message.info(result.msg);\n      }\n    })\n    this.$ipc.send(ipcapiroute.initpowermonitor, '');\n  }\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 电源监控\n */\ninitpowermonitor(args, event) {\n  const channel = 'controller.os.initpowermonitor';\n  powermonitor.on('on-ac', (e) => {\n    let data = {\n      type: 'on-ac',\n      msg: '接入了电源'\n    }\n    event.reply(`${channel}`, data)\n  });\n  powermonitor.on('on-battery', (e) => {\n    let data = {\n      type: 'on-battery',\n      msg: '使用电池中'\n    }\n    event.reply(`${channel}`, data)\n  });\n  powermonitor.on('lock-screen', (e) => {\n    let data = {\n      type: 'lock-screen',\n      msg: '锁屏了'\n    }\n    event.reply(`${channel}`, data)\n  });\n  powermonitor.on('unlock-screen', (e) => {\n    let data = {\n      type: 'unlock-screen',\n      msg: '解锁了'\n    }\n    event.reply(`${channel}`, data)\n  });\n  return true\n} \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"屏幕信息",frontmatter:{title:"屏幕信息",date:"2023-05-12T16:30:41.000Z",permalink:"/pages/e8890e/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/03.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/06.%E5%B1%8F%E5%B9%95%E4%BF%A1%E6%81%AF.html",relativePath:"07.功能/03.操作系统/06.屏幕信息.md",key:"v-75f026ec",path:"/pages/e8890e/",headers:[{level:3,title:"屏幕信息",slug:"屏幕信息",normalizedTitle:"屏幕信息",charIndex:14},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:1259}],headersStr:"屏幕信息 完整代码",content:"电脑显示器信息\n\n\n\n\n# 屏幕信息\n\n * 获取当前鼠标位置\n * 获取主屏幕\n * 获取所有屏幕\n\n// frontend/src/views/os/screen/Index.vue\n<script>\n  getScreen (index) {\n    this.$ipc.invoke(ipcApiRoute.getScreen, index).then(result => {\n      this.data = result;\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 获取屏幕信息\n */\ngetScreen(args) {\n  let data = [];\n  let res = {};\n  if (args == 0) {\n    let res = screen.getCursorScreenPoint();\n    data = [\n      {\n        title: '横坐标',\n        desc: res.x\n      },\n      {\n        title: '纵坐标',\n        desc: res.y\n      },\n    ]\n    return data;\n  }\n  if (args == 1) {\n    res = screen.getPrimaryDisplay();\n  }\n  if (args == 2) {\n    let resArr = screen.getAllDisplays();\n    res = resArr[0];\n  }\n  data = [\n    {\n      title: '分辨率',\n      desc: res.bounds.width + ' x ' + res.bounds.height\n    },\n    {\n      title: '单色显示器',\n      desc: res.monochrome ? '是' : '否'\n    },\n    {\n      title: '色深',\n      desc: res. colorDepth\n    },\n    {\n      title: '色域',\n      desc: res.colorSpace\n    },\n    {\n      title: 'scaleFactor',\n      desc: res.scaleFactor\n    },\n    {\n      title: '加速器',\n      desc: res.accelerometerSupport\n    },\n    {\n      title: '触控',\n      desc: res.touchSupport == 'unknown' ? '不支持' : '支持'\n    },\n  ]\n  return data;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"电脑显示器信息\n\n\n\n\n# 屏幕信息\n\n * 获取当前鼠标位置\n * 获取主屏幕\n * 获取所有屏幕\n\n// frontend/src/views/os/screen/index.vue\n<script>\n  getscreen (index) {\n    this.$ipc.invoke(ipcapiroute.getscreen, index).then(result => {\n      this.data = result;\n    })\n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 获取屏幕信息\n */\ngetscreen(args) {\n  let data = [];\n  let res = {};\n  if (args == 0) {\n    let res = screen.getcursorscreenpoint();\n    data = [\n      {\n        title: '横坐标',\n        desc: res.x\n      },\n      {\n        title: '纵坐标',\n        desc: res.y\n      },\n    ]\n    return data;\n  }\n  if (args == 1) {\n    res = screen.getprimarydisplay();\n  }\n  if (args == 2) {\n    let resarr = screen.getalldisplays();\n    res = resarr[0];\n  }\n  data = [\n    {\n      title: '分辨率',\n      desc: res.bounds.width + ' x ' + res.bounds.height\n    },\n    {\n      title: '单色显示器',\n      desc: res.monochrome ? '是' : '否'\n    },\n    {\n      title: '色深',\n      desc: res. colordepth\n    },\n    {\n      title: '色域',\n      desc: res.colorspace\n    },\n    {\n      title: 'scalefactor',\n      desc: res.scalefactor\n    },\n    {\n      title: '加速器',\n      desc: res.accelerometersupport\n    },\n    {\n      title: '触控',\n      desc: res.touchsupport == 'unknown' ? '不支持' : '支持'\n    },\n  ]\n  return data;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"系统主题",frontmatter:{title:"系统主题",date:"2023-05-12T16:30:41.000Z",permalink:"/pages/30f6b3/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/03.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/07.%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98.html",relativePath:"07.功能/03.操作系统/07.系统主题.md",key:"v-26aa7218",path:"/pages/30f6b3/",headers:[{level:3,title:"系统主题模式",slug:"系统主题模式",normalizedTitle:"系统主题模式",charIndex:2},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:797}],headersStr:"系统主题模式 完整代码",content:"电脑系统主题模式\n\n\n\n\n# 系统主题模式\n\n * system 跟随系统\n * light 明亮\n * dark 暗黑\n\n// frontend/src/views/os/theme/Index.vue\n<script>\n  setTheme (e) {\n    this.currentThemeMode = e.target.value;\n    this.$ipc.invoke(ipcApiRoute.setTheme, this.currentThemeMode).then(result => {\n      this.currentThemeMode = result;\n    })      \n  },\n  getTheme () {\n    this.$ipc.invoke(ipcApiRoute.getTheme).then(result => {\n      this.currentThemeMode = result;\n    })  \n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 获取系统主题\n */\ngetTheme() {\n  let theme = 'system';\n  if (nativeTheme.shouldUseHighContrastColors) {\n    theme = 'light';\n  } else if (nativeTheme.shouldUseInvertedColorScheme) {\n    theme = 'dark';\n  }\n  return theme;\n}\n/**\n * 设置系统主题\n */\nsetTheme(args) {\n  nativeTheme.themeSource = args;\n  return args;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"电脑系统主题模式\n\n\n\n\n# 系统主题模式\n\n * system 跟随系统\n * light 明亮\n * dark 暗黑\n\n// frontend/src/views/os/theme/index.vue\n<script>\n  settheme (e) {\n    this.currentthememode = e.target.value;\n    this.$ipc.invoke(ipcapiroute.settheme, this.currentthememode).then(result => {\n      this.currentthememode = result;\n    })      \n  },\n  gettheme () {\n    this.$ipc.invoke(ipcapiroute.gettheme).then(result => {\n      this.currentthememode = result;\n    })  \n  },\n<\/script> \n\n\n// electron/controller/os.js\n/**\n * 获取系统主题\n */\ngettheme() {\n  let theme = 'system';\n  if (nativetheme.shouldusehighcontrastcolors) {\n    theme = 'light';\n  } else if (nativetheme.shoulduseinvertedcolorscheme) {\n    theme = 'dark';\n  }\n  return theme;\n}\n/**\n * 设置系统主题\n */\nsettheme(args) {\n  nativetheme.themesource = args;\n  return args;\n}\n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"视频播放器",frontmatter:{title:"视频播放器",date:"2023-05-12T16:24:48.000Z",permalink:"/pages/d144d4/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/04.%E7%89%B9%E6%95%88/01.%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8.html",relativePath:"07.功能/04.特效/01.视频播放器.md",key:"v-1cb749f7",path:"/pages/d144d4/",headers:[{level:3,title:"视频播放",slug:"视频播放",normalizedTitle:"视频播放",charIndex:3},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:1528}],headersStr:"视频播放 完整代码",content:"简单的视频播放器\n\n\n\n\n# 视频播放\n\n// frontend/src/views/effect/video/Index.vue\n<script>\nimport Player from 'xgplayer'\nimport { ipcApiRoute } from '@/api/main'\nexport default {\n  data() {\n    return {\n      fileUrl: '',\n      p: {},\n      op: {\n        id: 'video-player',\n        volume: 0.3,\n        url:'//sf1-cdn-tos.huoshanstatic.com/obj/media-fe/xgplayer_doc_video/mp4/xgplayer-demo-360p.mp4',\n        poster: \"//lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/byted-player-videos/1.0.0/poster.jpg\",\n        playsinline: false,\n        danmu: {\n          comments: [\n            {\n              duration: 15000,\n              id: '1',\n              start: 3000,\n              txt: '这是一个弹幕',\n              style: {  //弹幕自定义样式\n                color: '#ff9500',\n                fontSize: '20px',\n                border: 'solid 1px #ff9500',\n                borderRadius: '50px',\n                padding: '5px 11px',\n                backgroundColor: 'rgba(255, 255, 255, 0.1)'\n              }\n            }\n          ],\n          area: {\n            start: 0,\n            end: 1\n          }\n        },\n      },\n    };\n  },\n  mounted () {\n    this.init();\n  },    \n  methods: {\n    init () {\n      this.p = new Player(this.op);\n    },    \n    selectFile () {\n      const params = {}\n      this.$ipc.invoke(ipcApiRoute.selectFile, params).then(res => {\n        if (res) {\n          this.fileUrl = res;\n          this.p.start(self.fileUrl);\n        } else {\n          this.$message.warning('请选择视频');\n        }\n      }) \n    },\n  }\n};\n<\/script> \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"简单的视频播放器\n\n\n\n\n# 视频播放\n\n// frontend/src/views/effect/video/index.vue\n<script>\nimport player from 'xgplayer'\nimport { ipcapiroute } from '@/api/main'\nexport default {\n  data() {\n    return {\n      fileurl: '',\n      p: {},\n      op: {\n        id: 'video-player',\n        volume: 0.3,\n        url:'//sf1-cdn-tos.huoshanstatic.com/obj/media-fe/xgplayer_doc_video/mp4/xgplayer-demo-360p.mp4',\n        poster: \"//lf9-cdn-tos.bytecdntp.com/cdn/expire-1-m/byted-player-videos/1.0.0/poster.jpg\",\n        playsinline: false,\n        danmu: {\n          comments: [\n            {\n              duration: 15000,\n              id: '1',\n              start: 3000,\n              txt: '这是一个弹幕',\n              style: {  //弹幕自定义样式\n                color: '#ff9500',\n                fontsize: '20px',\n                border: 'solid 1px #ff9500',\n                borderradius: '50px',\n                padding: '5px 11px',\n                backgroundcolor: 'rgba(255, 255, 255, 0.1)'\n              }\n            }\n          ],\n          area: {\n            start: 0,\n            end: 1\n          }\n        },\n      },\n    };\n  },\n  mounted () {\n    this.init();\n  },    \n  methods: {\n    init () {\n      this.p = new player(this.op);\n    },    \n    selectfile () {\n      const params = {}\n      this.$ipc.invoke(ipcapiroute.selectfile, params).then(res => {\n        if (res) {\n          this.fileurl = res;\n          this.p.start(self.fileurl);\n        } else {\n          this.$message.warning('请选择视频');\n        }\n      }) \n    },\n  }\n};\n<\/script> \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"打印机",frontmatter:{title:"打印机",date:"2023-05-12T16:24:36.000Z",permalink:"/pages/75c776/",article:!1},regularPath:"/07.%E5%8A%9F%E8%83%BD/05.%E7%A1%AC%E4%BB%B6/01.%E6%89%93%E5%8D%B0%E6%9C%BA.html",relativePath:"07.功能/05.硬件/01.打印机.md",key:"v-67db9c88",path:"/pages/75c776/",headers:[{level:3,title:"打印机设备",slug:"打印机设备",normalizedTitle:"打印机设备",charIndex:13},{level:3,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:2248}],headersStr:"打印机设备 完整代码",content:"外接硬件设备\n\n\n\n\n# 打印机设备\n\n// frontend/src/views/hardware/printer/Index.vue\n<script>\nimport { ipcApiRoute } from '@/api/main'\nexport default {\n  data() {\n    return {\n      defaultDeviceName: '',\n      printerList: [],\n      views: [\n        {\n          type: 'html',\n          content: '/public/html/view_example.html'\n        },        \n      ],\n    };\n  },\n  mounted () {\n    this.init();\n  },  \n  methods: {\n    init () {\n      // 避免重复监听，或者将 on 功能写到一个统一的地方，只加载一次\n      this.$ipc.removeAllListeners(ipcApiRoute.printStatus);\n      this.$ipc.on(ipcApiRoute.printStatus, (event, result) => {\n        this.$message.info('打印中...');\n      })\n    },    \n    getPrinter () {\n      this.$ipc.invoke(ipcApiRoute.getPrinterList, {}).then(res => {\n        this.printerList = res;\n      }) \n    },\n    doPrint (index) {\n      const params = {\n        view: this.views[index],\n        deviceName: this.defaultDeviceName\n      };\n      this.$ipc.send(ipcApiRoute.print, params)\n    },\n    defaultDevice (item) {\n      let desc = \"\";\n      if (item.isDefault) {\n        desc = \"- 默认\";\n        this.defaultDeviceName = item.name;\n      }\n      return desc;\n    } \n  }\n};\n<\/script> \n\n\n// electron/controller/hardware.js\n/**\n * 获取打印机列表\n */\ngetPrinterList () {\n  //主线程获取打印机列表\n  const list = Electron.mainWindow.webContents.getPrinters();\n  return list;\n}  \n/**\n * 打印\n */\nprint (args, event) {\n  const { view, deviceName } = args;\n  let content = null;\n  if (view.type == 'html') {\n    content = path.join('file://', Ps.getHomeDir(), view.content)\n  } else {\n    content = view.content;\n  }\n  const addonWindow = this.app.addon.window;\n  let opt = {\n    title: 'printer window',\n    x: 10,\n    y: 10,\n    width: 980, \n    height: 650 \n  }\n  const name = 'window-printer';\n  const printWindow = addonWindow.create(name, opt);\n  printWindow.loadURL(content);\n  printWindow.webContents.once('did-finish-load', () => {\n    // 页面完全加载完成后，开始打印\n    printWindow.webContents.print({\n      silent: false, // 显示打印对话框\n      printBackground: true,\n      deviceName,\n    }, (success, failureReason) => {\n      const channel = 'controller.hardware.printStatus';\n      event.reply(`${channel}`, { success, failureReason });\n      printWindow.close();\n    });\n  });\n  return true;\n}  \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",normalizedContent:"外接硬件设备\n\n\n\n\n# 打印机设备\n\n// frontend/src/views/hardware/printer/index.vue\n<script>\nimport { ipcapiroute } from '@/api/main'\nexport default {\n  data() {\n    return {\n      defaultdevicename: '',\n      printerlist: [],\n      views: [\n        {\n          type: 'html',\n          content: '/public/html/view_example.html'\n        },        \n      ],\n    };\n  },\n  mounted () {\n    this.init();\n  },  \n  methods: {\n    init () {\n      // 避免重复监听，或者将 on 功能写到一个统一的地方，只加载一次\n      this.$ipc.removealllisteners(ipcapiroute.printstatus);\n      this.$ipc.on(ipcapiroute.printstatus, (event, result) => {\n        this.$message.info('打印中...');\n      })\n    },    \n    getprinter () {\n      this.$ipc.invoke(ipcapiroute.getprinterlist, {}).then(res => {\n        this.printerlist = res;\n      }) \n    },\n    doprint (index) {\n      const params = {\n        view: this.views[index],\n        devicename: this.defaultdevicename\n      };\n      this.$ipc.send(ipcapiroute.print, params)\n    },\n    defaultdevice (item) {\n      let desc = \"\";\n      if (item.isdefault) {\n        desc = \"- 默认\";\n        this.defaultdevicename = item.name;\n      }\n      return desc;\n    } \n  }\n};\n<\/script> \n\n\n// electron/controller/hardware.js\n/**\n * 获取打印机列表\n */\ngetprinterlist () {\n  //主线程获取打印机列表\n  const list = electron.mainwindow.webcontents.getprinters();\n  return list;\n}  \n/**\n * 打印\n */\nprint (args, event) {\n  const { view, devicename } = args;\n  let content = null;\n  if (view.type == 'html') {\n    content = path.join('file://', ps.gethomedir(), view.content)\n  } else {\n    content = view.content;\n  }\n  const addonwindow = this.app.addon.window;\n  let opt = {\n    title: 'printer window',\n    x: 10,\n    y: 10,\n    width: 980, \n    height: 650 \n  }\n  const name = 'window-printer';\n  const printwindow = addonwindow.create(name, opt);\n  printwindow.loadurl(content);\n  printwindow.webcontents.once('did-finish-load', () => {\n    // 页面完全加载完成后，开始打印\n    printwindow.webcontents.print({\n      silent: false, // 显示打印对话框\n      printbackground: true,\n      devicename,\n    }, (success, failurereason) => {\n      const channel = 'controller.hardware.printstatus';\n      event.reply(`${channel}`, { success, failurereason });\n      printwindow.close();\n    });\n  });\n  return true;\n}  \n\n\n\n# 完整代码\n\n * github前端代码\n * github主进程代码\n * gitee前端代码\n * gitee主进程代码",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"博客文章",frontmatter:{archivesPage:!0,title:"博客文章",permalink:"/blog/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-46cea4e5",path:"/blog/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"Home",frontmatter:{home:!0,heroImage:"/img/logo.png",heroText:"Electron-Egg",tagline:"一个入门简单、跨平台、企业级桌面软件开发框架",actionText:"🚀开始使用",actionLink:"/pages/8ef798/",bannerBg:"none",defaultMode:"light",features:[{title:"入门简单",details:"只需懂 JavaScript"},{title:"跨平台",details:"windows、Mac、Linux"},{title:"开源免费",details:"GitHub、Gitee"}],postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-fa41ba04",path:"/",headers:[{level:2,title:"🌈特别赞助",slug:"🌈特别赞助",normalizedTitle:"🌈特别赞助",charIndex:16},{level:2,title:"🌳 特别用户",slug:"🌳-特别用户",normalizedTitle:"🌳 特别用户",charIndex:252},{level:2,title:"🍬特性",slug:"🍬特性",normalizedTitle:"🍬特性",charIndex:569},{level:2,title:"✈️ 使用场景",slug:"✈️-使用场景",normalizedTitle:"✈️ 使用场景",charIndex:891},{level:3,title:"1. 🚀 常规桌面软件",slug:"_1-🚀-常规桌面软件",normalizedTitle:"1. 🚀 常规桌面软件",charIndex:903},{level:3,title:"🚐 2. vue、react、angular、web 转换成桌面软件",slug:"🚐-2-vue、react、angular、web-转换成桌面软件",normalizedTitle:"🚐 2. vue、react、angular、web 转换成桌面软件",charIndex:1046},{level:3,title:"🚂 3. 游戏（h5相关技术开发）",slug:"🚂-3-游戏-h5相关技术开发",normalizedTitle:"🚂 3. 游戏（h5相关技术开发）",charIndex:1151},{level:2,title:"🎉致谢",slug:"🎉致谢",normalizedTitle:"🎉致谢",charIndex:1196},{level:2,title:"🏡代码托管",slug:"🏡代码托管",normalizedTitle:"🏡代码托管",charIndex:1332},{level:2,title:"🤝 Dromara 组织项目",slug:"🤝-dromara-组织项目",normalizedTitle:"🤝 dromara 组织项目",charIndex:1345},{level:2,title:"🧲友情链接",slug:"🧲友情链接",normalizedTitle:"🧲友情链接",charIndex:1369}],headersStr:"🌈特别赞助 🌳 特别用户 🍬特性 ✈️ 使用场景 1. 🚀 常规桌面软件 🚐 2. vue、react、angular、web 转换成桌面软件 🚂 3. 游戏（h5相关技术开发） 🎉致谢 🏡代码托管 🤝 Dromara 组织项目 🧲友情链接",content:"成为赞助商\n\n\n\n\n\n\n\n\n# 🌈特别赞助\n\n埃文科技\n\n全球IP地址高精准实时定位技术领导者\n\n- name: 埃文科技\n  desc: 全球IP地址高精准实时定位技术领导者\n  avatar: /img/sponsor/aiwen-logo.jpg\n  link: https://docs.qq.com/doc/p/b6dff122b9606d91ce34c898a492dc1c0328aaac\n  bgColor: '#1373CC'\n  textColor: '#ffffff'\n\n\n\n# 🌳 特别用户\n\nZyplayer-doc\n\n私有化部署知识库\n\nDromara 社区\n\n让每一位开源爱好者，体会到开源的快乐。\n\n- name: Zyplayer-doc\n  desc: 私有化部署知识库\n  link: http://doc.zyplayer.com/\n  bgColor: '#f1f1f1'\n  textColor: '#2A3344'\n- name: Dromara 社区\n  desc: 让每一位开源爱好者，体会到开源的快乐。\n  link: https://github.com/dromara\n  bgColor: '#f1f1f1'\n  textColor: '#2A3344'  \n\n\n\n\n\n\n# 🍬特性\n\n * 跨平台：一套代码，可以打包成windows版、Mac版、Linux版、国产UOS、Deepin、麒麟等。\n * 架构：单业务进程/模块化/多任务(进程，线程，渲染进程)，让开发大型项目变的简单。\n * 简单高效: 只需学习 js 语言。\n * 前端独立 支持任何前端技术，如：vue、react、html、vite 等等。\n * 工程化：可以用前端、服务端的开发思维，来编写桌面软件。\n * 高性能：事件驱动、非阻塞式IO。\n * 功能丰富：配置、通信、任务、插件、数据库、升级、打包、工具... 应有尽有。\n * 安全：支持字节码加密、压缩混淆加密。\n * 功能demo：桌面软件常见功能，框架集成或提供demo。\n\n\n# ✈️ 使用场景\n\n\n# 1. 🚀 常规桌面软件\n\n * 🚖 Windows平台 - demo\n   \n   \n\n * 🚍 MacOS平台 - demo\n   \n\n * 🚔 Linux平台 - 国产UOS、Deepin - demo\n\n * 🚔 Linux平台 - ubuntu - demo\n\n\n# 🚐 2. vue、react、angular、web 转换成桌面软件\n\n * 🚙 vue-ant-design（本地）\n   \n   \n\n * 🚙 禅道项目管理（web项目地址）\n   \n   \n\n\n# 🚂 3. 游戏（h5相关技术开发）\n\n * 🚊 忍者100层\n   \n   \n\n\n# 🎉致谢\n\nElectron-Egg 自从2020年开源以来，获得了很多人的支持。目前社区群总计超千人，收获Star超 4000+。\n\n这离不开社区小伙伴的支持和意见以及PR,感谢你们!\n\n我们会继续朝着：让所有开发者都能学会桌面软件研发 的理念，继续前进。\n\n\n\n\n# 🏡代码托管\n\n\n\n\n# 🤝 Dromara 组织项目\n\n\n\n\n\n\n# 🧲友情链接\n\n\n\n",normalizedContent:"成为赞助商\n\n\n\n\n\n\n\n\n# 🌈特别赞助\n\n埃文科技\n\n全球ip地址高精准实时定位技术领导者\n\n- name: 埃文科技\n  desc: 全球ip地址高精准实时定位技术领导者\n  avatar: /img/sponsor/aiwen-logo.jpg\n  link: https://docs.qq.com/doc/p/b6dff122b9606d91ce34c898a492dc1c0328aaac\n  bgcolor: '#1373cc'\n  textcolor: '#ffffff'\n\n\n\n# 🌳 特别用户\n\nzyplayer-doc\n\n私有化部署知识库\n\ndromara 社区\n\n让每一位开源爱好者，体会到开源的快乐。\n\n- name: zyplayer-doc\n  desc: 私有化部署知识库\n  link: http://doc.zyplayer.com/\n  bgcolor: '#f1f1f1'\n  textcolor: '#2a3344'\n- name: dromara 社区\n  desc: 让每一位开源爱好者，体会到开源的快乐。\n  link: https://github.com/dromara\n  bgcolor: '#f1f1f1'\n  textcolor: '#2a3344'  \n\n\n\n\n\n\n# 🍬特性\n\n * 跨平台：一套代码，可以打包成windows版、mac版、linux版、国产uos、deepin、麒麟等。\n * 架构：单业务进程/模块化/多任务(进程，线程，渲染进程)，让开发大型项目变的简单。\n * 简单高效: 只需学习 js 语言。\n * 前端独立 支持任何前端技术，如：vue、react、html、vite 等等。\n * 工程化：可以用前端、服务端的开发思维，来编写桌面软件。\n * 高性能：事件驱动、非阻塞式io。\n * 功能丰富：配置、通信、任务、插件、数据库、升级、打包、工具... 应有尽有。\n * 安全：支持字节码加密、压缩混淆加密。\n * 功能demo：桌面软件常见功能，框架集成或提供demo。\n\n\n# ✈️ 使用场景\n\n\n# 1. 🚀 常规桌面软件\n\n * 🚖 windows平台 - demo\n   \n   \n\n * 🚍 macos平台 - demo\n   \n\n * 🚔 linux平台 - 国产uos、deepin - demo\n\n * 🚔 linux平台 - ubuntu - demo\n\n\n# 🚐 2. vue、react、angular、web 转换成桌面软件\n\n * 🚙 vue-ant-design（本地）\n   \n   \n\n * 🚙 禅道项目管理（web项目地址）\n   \n   \n\n\n# 🚂 3. 游戏（h5相关技术开发）\n\n * 🚊 忍者100层\n   \n   \n\n\n# 🎉致谢\n\nelectron-egg 自从2020年开源以来，获得了很多人的支持。目前社区群总计超千人，收获star超 4000+。\n\n这离不开社区小伙伴的支持和意见以及pr,感谢你们!\n\n我们会继续朝着：让所有开发者都能学会桌面软件研发 的理念，继续前进。\n\n\n\n\n# 🏡代码托管\n\n\n\n\n# 🤝 dromara 组织项目\n\n\n\n\n\n\n# 🧲友情链接\n\n\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"日志",frontmatter:{title:"日志",date:"2023-04-19T11:12:19.000Z",permalink:"/pages/4c19a1/",article:!1},regularPath:"/03.api/002.API/106.this-app/060.logger.html",relativePath:"03.api/002.API/106.this-app/060.logger.md",key:"v-6e84f442",path:"/pages/4c19a1/",headers:[{level:3,title:"日志记录",slug:"日志记录",normalizedTitle:"日志记录",charIndex:2},{level:3,title:"推荐",slug:"推荐",normalizedTitle:"推荐",charIndex:11}],headersStr:"日志记录 推荐",content:"# 日志记录\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n使用方法：\n\nthis.app.logger.info()\nthis.app.logger.error()\nthis.app.logger.debug()\nthis.app.logger.warn()\nthis.app.logger.write()\n",normalizedContent:"# 日志记录\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n使用方法：\n\nthis.app.logger.info()\nthis.app.logger.error()\nthis.app.logger.debug()\nthis.app.logger.warn()\nthis.app.logger.write()\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"http客户端",frontmatter:{title:"http客户端",date:"2023-05-26T11:12:19.000Z",permalink:"/pages/a4058f/",article:!1},regularPath:"/03.api/002.API/106.this-app/040.httpclient.html",relativePath:"03.api/002.API/106.this-app/040.httpclient.md",key:"v-2cba8c46",path:"/pages/a4058f/",headers:[{level:3,title:"http客户端",slug:"http客户端",normalizedTitle:"http客户端",charIndex:2},{level:3,title:"推荐",slug:"推荐",normalizedTitle:"推荐",charIndex:24},{level:3,title:"curl",slug:"curl",normalizedTitle:"curl",charIndex:73},{level:3,title:"method: String",slug:"method-string",normalizedTitle:"method: string",charIndex:330},{level:3,title:"data: Object",slug:"data-object",normalizedTitle:"data: object",charIndex:408},{level:3,title:"content: String|Buffer",slug:"content-string-buffer",normalizedTitle:"content: string|buffer",charIndex:952},{level:3,title:"files: Mixed",slug:"files-mixed",normalizedTitle:"files: mixed",charIndex:1190},{level:3,title:"stream: ReadStream",slug:"stream-readstream",normalizedTitle:"stream: readstream",charIndex:1593},{level:3,title:"writeStream: WriteStream",slug:"writestream-writestream",normalizedTitle:"writestream: writestream",charIndex:1771},{level:3,title:"consumeWriteStream: Boolean",slug:"consumewritestream-boolean",normalizedTitle:"consumewritestream: boolean",charIndex:1970},{level:3,title:"method: String",slug:"method-string-2",normalizedTitle:"method: string",charIndex:330},{level:3,title:"contentType: String",slug:"contenttype-string",normalizedTitle:"contenttype: string",charIndex:2170},{level:3,title:"dataType: String",slug:"datatype-string",normalizedTitle:"datatype: string",charIndex:2434},{level:3,title:"fixJSONCtlChars: Boolean",slug:"fixjsonctlchars-boolean",normalizedTitle:"fixjsonctlchars: boolean",charIndex:2769},{level:3,title:"headers: Object",slug:"headers-object",normalizedTitle:"headers: object",charIndex:2964},{level:3,title:"timeout: Number|Array",slug:"timeout-number-array",normalizedTitle:"timeout: number|array",charIndex:3053},{level:3,title:"agent: HttpAgent",slug:"agent-httpagent",normalizedTitle:"agent: httpagent",charIndex:3284},{level:3,title:"httpsAgent: HttpsAgent",slug:"httpsagent-httpsagent",normalizedTitle:"httpsagent: httpsagent",charIndex:3401},{level:3,title:"auth: String",slug:"auth-string",normalizedTitle:"auth: string",charIndex:3530},{level:3,title:"gzip: Boolean",slug:"gzip-boolean",normalizedTitle:"gzip: boolean",charIndex:3689},{level:3,title:"timing: Boolean",slug:"timing-boolean",normalizedTitle:"timing: boolean",charIndex:3865}],headersStr:"http客户端 推荐 curl method: String data: Object content: String|Buffer files: Mixed stream: ReadStream writeStream: WriteStream consumeWriteStream: Boolean method: String contentType: String dataType: String fixJSONCtlChars: Boolean headers: Object timeout: Number|Array agent: HttpAgent httpsAgent: HttpsAgent auth: String gzip: Boolean timing: Boolean",content:"# http客户端\n\n发送http请求\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n使用方法：\n\n\n# curl\n\n# http客户端\n\nconst url = \"https://api.wrdan.com/ip\";\nconst options = {\n  method: 'GET',\n  data: {\n    url: 'https://www.baidu.com',\n  },\n  dataType: 'json',\n  timeout: 15000,  \n};\nconst result = await this.app.curl(url, options);\n\n\noptions参数说明**：**\n\n\n# method: String\n\n设置请求方法，默认是 GET。 支持 GET、POST、PUT、DELETE、PATCH 等所有 HTTP 方法。\n\n\n# data: Object\n\n需要发送的请求数据，根据 method 自动选择正确的数据处理方式。\n\n 1. GET，HEAD：通过 querystring.stringify(data) 处理后拼接到 url 的 query 参数上。\n 2. POST，PUT 和 DELETE 等：需要根据 contentType 做进一步判断处理。\n    1. contentType = json：通过 JSON.stringify(data) 处理，并设置为 body 发送。\n    2. 其他：通过 querystring.stringify(data) 处理，并设置为 body 发送。\n\n// GET + data\nctx.curl(url, {\n  data: { foo: 'bar' },\n});\n\n// POST + data\nctx.curl(url, {\n  method: 'POST',\n  data: { foo: 'bar' },\n});\n\n// POST + JSON + data\nctx.curl(url, {\n  method: 'POST',\n  contentType: 'json',\n  data: { foo: 'bar' },\n});\n\n\n\n# content: String|Buffer\n\n发送请求正文，如果设置了此参数，那么会直接忽略 data 参数。\n\napp.curl(url, {\n  method: 'POST',\n  // 直接发送原始 xml 数据，不需要 HttpClient 做特殊处理\n  content: '<xml><hello>world</hello></xml>',\n  headers: {\n    'content-type': 'text/html',\n  },\n});\n\n\n\n# files: Mixed\n\n文件上传，支持格式： String | ReadStream | Buffer | Array | Object。\n\napp.curl(url, {\n  method: 'POST',\n  files: '/path/to/read',\n  data: {\n    foo: 'other fields',\n  },\n});\n\n\n多文件上传：\n\napp.curl(url, {\n  method: 'POST',\n  files: {\n    file1: '/path/to/read',\n    file2: fs.createReadStream(__filename),\n    file3: Buffer.from('mock file content'),\n  },\n  data: {\n    foo: 'other fields',\n  },\n});\n\n\n\n# stream: ReadStream\n\n设置发送请求正文的可读数据流，默认是 null。 一旦设置了此参数，HttpClient 将会忽略 data 和 content。\n\nctx.curl(url, {\n  method: 'POST',\n  stream: fs.createReadStream('/path/to/read'),\n});\n\n\n\n# writeStream: WriteStream\n\n设置接受响应数据的可写数据流，默认是 null。 一旦设置此参数，那么返回值 result.data 将会被设置为 null， 因为数据已经全部写入到 writeStream 中了。\n\nctx.curl(url, {\n  writeStream: fs.createWriteStream('/path/to/store'),\n});\n\n\n\n# consumeWriteStream: Boolean\n\n是否等待 writeStream 完全写完才算响应全部接收完毕，默认是 true。 此参数不建议修改默认值，除非我们明确知道它的副作用是可接受的， 否则很可能会导致 writeStream 数据不完整。\n\n\n# method: String\n\n设置请求方法，默认是 GET。 支持 GET、POST、PUT、DELETE、PATCH\n\n\n# contentType: String\n\n设置请求数据格式，默认是 undefined，HttpClient 会自动根据 data 和 content 参数自动设置。data 是 object 的时候默认设置的是 form。支持 json 格式。 如需要以 JSON 格式发送 data：\n\nctx.curl(url, {\n  method: 'POST',\n  data: {\n    foo: 'bar',\n    now: Date.now(),\n  },\n  contentType: 'json',\n});\n\n\n\n# dataType: String\n\n设置响应数据格式，默认不对响应数据做任何处理，直接返回原始的 buffer 格式数据。 支持 text 和 json 两种格式。 注意：设置成 json 时，如果响应数据解析失败会抛 JSONResponseFormatError 异常。\n\nconst jsonResult = await ctx.curl(url, {\n  dataType: 'json',\n});\nconsole.log(jsonResult.data);\n\nconst htmlResult = await ctx.curl(url, {\n  dataType: 'text',\n});\nconsole.log(htmlResult.data);\n\n\n\n# fixJSONCtlChars: Boolean\n\n是否自动过滤响应数据中的特殊控制字符 (U+0000 ~ U+001F)，默认是 false。 通常一些 CGI 系统返回的 JSON 数据会包含这些特殊控制字符，通过此参数可以自动过滤掉它们。\n\nctx.curl(url, {\n  fixJSONCtlChars: true,\n  dataType: 'json',\n});\n\n\n\n# headers: Object\n\n自定义请求头。\n\nctx.curl(url, {\n  headers: {\n    'x-foo': 'bar',\n  },\n});\n\n\n\n# timeout: Number|Array\n\n请求超时时间，默认是 [ 5000, 5000 ]，即创建连接超时是 5 秒，接收响应超时是 5 秒。\n\nctx.curl(url, {\n  // 创建连接超时 3 秒，接收响应超时 3 秒\n  timeout: 3000,\n});\n\nctx.curl(url, {\n  // 创建连接超时 1 秒，接收响应超时 30 秒，用于响应比较大的场景\n  timeout: [1000, 30000],\n});\n\n\n\n# agent: HttpAgent\n\n允许通过此参数覆盖默认的 HttpAgent，如果你不想开启 KeepAlive，可以设置此参数为 false。\n\nctx.curl(url, {\n  agent: false,\n});\n\n\n\n# httpsAgent: HttpsAgent\n\n允许通过此参数覆盖默认的 HttpsAgent，如果你不想开启 KeepAlive，可以设置此参数为 false。\n\nctx.curl(url, {\n  httpsAgent: false,\n});\n\n\n\n# auth: String\n\n简单登录授权（Basic Authentication）参数，将以明文方式将登录信息以 Authorization 请求头发送出去。\n\nctx.curl(url, {\n  // 参数必须按照 `user:password` 格式设置\n  auth: 'foo:bar',\n});\n\n\n\n# gzip: Boolean\n\n是否支持 gzip 响应格式，默认为 false。 开启 gzip 之后，HttpClient 将自动设置 Accept-Encoding: gzip 请求头， 并且会自动解压带 Content-Encoding: gzip 响应头的数据。\n\nctx.curl(url, {\n  gzip: true,\n});\n\n\n\n# timing: Boolean\n\n是否开启请求各阶段的时间测量，默认为 false。 开启 timing 之后，可以通过 result.res.timing 拿到这次 HTTP 请求各阶段的时间测量值（单位是毫秒）， 通过这些测量值，我们可以非常方便地定位到这次请求最慢的环境发生在那个阶段，效果如同 Chrome network timing 的作用。 timing 各阶段测量值解析：\n\n * queuing：分配 socket 耗时\n * dnslookup：DNS 查询耗时\n * connected：socket 三次握手连接成功耗时\n * requestSent：请求数据完整发送完毕耗时\n * waiting：收到第一个字节的响应数据耗时\n * contentDownload：全部响应数据接收完毕耗时\n\nconst result = await ctx.curl(url, {\n  timing: true,\n});\nconsole.log(result.res.timing);\n// {\n//   \"queuing\":29,\n//   \"dnslookup\":37,\n//   \"connected\":370,\n//   \"requestSent\":1001,\n//   \"waiting\":1833,\n//   \"contentDownload\":3416\n// }\n",normalizedContent:"# http客户端\n\n发送http请求\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n使用方法：\n\n\n# curl\n\n# http客户端\n\nconst url = \"https://api.wrdan.com/ip\";\nconst options = {\n  method: 'get',\n  data: {\n    url: 'https://www.baidu.com',\n  },\n  datatype: 'json',\n  timeout: 15000,  \n};\nconst result = await this.app.curl(url, options);\n\n\noptions参数说明**：**\n\n\n# method: string\n\n设置请求方法，默认是 get。 支持 get、post、put、delete、patch 等所有 http 方法。\n\n\n# data: object\n\n需要发送的请求数据，根据 method 自动选择正确的数据处理方式。\n\n 1. get，head：通过 querystring.stringify(data) 处理后拼接到 url 的 query 参数上。\n 2. post，put 和 delete 等：需要根据 contenttype 做进一步判断处理。\n    1. contenttype = json：通过 json.stringify(data) 处理，并设置为 body 发送。\n    2. 其他：通过 querystring.stringify(data) 处理，并设置为 body 发送。\n\n// get + data\nctx.curl(url, {\n  data: { foo: 'bar' },\n});\n\n// post + data\nctx.curl(url, {\n  method: 'post',\n  data: { foo: 'bar' },\n});\n\n// post + json + data\nctx.curl(url, {\n  method: 'post',\n  contenttype: 'json',\n  data: { foo: 'bar' },\n});\n\n\n\n# content: string|buffer\n\n发送请求正文，如果设置了此参数，那么会直接忽略 data 参数。\n\napp.curl(url, {\n  method: 'post',\n  // 直接发送原始 xml 数据，不需要 httpclient 做特殊处理\n  content: '<xml><hello>world</hello></xml>',\n  headers: {\n    'content-type': 'text/html',\n  },\n});\n\n\n\n# files: mixed\n\n文件上传，支持格式： string | readstream | buffer | array | object。\n\napp.curl(url, {\n  method: 'post',\n  files: '/path/to/read',\n  data: {\n    foo: 'other fields',\n  },\n});\n\n\n多文件上传：\n\napp.curl(url, {\n  method: 'post',\n  files: {\n    file1: '/path/to/read',\n    file2: fs.createreadstream(__filename),\n    file3: buffer.from('mock file content'),\n  },\n  data: {\n    foo: 'other fields',\n  },\n});\n\n\n\n# stream: readstream\n\n设置发送请求正文的可读数据流，默认是 null。 一旦设置了此参数，httpclient 将会忽略 data 和 content。\n\nctx.curl(url, {\n  method: 'post',\n  stream: fs.createreadstream('/path/to/read'),\n});\n\n\n\n# writestream: writestream\n\n设置接受响应数据的可写数据流，默认是 null。 一旦设置此参数，那么返回值 result.data 将会被设置为 null， 因为数据已经全部写入到 writestream 中了。\n\nctx.curl(url, {\n  writestream: fs.createwritestream('/path/to/store'),\n});\n\n\n\n# consumewritestream: boolean\n\n是否等待 writestream 完全写完才算响应全部接收完毕，默认是 true。 此参数不建议修改默认值，除非我们明确知道它的副作用是可接受的， 否则很可能会导致 writestream 数据不完整。\n\n\n# method: string\n\n设置请求方法，默认是 get。 支持 get、post、put、delete、patch\n\n\n# contenttype: string\n\n设置请求数据格式，默认是 undefined，httpclient 会自动根据 data 和 content 参数自动设置。data 是 object 的时候默认设置的是 form。支持 json 格式。 如需要以 json 格式发送 data：\n\nctx.curl(url, {\n  method: 'post',\n  data: {\n    foo: 'bar',\n    now: date.now(),\n  },\n  contenttype: 'json',\n});\n\n\n\n# datatype: string\n\n设置响应数据格式，默认不对响应数据做任何处理，直接返回原始的 buffer 格式数据。 支持 text 和 json 两种格式。 注意：设置成 json 时，如果响应数据解析失败会抛 jsonresponseformaterror 异常。\n\nconst jsonresult = await ctx.curl(url, {\n  datatype: 'json',\n});\nconsole.log(jsonresult.data);\n\nconst htmlresult = await ctx.curl(url, {\n  datatype: 'text',\n});\nconsole.log(htmlresult.data);\n\n\n\n# fixjsonctlchars: boolean\n\n是否自动过滤响应数据中的特殊控制字符 (u+0000 ~ u+001f)，默认是 false。 通常一些 cgi 系统返回的 json 数据会包含这些特殊控制字符，通过此参数可以自动过滤掉它们。\n\nctx.curl(url, {\n  fixjsonctlchars: true,\n  datatype: 'json',\n});\n\n\n\n# headers: object\n\n自定义请求头。\n\nctx.curl(url, {\n  headers: {\n    'x-foo': 'bar',\n  },\n});\n\n\n\n# timeout: number|array\n\n请求超时时间，默认是 [ 5000, 5000 ]，即创建连接超时是 5 秒，接收响应超时是 5 秒。\n\nctx.curl(url, {\n  // 创建连接超时 3 秒，接收响应超时 3 秒\n  timeout: 3000,\n});\n\nctx.curl(url, {\n  // 创建连接超时 1 秒，接收响应超时 30 秒，用于响应比较大的场景\n  timeout: [1000, 30000],\n});\n\n\n\n# agent: httpagent\n\n允许通过此参数覆盖默认的 httpagent，如果你不想开启 keepalive，可以设置此参数为 false。\n\nctx.curl(url, {\n  agent: false,\n});\n\n\n\n# httpsagent: httpsagent\n\n允许通过此参数覆盖默认的 httpsagent，如果你不想开启 keepalive，可以设置此参数为 false。\n\nctx.curl(url, {\n  httpsagent: false,\n});\n\n\n\n# auth: string\n\n简单登录授权（basic authentication）参数，将以明文方式将登录信息以 authorization 请求头发送出去。\n\nctx.curl(url, {\n  // 参数必须按照 `user:password` 格式设置\n  auth: 'foo:bar',\n});\n\n\n\n# gzip: boolean\n\n是否支持 gzip 响应格式，默认为 false。 开启 gzip 之后，httpclient 将自动设置 accept-encoding: gzip 请求头， 并且会自动解压带 content-encoding: gzip 响应头的数据。\n\nctx.curl(url, {\n  gzip: true,\n});\n\n\n\n# timing: boolean\n\n是否开启请求各阶段的时间测量，默认为 false。 开启 timing 之后，可以通过 result.res.timing 拿到这次 http 请求各阶段的时间测量值（单位是毫秒）， 通过这些测量值，我们可以非常方便地定位到这次请求最慢的环境发生在那个阶段，效果如同 chrome network timing 的作用。 timing 各阶段测量值解析：\n\n * queuing：分配 socket 耗时\n * dnslookup：dns 查询耗时\n * connected：socket 三次握手连接成功耗时\n * requestsent：请求数据完整发送完毕耗时\n * waiting：收到第一个字节的响应数据耗时\n * contentdownload：全部响应数据接收完毕耗时\n\nconst result = await ctx.curl(url, {\n  timing: true,\n});\nconsole.log(result.res.timing);\n// {\n//   \"queuing\":29,\n//   \"dnslookup\":37,\n//   \"connected\":370,\n//   \"requestsent\":1001,\n//   \"waiting\":1833,\n//   \"contentdownload\":3416\n// }\n",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3},{title:"electron",frontmatter:{title:"electron",date:"2023-05-26T11:12:19.000Z",permalink:"/pages/5f58fe/",article:!1},regularPath:"/03.api/002.API/106.this-app/030.electron.html",relativePath:"03.api/002.API/106.this-app/030.electron.md",key:"v-4addcf41",path:"/pages/5f58fe/",headers:[{level:3,title:"electron全局对象",slug:"electron全局对象",normalizedTitle:"electron全局对象",charIndex:2},{level:3,title:"推荐",slug:"推荐",normalizedTitle:"推荐",charIndex:19},{level:3,title:"使用方法：",slug:"使用方法",normalizedTitle:"使用方法：",charIndex:61},{level:3,title:"appQuit()",slug:"appquit",normalizedTitle:"appquit()",charIndex:384},{level:3,title:"extra",slug:"extra",normalizedTitle:"extra",charIndex:450}],headersStr:"electron全局对象 推荐 使用方法： appQuit() extra",content:"# electron全局对象\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n\n# 使用方法：\n\n# 主窗口对象\nthis.app.electron.mainWindow\n说明：\n- 该对象是 new BrowserWindow(winOptions)的实例；\n- 该对象的api文档请参考：https://www.electronjs.org/zh/docs/latest/api/browser-window\n\n\n# 托盘对象\nthis.app.electron.tray\n说明：\n- 该对象默认值为null；\n- 在项目./electron/library/tray.js中被赋值\n- 该对象的api文档请参考：https://www.electronjs.org/zh/docs/latest/api/tray\n\n\n\n# appQuit()\n\n * 介绍：应用退出\n\n# 应用退出 (该对象挂在app上)\nthis.app.appQuit()\n\n\n\n# extra\n\n * 介绍：扩展的对象\n * closeWindow：关闭窗口标识",normalizedContent:"# electron全局对象\n\n\n# 推荐\n\n请升级 ee-core >= v2.2.0 ，使用模块化的api。\n\n\n# 使用方法：\n\n# 主窗口对象\nthis.app.electron.mainwindow\n说明：\n- 该对象是 new browserwindow(winoptions)的实例；\n- 该对象的api文档请参考：https://www.electronjs.org/zh/docs/latest/api/browser-window\n\n\n# 托盘对象\nthis.app.electron.tray\n说明：\n- 该对象默认值为null；\n- 在项目./electron/library/tray.js中被赋值\n- 该对象的api文档请参考：https://www.electronjs.org/zh/docs/latest/api/tray\n\n\n\n# appquit()\n\n * 介绍：应用退出\n\n# 应用退出 (该对象挂在app上)\nthis.app.appquit()\n\n\n\n# extra\n\n * 介绍：扩展的对象\n * closewindow：关闭窗口标识",charsets:{cjk:!0},lastUpdated:"2023/06/21, 10:48:18",lastUpdatedTimestamp:1687344498e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"文档",link:"/pages/8ef798/",items:[{text:"v3.x",link:"/pages/8ef798/"},{text:"v2.x",link:"/pages/96f672/"}]},{text:"API",link:"/pages/85c531/"},{text:"功能",link:"/pages/132909/"},{text:"支持与赞助",link:"/pages/9365a8/"},{text:"知识点",link:"/pages/1f0f51/"},{text:"案例",link:"/pages/eadf46/"},{text:"交流",link:"/pages/c2720e/"},{text:"开源",link:"#",items:[{text:"GitHub",link:"https://github.com/dromara/electron-egg"},{text:"Gitee",link:"https://gitee.com/dromara/electron-egg"}]}],sidebarDepth:2,logo:"/img/logo.png",searchMaxSuggestions:10,lastUpdated:"上次更新",docsRepo:"wallace5303/docs",docsDir:"/",docsBranch:"main",editLinks:!1,editLinkText:"帮助我们改善此页面！",sidebar:{"/01.v3/":[{title:"快速入门",collapsable:!0,children:[["010.快速入门/010.简介.md","介绍","/pages/8ef798/"],["010.快速入门/020.electron-egg是什么.md","EE框架是什么？","/pages/4b9629/"],["010.快速入门/030.安装.md","安装","/pages/e64ff6/"],["010.快速入门/031.第三方使用.md","第三方使用","/pages/089f32/"],["010.快速入门/040.快速开始.md","快速开始","/pages/a28da5/"],{title:"配置",collapsable:!0,children:[["010.快速入门/050.配置/01.基础配置.md","基础","/pages/f7cbf9/"],["010.快速入门/050.配置/03.加密配置.md","加密","/pages/197d56/"],["010.快速入门/050.配置/05.打包配置.md","打包","/pages/2df2e6/"]]},["010.快速入门/060.命令.md","命令","/pages/b61a92/"]]},{title:"基础功能",collapsable:!0,children:[["020.基础功能/010.目录结构.md","目录结构","/pages/ee9aed/"],["020.基础功能/012.入口及生命周期.md","入口及生命周期","/pages/e6cd33/"],["020.基础功能/014.前端模块.md","前端模块","/pages/a75f3c/"],["020.基础功能/016.控制器.md","控制器","/pages/f5ca26/"],["020.基础功能/018.服务层.md","服务层","/pages/de1cbf/"],["020.基础功能/020.预加载层.md","预加载层","/pages/00ac20/"],{title:"插件",collapsable:!0,children:[["020.基础功能/030.插件/010.插件说明.md","插件说明","/pages/c08bd9/"],["020.基础功能/030.插件/020.窗口插件.md","内置窗口插件","/pages/fe5e7f/"],["020.基础功能/030.插件/030.托盘插件.md","托盘插件","/pages/c2dd07/"],["020.基础功能/030.插件/040.自动升级插件.md","自动升级插件","/pages/5746e7/"],["020.基础功能/030.插件/050.唤醒插件.md","唤醒插件","/pages/371117/"],["020.基础功能/030.插件/060.安全插件.md","安全插件","/pages/2af017/"],["020.基础功能/030.插件/070.java服务插件.md","java服务插件","/pages/745360/"]]},{title:"通信",collapsable:!0,children:[["020.基础功能/040.通信/010.通信介绍.md","通信介绍","/pages/f4f62c/"],["020.基础功能/040.通信/020.通信ipcRender.md","通信-ipcRender.js","/pages/ae344a/"]]},{title:"数据库",collapsable:!0,children:[["020.基础功能/050.数据库/010.json数据库.md","json数据库","/pages/ad7faa/"],["020.基础功能/050.数据库/020.sqlite数据库.md","sqlite数据库","/pages/c547b1/"]]},{title:"任务",collapsable:!0,children:[["020.基础功能/060.任务/010.Jobs说明.md","jobs说明","/pages/afbfa0/"],["020.基础功能/060.任务/020.ChildJob.md","ChildJob","/pages/036718/"],["020.基础功能/060.任务/030.ChildPoolJob.md","ChildPoolJob","/pages/2341b1/"],["020.基础功能/060.任务/040.RenderJob.md","渲染进程","/pages/bd2084/"]]},["020.基础功能/072.日志.md","日志","/pages/0d08b1/"],["020.基础功能/074.额外资源目录.md","额外资源目录","/pages/7fe540/"],["020.基础功能/076.调试.md","调试","/pages/64001c/"],["020.基础功能/078.脚本工具.md","脚本工具","/pages/c0859e/"],["020.基础功能/081.dll使用.md","DLL使用","/pages/e13483/"],["020.基础功能/082.调用第三方程序.md","调用第三方程序","/pages/0b76fb/"],["020.基础功能/090.远程模式.md","远程模式","/pages/c9eed1/"]]},{title:"生成软件",collapsable:!0,children:[["030.生成软件/010.构建.md","构建","/pages/ad838d/"],["030.生成软件/020.代码加密.md","代码加密","/pages/383ba6/"],["030.生成软件/030.图标修改.md","图标修改","/pages/801f4c/"]]},{title:"升级",collapsable:!0,children:[["040.升级/010.框架升级.md","框架升级","/pages/bc25c6/"],["040.升级/020.应用软件自动更新.md","应用软件自动更新","/pages/3152fb/"]]},{title:"其它",collapsable:!0,children:[["050.其它/030.更新记录.md","更新记录","/pages/f686cd/"]]},["060.常见问题.md","常见问题","/pages/23649b/"]],catalogue:{},"/02.v2/":[{title:"快速入门",collapsable:!0,children:[["010.快速入门/010.简介.md","介绍","/pages/96f672/"],["010.快速入门/020.electron-egg是什么.md","EE框架是什么？","/pages/ea6ac8/"],["010.快速入门/030.安装.md","安装","/pages/356bca/"],["010.快速入门/040.快速开始.md","快速开始","/pages/da8349/"],["010.快速入门/050.配置.md","配置","/pages/201d62/"]]},{title:"基础功能",collapsable:!0,children:[["020.基础功能/010.目录结构.md","目录结构","/pages/ae32b8/"],["020.基础功能/012.入口及生命周期.md","入口及生命周期","/pages/6b9c7a/"],["020.基础功能/014.前端模块.md","前端模块","/pages/3d5da0/"],["020.基础功能/016.控制器.md","控制器","/pages/c50bb1/"],["020.基础功能/018.服务层.md","服务层","/pages/465a58/"],["020.基础功能/020.预加载层.md","预加载层","/pages/4d182f/"],{title:"插件",collapsable:!0,children:[["020.基础功能/030.插件/010.插件说明.md","插件说明","/pages/b69355/"],["020.基础功能/030.插件/020.窗口插件.md","内置窗口插件","/pages/7a78f7/"],["020.基础功能/030.插件/030.托盘插件.md","托盘插件","/pages/d155ae/"],["020.基础功能/030.插件/040.自动升级插件.md","自动升级插件","/pages/9e6229/"],["020.基础功能/030.插件/050.唤醒插件.md","唤醒插件","/pages/d4ef4d/"],["020.基础功能/030.插件/060.安全插件.md","安全插件","/pages/1cdf89/"],["020.基础功能/030.插件/070.java服务插件.md","java服务插件","/pages/259c1f/"]]},{title:"通信",collapsable:!0,children:[["020.基础功能/040.通信/010.通信介绍.md","通信介绍","/pages/4ed946/"],["020.基础功能/040.通信/020.通信ipcRender.md","通信-ipcRender.js","/pages/eec975/"]]},{title:"数据库",collapsable:!0,children:[["020.基础功能/050.数据库/010.json数据库.md","json数据库","/pages/839e74/"],["020.基础功能/050.数据库/020.sqlite数据库.md","sqlite数据库","/pages/879ef7/"]]},["020.基础功能/072.日志.md","日志","/pages/508c87/"],["020.基础功能/074.额外资源目录.md","额外资源目录","/pages/45e36e/"],["020.基础功能/076.调试.md","调试","/pages/a9b338/"],["020.基础功能/078.脚本工具.md","脚本工具","/pages/04a0ff/"],{title:"其它",collapsable:!0,children:[["020.基础功能/080.其它/010.dll使用.md","DLL使用","/pages/e85f92/"],["020.基础功能/080.其它/020.调用第三方程序.md","调用第三方程序","/pages/b4410e/"]]}]},{title:"生成软件",collapsable:!0,children:[["030.生成软件/010.构建.md","构建","/pages/95a09b/"],["030.生成软件/020.代码加密.md","代码加密","/pages/280e92/"],["030.生成软件/030.图标修改.md","图标修改","/pages/50b8e9/"]]},{title:"升级",collapsable:!0,children:[["040.升级/010.框架升级.md","框架升级","/pages/5d7733/"],["040.升级/020.应用软件自动更新.md","应用软件自动更新","/pages/0039b5/"]]}],"/03.api/":[{title:"教程",collapsable:!0,children:[["001.教程/001.使用说明.md","使用说明","/pages/85c531/"],["001.教程/002.第三方使用.md","第三方使用","/pages/1dbe35/"]]},{title:"API",collapsable:!0,children:[{title:"addon",collapsable:!0,children:[["002.API/005.addon/010.介绍.md","插件模块","/pages/12884f/"],["002.API/005.addon/030.window.md","window","/pages/3b0795/"]]},["002.API/010.bin.md","bin","/pages/369cb1/"],["002.API/015.config.md","config","/pages/24a0ab/"],["002.API/020.const.md","const","/pages/0517c4/"],["002.API/025.const-channel.md","const/channel","/pages/3bd231/"],["002.API/030.controller.md","controller","/pages/33f926/"],["002.API/035.core.md","core","/pages/46466d/"],["002.API/040.ee.md","ee","/pages/f559b8/"],["002.API/045.electron.md","electron","/pages/338aae/"],["002.API/046.electron-app.md","electron/app","/pages/fc1e81/"],["002.API/047.electron-window.md","electron/window","/pages/ace333/"],["002.API/050.exception.md","exception","/pages/be2d90/"],["002.API/055.httpclient.md","httpclient","/pages/1a0cf7/"],["002.API/060.jobs.md","jobs","/pages/c6ede4/"],["002.API/061.jobs-childjob.md","jobs/ChildJob","/pages/cb31a1/"],["002.API/063.jobs-childpooljob.md","jobs/ChildPoolJob","/pages/f72716/"],["002.API/065.jobs-rendererjob.md","jobs/rendererjob","/pages/b57859/"],["002.API/070.loader.md","loader","/pages/54c34e/"],["002.API/075.log.md","log","/pages/0cb46d/"],["002.API/080.message.md","message","/pages/7e527e/"],["002.API/081.message-childmessage.md","message/childMessage","/pages/ed2d28/"],["002.API/085.ps.md","ps","/pages/4b84f2/"],["002.API/090.services.md","services","/pages/deaaeb/"],["002.API/095.socket.md","socket","/pages/b33008/"],["002.API/100.storage.md","storage","/pages/1e4caf/"],["002.API/105.tools.md","tools","/pages/abfcb0/"],{title:"this-app",collapsable:!0,children:[["002.API/106.this-app/001.intro.md","app对象说明","/pages/4cc0ef/"],["002.API/106.this-app/010.addon.md","插件模块","/pages/ae545a/"],["002.API/106.this-app/020.config.md","配置","/pages/d66b36/"],["002.API/106.this-app/030.electron.md","electron","/pages/5f58fe/"],["002.API/106.this-app/040.httpclient.md","http客户端","/pages/a4058f/"],["002.API/106.this-app/060.logger.md","日志","/pages/4c19a1/"],["002.API/106.this-app/070.request.md","request","/pages/43c09b/"],["002.API/106.this-app/080.response.md","response","/pages/d04c0c/"],["002.API/106.this-app/090.service.md","service","/pages/5f6665/"]]},["002.API/110.utils.md","utils","/pages/e0ef81/"],["002.API/111.utils-helper.md","utils/helper","/pages/fbf5b7/"],["002.API/112.utils-is.md","utils/is","/pages/70fa2b/"],["002.API/113.utils-json.md","utils/json","/pages/44cac6/"],["002.API/114.utils-time.md","utils/time","/pages/b7f46d/"],["002.API/115.utils-ip.md","utils/ip","/pages/451022/"],["002.API/116.utils-port.md","utils/get-port","/pages/001df6/"],["002.API/999.oldUtils.md","oldUtils","/pages/7f6033/"]]}],"/04.其它/":[["010.案例.md","案例展示","/pages/eadf46/"],["011.交流.md","交流","/pages/c2720e/"]],"/05.知识点/":[["010.nvm.md","nvm安装","/pages/1f0f51/"],{title:"macos",collapsable:!0,children:[["020.macos/010.安装python.md","macOS安装Python","/pages/cecb5a/"],["020.macos/020.Mac显示Library库.md","Mac显示资源库Library","/pages/a6916d/"]]},{title:"https",collapsable:!0,children:[["030.https/010.ssl证书.md","ssl证书","/pages/afbd71/"]]},{title:"版本关系",collapsable:!0,children:[["040.版本关系/001.v1.md","v1版本关系","/pages/39b969/"],["040.版本关系/002.v2.md","v2版本关系","/pages/52ba2e/"],["040.版本关系/003.v3.md","v3版本关系","/pages/8e1938/"],["040.版本关系/004.v4.md","v4版本关系","/pages/4c62ae/"],["040.版本关系/005.v5.md","v5版本关系","/pages/9ad977/"],["040.版本关系/006.v6.md","v6版本关系","/pages/b5bb02/"],["040.版本关系/007.v7.md","v7版本关系","/pages/81c439/"],["040.版本关系/008.v8.md","v8版本关系","/pages/a96045/"],["040.版本关系/009.v9.md","v9版本关系","/pages/c83c9f/"],["040.版本关系/010.v10.md","v10版本关系","/pages/1d0701/"],["040.版本关系/011.v11.md","v11版本关系","/pages/964526/"],["040.版本关系/012.v12.md","v12版本关系","/pages/c5cca4/"],["040.版本关系/013.v13.md","v13版本关系","/pages/5638a8/"],["040.版本关系/014.v14.md","v14版本关系","/pages/f50391/"],["040.版本关系/015.v15.md","v15版本关系","/pages/e6b75d/"],["040.版本关系/016.v16.md","v16版本关系","/pages/e08a17/"],["040.版本关系/017.v17.md","v17版本关系","/pages/631d92/"],["040.版本关系/018.v18.md","v18版本关系","/pages/e75f83/"],["040.版本关系/019.v19.md","v19版本关系","/pages/41624c/"],["040.版本关系/020.v20.md","v20版本关系","/pages/d93161/"],["040.版本关系/021.v21.md","v21版本关系","/pages/4fce33/"]]}],"/06.支持/":[["015.外包.md","外包服务","/pages/9365a8/"],["018.个人赞助.md","个人赞助","/pages/cce31f/"],["020.成为赞助商.md","成为赞助商","/pages/fe2b29/"]],"/07.功能/":[{title:"教程",collapsable:!0,children:[["01.教程/01.介绍.md","入门指引","/pages/132909/"]]},{title:"框架",collapsable:!0,children:[["02.框架/01.通信.md","通信","/pages/bb3659/"],["02.框架/02.http服务.md","http服务","/pages/67c56b/"],["02.框架/03.socket服务.md","socket服务","/pages/3703d6/"],["02.框架/04.json数据库.md","json数据库","/pages/f5a534/"],["02.框架/05.sqlite数据库.md","sqlite数据库","/pages/ed4289/"],["02.框架/06.任务.md","任务","/pages/98c38b/"],["02.框架/07.自动更新.md","自动更新","/pages/500e33/"],["02.框架/08.软件调用.md","软件调用","/pages/d5125f/"],["02.框架/09.Java服务.md","Java服务","/pages/56f285/"]]},{title:"操作系统",collapsable:!0,children:[["03.操作系统/01.文件.md","文件","/pages/b44b48/"],["03.操作系统/02.视图.md","视图","/pages/7fd8ae/"],["03.操作系统/03.窗口.md","窗口","/pages/cb40d7/"],["03.操作系统/04.桌面通知.md","桌面通知","/pages/58d5cb/"],["03.操作系统/05.电源监控.md","电源监控","/pages/e1061b/"],["03.操作系统/06.屏幕信息.md","屏幕信息","/pages/e8890e/"],["03.操作系统/07.系统主题.md","系统主题","/pages/30f6b3/"]]},{title:"特效",collapsable:!0,children:[["04.特效/01.视频播放器.md","视频播放器","/pages/d144d4/"]]},{title:"硬件",collapsable:!0,children:[["05.硬件/01.打印机.md","打印机","/pages/75c776/"]]}]},sidebarOpen:!0,updateBar:{showToArticle:!1},pageStyle:"line",category:!1,tag:!1,archive:!0,author:{name:"哆啦好梦",href:"https://github.com/wallace5303"},social:{icons:[{iconClass:"icon-github",title:"GitHub",link:"https://github.com/dromara/electron-egg"},{iconClass:"icon-gitee",title:"Gitee",link:"https://gitee.com/dromara/electron-egg"},{iconClass:"icon-youjian",title:"发邮件",link:"mailto:530353222@qq.com"}]},footer:{createYear:2023,copyrightInfo:'<a href="http://www.kaka996.com" target="_blank" style="font-weight:bold">哆啦好梦</a> | <a href="http://beian.miit.gov.cn/" target=_blank>京ICP备15041380号-2</a>'},htmlModules:{sidebarT:' \n    <a href="https://docs.qq.com/doc/p/b6dff122b9606d91ce34c898a492dc1c0328aaac" target="_blank">\n      <img class="no-zoom" height="60" width="224" src="/img/sponsor/aiwen.jpg">\n    </a>\n    <div>\n    <span style=\'color: gray;font-size: smaller;\'></span>\n    <span style=\'color: #E01E5A;font-size: smaller;font-weight: bolder;float: right\'>❤️<a href=\'/pages/fe2b29/\'>成为赞助商</a></span>\n    </div>    \n  ',pageT:'\n    <div class="wwads-cn wwads-horizontal page-wwads" data-id="236"></div>\n    <style>\n      .page-wwads{\n        width:100%!important;\n        min-height: 0;\n        margin: 0;\n        height: 100%;\n      }\n      .page-wwads .wwads-img img{\n        width:80px!important;\n      }\n      .page-wwads .wwads-poweredby{\n        width: 40px;\n        position: absolute;\n        right: 25px;\n        bottom: 3px;\n      }\n      .wwads-content .wwads-text, .page-wwads .wwads-text{\n        height: 100%;\n        padding-top: 5px;\n        display: block;\n      }\n    </style>\n  ',pageB:'\n    <ins class="adsbygoogle"\n      style="display:block"\n      data-ad-client="ca-pub-2708221248260848"\n      data-ad-slot="5098589217"\n      data-ad-format="auto"\n      data-full-width-responsive="true"></ins>\n    <script>\n      (adsbygoogle = window.adsbygoogle || []).push({});\n    <\/script>\n  ',windowRB:"\n\n  "}}};var cl=t(94),dl=t(95),pl=t(11);var ul={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:r}}=n;return!(e||!1===t||!0===r)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(pl.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(pl.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(pl.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let r=0,o=n.length;r<o;r++){const{frontmatter:{categories:o,tags:a}}=n[r];"array"===Object(pl.n)(o)&&o.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[r]))}),"array"===Object(pl.n)(a)&&a.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[r]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Jt.component(cl.default),Jt.component(dl.default);function ml(n){return n.toString().padStart(2,"0")}t(243);Jt.component("Badge",()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,507))),Jt.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,94))),Jt.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,95)));t(244);var hl=[({Vue:n,options:e,router:t,siteData:r,isServer:o})=>{o||t.afterEach(()=>{var n;n=function(){setTimeout((function(){void 0===window._AdBlockInit&&function(){const n=document.getElementsByClassName("wwads-cn"),e=document.querySelector(".wwads-content");n[0]&&!e&&(n[0].innerHTML="<style>.wwads-horizontal,.wwads-vertical{background-color:#f4f8fa;padding:5px;min-height:120px;margin-top:20px;box-sizing:border-box;border-radius:3px;font-family:sans-serif;display:flex;min-width:150px;position:relative;overflow:hidden;}.wwads-horizontal{flex-wrap:wrap;justify-content:center}.wwads-vertical{flex-direction:column;align-items:center;padding-bottom:32px}.wwads-horizontal a,.wwads-vertical a{text-decoration:none}.wwads-horizontal .wwads-img,.wwads-vertical .wwads-img{margin:5px}.wwads-horizontal .wwads-content,.wwads-vertical .wwads-content{margin:5px}.wwads-horizontal .wwads-content{flex:130px}.wwads-vertical .wwads-content{margin-top:10px}.wwads-horizontal .wwads-text,.wwads-content .wwads-text{font-size:14px;line-height:1.4;color:#0e1011;-webkit-font-smoothing:antialiased}.wwads-horizontal .wwads-poweredby,.wwads-vertical .wwads-poweredby{display:block;font-size:11px;color:#a6b7bf;margin-top:1em}.wwads-vertical .wwads-poweredby{position:absolute;left:10px;bottom:10px}.wwads-horizontal .wwads-poweredby span,.wwads-vertical .wwads-poweredby span{transition:all 0.2s ease-in-out;margin-left:-1em}.wwads-horizontal .wwads-poweredby span:first-child,.wwads-vertical .wwads-poweredby span:first-child{opacity:0}.wwads-horizontal:hover .wwads-poweredby span,.wwads-vertical:hover .wwads-poweredby span{opacity:1;margin-left:0}.wwads-horizontal .wwads-hide,.wwads-vertical .wwads-hide{position:absolute;right:-23px;bottom:-23px;width:46px;height:46px;border-radius:23px;transition:all 0.3s ease-in-out;cursor:pointer;}.wwads-horizontal .wwads-hide:hover,.wwads-vertical .wwads-hide:hover{background:rgb(0 0 0 /0.05)}.wwads-horizontal .wwads-hide svg,.wwads-vertical .wwads-hide svg{position:absolute;left:10px;top:10px;fill:#a6b7bf}.wwads-horizontal .wwads-hide:hover svg,.wwads-vertical .wwads-hide:hover svg{fill:#3E4546}</style><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-img' target='_blank' rel='nofollow'><img src='https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/wwads.2a3pidhlh4ys.webp' width='130'></a><div class='wwads-content'><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-text' target='_blank' rel='nofollow'>为了本站的长期运营，请将我们的网站加入广告拦截器的白名单，感谢您的支持！<span style='color: #11a8cd'>如何添加白名单?</span></a><a href='https://wwads.cn/page/end-user-privacy' class='wwads-poweredby' title='万维广告 ～ 让广告更优雅，且有用' target='_blank'><span>广告</span></a></div><a class='wwads-hide' onclick='parentNode.remove()' title='隐藏广告'><svg xmlns='http://www.w3.org/2000/svg' width='6' height='7'><path d='M.879.672L3 2.793 5.121.672a.5.5 0 11.707.707L3.708 3.5l2.12 2.121a.5.5 0 11-.707.707l-2.12-2.12-2.122 2.12a.5.5 0 11-.707-.707l2.121-2.12L.172 1.378A.5.5 0 01.879.672z'></path></svg></a>")}()}),3e3)},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(n,1):document.addEventListener("DOMContentLoaded",n),setTimeout(()=>{const n=document.querySelector(".page-wwads");if(!n)return;const e=n.querySelector(".wwads-hide");e&&(e.onclick=()=>{n.style.display="none"}),"none"===n.style.display&&(n.style.display="flex")},900)})},({Vue:n,options:e,router:t,siteData:r})=>{r.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${ml(n.getUTCMonth()+1)}-${ml(n.getUTCDate())} ${ml(n.getUTCHours())}:${ml(n.getUTCMinutes())}:${ml(n.getUTCSeconds())}`}(e)),t?n.author=t:r.themeConfig.author&&(n.author=r.themeConfig.author)}),n.mixin(ul)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:n})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?6da4ceec5fb4d1c7efe0fd109cf2cc9d";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),n.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))}],gl=[];class vl extends class{constructor(){this.store=new Jt({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Jt.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(vl.prototype,{getPageAsyncComponent:is,getLayoutAsyncComponent:ss,getAsyncComponent:ls,getVueComponent:cs});var fl={install(n){const e=new vl;n.$vuepress=e,n.prototype.$vuepress=e}};function bl(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var xl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ps("pageKey",e),Jt.component(e)||Jt.component(e,is(e)),Jt.component(e)?n(e):n("")}},yl={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},wl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},jl=(t(245),t(246),Object(al.a)(wl,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),kl={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Jt.config.productionTip=!1,Jt.use(Hi),Jt.use(fl),Jt.mixin(function(n,e,t=Jt){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const r=new(n(t.$vuepress.$get("siteData"))),o=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),a={};return Object.keys(o).reduce((n,e)=>(e.startsWith("$")&&(n[e]=o[e].get),n),a),{computed:a}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},ll)),Jt.component("Content",xl),Jt.component("ContentSlotsDistributor",yl),Jt.component("OutboundLink",jl),Jt.component("ClientOnly",kl),Jt.component("Layout",ss("Layout")),Jt.component("NotFound",ss("NotFound")),Jt.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.2",hash:"bee6749"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:ll.routerBase||ll.base,t=new Hi({base:e,mode:"history",fallback:!1,routes:sl,scrollBehavior:(n,e,t)=>t||(n.hash?!Jt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(bl(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";bl(n,t)?r(t):r()}else r();else{const t=e.path+"/",o=e.path+".html";bl(n,o)?r(o):bl(n,t)?r(t):r()}})}(t);const r={};try{await Promise.all(hl.filter(n=>"function"==typeof n).map(e=>e({Vue:Jt,options:r,router:t,siteData:ll,isServer:n})))}catch(n){console.error(n)}return{app:new Jt(Object.assign(r,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},gl.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);